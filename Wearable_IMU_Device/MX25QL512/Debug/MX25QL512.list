
MX25QL512.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08010248  08010248  00020248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109dc  080109dc  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  080109dc  080109dc  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080109dc  080109dc  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109dc  080109dc  000209dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109e0  080109e0  000209e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080109e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  200002d4  08010cb8  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001748  08010cb8  00031748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f22  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046f3  00000000  00000000  00048269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0004c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd6  00000000  00000000  0004dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f576  00000000  00000000  0004ee76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b8b4  00000000  00000000  0006e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000acee6  00000000  00000000  00089ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066f0  00000000  00000000  00136b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801022c 	.word	0x0801022c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0801022c 	.word	0x0801022c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f002 fe15 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000cd2:	f002 fe0f 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f002 fbbc 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000d0e:	f002 fbad 	bl	800346c <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000d28:	bf00      	nop
 8000d2a:	f000 fa55 	bl	80011d8 <icm20948_who_am_i>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f7      	bne.n	8000d2a <icm20948_init+0x6>

	icm20948_device_reset();
 8000d3a:	f000 fa95 	bl	8001268 <icm20948_device_reset>
	icm20948_wakeup();
 8000d3e:	f000 fabe 	bl	80012be <icm20948_wakeup>

	icm20948_clock_source(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fb36 	bl	80013b4 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000d48:	f000 fb4d 	bl	80013e6 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8000d4c:	f000 fad1 	bl	80012f2 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 fb51 	bl	80013f8 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fb6b 	bl	8001432 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(10);
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f000 fb85 	bl	800146c <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(10);
 8000d62:	200a      	movs	r0, #10
 8000d64:	f000 fb91 	bl	800148a <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000d68:	f000 fbbe 	bl	80014e8 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000d6c:	f000 fc58 	bl	8001620 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 fd63 	bl	800183c <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f000 fdaa 	bl	80018d0 <icm20948_accel_full_scale_select>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <ak09916_init>:

void ak09916_init()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000d84:	f000 facc 	bl	8001320 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000d88:	f000 fae1 	bl	800134e <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000d8c:	2007      	movs	r0, #7
 8000d8e:	f000 faf8 	bl	8001382 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000d92:	bf00      	nop
 8000d94:	f000 fa44 	bl	8001220 <ak09916_who_am_i>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	f083 0301 	eor.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f7      	bne.n	8000d94 <ak09916_init+0x14>


	// LP_CONFIG: ODR is determined by I2C_MST_ODR_CONFIG register, page 37
	// I2C_MST_ODR_CONFIG: 1.1 kHz/(2^3) = 136 Hz, page 68
	ak09916_lp_config();
 8000da4:	f000 fa6c 	bl	8001280 <ak09916_lp_config>
	ak09916_soft_reset();
 8000da8:	f000 fa7e 	bl	80012a8 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000dac:	2008      	movs	r0, #8
 8000dae:	f000 fb8a 	bl	80014c6 <ak09916_operation_mode_setting>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <icm20948_gyro_read>:


void icm20948_gyro_read(axises* data)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	2133      	movs	r1, #51	; 0x33
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 fe48 	bl	8001a58 <read_multiple_icm20948_reg>
 8000dc8:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3302      	adds	r3, #2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3303      	adds	r3, #3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3304      	adds	r3, #4
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3305      	adds	r3, #5
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000e44:	2206      	movs	r2, #6
 8000e46:	212d      	movs	r1, #45	; 0x2d
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 fe05 	bl	8001a58 <read_multiple_icm20948_reg>
 8000e4e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3302      	adds	r3, #2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3303      	adds	r3, #3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3305      	adds	r3, #5
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <icm20948_accel_read+0x90>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200002f4 	.word	0x200002f4

08000ed0 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
//void ak09916_mag_read(axises* data)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f000 fe19 	bl	8001b10 <read_single_ak09916_reg>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
	if(!drdy){
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d104      	bne.n	8000ef6 <ak09916_mag_read+0x26>
		printf("data is not ready\n");
 8000eec:	4829      	ldr	r0, [pc, #164]	; (8000f94 <ak09916_mag_read+0xc4>)
 8000eee:	f00d f83b 	bl	800df68 <puts>
		return false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e049      	b.n	8000f8a <ak09916_mag_read+0xba>
	}

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8000ef6:	2106      	movs	r1, #6
 8000ef8:	2011      	movs	r0, #17
 8000efa:	f000 fe55 	bl	8001ba8 <read_multiple_ak09916_reg>
 8000efe:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8000f00:	2018      	movs	r0, #24
 8000f02:	f000 fe05 	bl	8001b10 <read_single_ak09916_reg>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	73fb      	strb	r3, [r7, #15]
	if(hofl){
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <ak09916_mag_read+0x4e>
		printf("data is overflow\n");
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <ak09916_mag_read+0xc8>)
 8000f16:	f00d f827 	bl	800df68 <puts>
		return false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e035      	b.n	8000f8a <ak09916_mag_read+0xba>
	}

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	3303      	adds	r3, #3
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3305      	adds	r3, #5
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	3304      	adds	r3, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08010248 	.word	0x08010248
 8000f98:	0801025c 	.word	0x0801025c
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <read_all_data>:
	return true;
}

icm_20948_data read_all_data(void)
//uint8_t read_all_data(icm_20948_data* data)
{
 8000fa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fa4:	b09c      	sub	sp, #112	; 0x70
 8000fa6:	af04      	add	r7, sp, #16
 8000fa8:	6078      	str	r0, [r7, #4]
	icm_20948_data result;
	axises my_gyro;
	axises my_accel;
	axises my_mag;

	icm20948_gyro_read(&my_gyro);
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff01 	bl	8000db6 <icm20948_gyro_read>

	my_gyro.x /= gyro_scale_factor;
 8000fb4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000fb8:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <read_all_data+0x218>)
 8000fba:	ed93 7a00 	vldr	s14, [r3]
 8000fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	my_gyro.y /= gyro_scale_factor;
 8000fc6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000fca:	4b7b      	ldr	r3, [pc, #492]	; (80011b8 <read_all_data+0x218>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	my_gyro.z /= gyro_scale_factor;
 8000fd8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <read_all_data+0x218>)
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	icm20948_accel_read(&my_accel);
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff24 	bl	8000e3c <icm20948_accel_read>

	my_accel.x /= accel_scale_factor;
 8000ff4:	edd7 6a08 	vldr	s13, [r7, #32]
 8000ff8:	4b70      	ldr	r3, [pc, #448]	; (80011bc <read_all_data+0x21c>)
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001002:	edc7 7a08 	vstr	s15, [r7, #32]
	my_accel.y /= accel_scale_factor;
 8001006:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800100a:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <read_all_data+0x21c>)
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001014:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	my_accel.z /= accel_scale_factor;
 8001018:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800101c:	4b67      	ldr	r3, [pc, #412]	; (80011bc <read_all_data+0x21c>)
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001026:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff4e 	bl	8000ed0 <ak09916_mag_read>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
//	ak09916_mag_read(&temp);
	printf("new data is %d\n", new_data);
 800103a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800103e:	4619      	mov	r1, r3
 8001040:	485f      	ldr	r0, [pc, #380]	; (80011c0 <read_all_data+0x220>)
 8001042:	f00c ff2b 	bl	800de9c <iprintf>
	if(!new_data)
 8001046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <read_all_data+0xbc>
	{
		printf("data not ready/ overflow for magnetometer\n");
 8001054:	485b      	ldr	r0, [pc, #364]	; (80011c4 <read_all_data+0x224>)
 8001056:	f00c ff87 	bl	800df68 <puts>
		while(1);
 800105a:	e7fe      	b.n	800105a <read_all_data+0xba>
	}
	else
	{
		printf("magnetometer reading finished.\n");
 800105c:	485a      	ldr	r0, [pc, #360]	; (80011c8 <read_all_data+0x228>)
 800105e:	f00c ff83 	bl	800df68 <puts>
	}

	my_mag.x = (float)(temp.x * 0.15);
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa6f 	bl	8000548 <__aeabi_f2d>
 800106a:	a351      	add	r3, pc, #324	; (adr r3, 80011b0 <read_all_data+0x210>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fac2 	bl	80005f8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fd94 	bl	8000ba8 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	617b      	str	r3, [r7, #20]
	my_mag.y = (float)(temp.y * 0.15);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa5e 	bl	8000548 <__aeabi_f2d>
 800108c:	a348      	add	r3, pc, #288	; (adr r3, 80011b0 <read_all_data+0x210>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fab1 	bl	80005f8 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd83 	bl	8000ba8 <__aeabi_d2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
	my_mag.z = (float)(temp.z * 0.15);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa4d 	bl	8000548 <__aeabi_f2d>
 80010ae:	a340      	add	r3, pc, #256	; (adr r3, 80011b0 <read_all_data+0x210>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff faa0 	bl	80005f8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd72 	bl	8000ba8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	61fb      	str	r3, [r7, #28]
//			data ->y_gyro,data ->z_gyro);
//	printf("magnetometer : %f, %f, and %f\n", data ->x_magnet,
//			data ->y_magnet, data ->z_magnet);
//
//	return 0;
    result.x_magnet = my_mag.x;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	653b      	str	r3, [r7, #80]	; 0x50
    result.y_magnet = my_mag.y;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	657b      	str	r3, [r7, #84]	; 0x54
    result.z_magnet = my_mag.z;
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	65bb      	str	r3, [r7, #88]	; 0x58

    result.x_accel = my_accel.x;
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
    result.y_accel = my_accel.y;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
    result.z_accel = my_accel.z;
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	643b      	str	r3, [r7, #64]	; 0x40

    result.x_gyro = my_gyro.x;
 80010e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
    result.y_gyro = my_gyro.y;
 80010e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
    result.z_gyro = my_gyro.z;
 80010e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c

    printf("accelerometer : %f, %f, and %f \n", result.x_accel,
 80010ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	4680      	mov	r8, r0
 80010f6:	4689      	mov	r9, r1
           result.y_accel, result.z_accel);
 80010f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    printf("accelerometer : %f, %f, and %f \n", result.x_accel,
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa24 	bl	8000548 <__aeabi_f2d>
 8001100:	4604      	mov	r4, r0
 8001102:	460d      	mov	r5, r1
           result.y_accel, result.z_accel);
 8001104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    printf("accelerometer : %f, %f, and %f \n", result.x_accel,
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001114:	e9cd 4500 	strd	r4, r5, [sp]
 8001118:	4642      	mov	r2, r8
 800111a:	464b      	mov	r3, r9
 800111c:	482b      	ldr	r0, [pc, #172]	; (80011cc <read_all_data+0x22c>)
 800111e:	f00c febd 	bl	800de9c <iprintf>
    printf("gyroscope : %f, %f, and %f \n", result.x_gyro,
 8001122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa0f 	bl	8000548 <__aeabi_f2d>
 800112a:	4680      	mov	r8, r0
 800112c:	4689      	mov	r9, r1
           result.y_gyro, result.z_gyro);
 800112e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    printf("gyroscope : %f, %f, and %f \n", result.x_gyro,
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa09 	bl	8000548 <__aeabi_f2d>
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
           result.y_gyro, result.z_gyro);
 800113a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    printf("gyroscope : %f, %f, and %f \n", result.x_gyro,
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa03 	bl	8000548 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800114a:	e9cd 4500 	strd	r4, r5, [sp]
 800114e:	4642      	mov	r2, r8
 8001150:	464b      	mov	r3, r9
 8001152:	481f      	ldr	r0, [pc, #124]	; (80011d0 <read_all_data+0x230>)
 8001154:	f00c fea2 	bl	800de9c <iprintf>
    printf("magnetometer : %f, %f, and %f\n", result.x_magnet,
 8001158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4680      	mov	r8, r0
 8001162:	4689      	mov	r9, r1
           result.y_magnet, result.z_magnet);
 8001164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    printf("magnetometer : %f, %f, and %f\n", result.x_magnet,
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9ee 	bl	8000548 <__aeabi_f2d>
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
           result.y_magnet, result.z_magnet);
 8001170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    printf("magnetometer : %f, %f, and %f\n", result.x_magnet,
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001180:	e9cd 4500 	strd	r4, r5, [sp]
 8001184:	4642      	mov	r2, r8
 8001186:	464b      	mov	r3, r9
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <read_all_data+0x234>)
 800118a:	f00c fe87 	bl	800de9c <iprintf>

    return result;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	461d      	mov	r5, r3
 8001192:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	602b      	str	r3, [r5, #0]

}
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	3760      	adds	r7, #96	; 0x60
 80011a6:	46bd      	mov	sp, r7
 80011a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	33333333 	.word	0x33333333
 80011b4:	3fc33333 	.word	0x3fc33333
 80011b8:	200002f0 	.word	0x200002f0
 80011bc:	200002f4 	.word	0x200002f4
 80011c0:	08010290 	.word	0x08010290
 80011c4:	080102a0 	.word	0x080102a0
 80011c8:	080102cc 	.word	0x080102cc
 80011cc:	080102ec 	.word	0x080102ec
 80011d0:	08010310 	.word	0x08010310
 80011d4:	08010270 	.word	0x08010270

080011d8 <icm20948_who_am_i>:
bool icm20948_who_am_i()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80011de:	2100      	movs	r1, #0
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 fbe9 	bl	80019b8 <read_single_icm20948_reg>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	printf("the icm20948 who am i is: 0x%x\n",icm20948_id);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4619      	mov	r1, r3
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <icm20948_who_am_i+0x3c>)
 80011f0:	f00c fe54 	bl	800de9c <iprintf>
	if(icm20948_id == ICM20948_ID){
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2bea      	cmp	r3, #234	; 0xea
 80011f8:	d104      	bne.n	8001204 <icm20948_who_am_i+0x2c>
		printf("Data matches, icm20948 identity verified.\n");
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <icm20948_who_am_i+0x40>)
 80011fc:	f00c feb4 	bl	800df68 <puts>
		return true;
 8001200:	2301      	movs	r3, #1
 8001202:	e003      	b.n	800120c <icm20948_who_am_i+0x34>
	}
	else{
		printf("Data not matched, icm20948 incorrect.\n");
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <icm20948_who_am_i+0x44>)
 8001206:	f00c feaf 	bl	800df68 <puts>
		return false;
 800120a:	2300      	movs	r3, #0
	}
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08010330 	.word	0x08010330
 8001218:	08010350 	.word	0x08010350
 800121c:	0801037c 	.word	0x0801037c

08001220 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fc72 	bl	8001b10 <read_single_ak09916_reg>
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
	printf("the ak09916_id who am i is: 0x%x\n", ak09916_id);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4619      	mov	r1, r3
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <ak09916_who_am_i+0x3c>)
 8001236:	f00c fe31 	bl	800de9c <iprintf>
	if(ak09916_id == AK09916_ID)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d104      	bne.n	800124a <ak09916_who_am_i+0x2a>
	{
		printf("Data matches, ak09916 identity verified.\n");
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <ak09916_who_am_i+0x40>)
 8001242:	f00c fe91 	bl	800df68 <puts>
		return true;
 8001246:	2301      	movs	r3, #1
 8001248:	e003      	b.n	8001252 <ak09916_who_am_i+0x32>
	}
	else
	{
		printf("Data not matched, ak09916 incorrect.\n");
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <ak09916_who_am_i+0x44>)
 800124c:	f00c fe8c 	bl	800df68 <puts>
		return false;
 8001250:	2300      	movs	r3, #0
	}
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	080103a4 	.word	0x080103a4
 8001260:	080103c8 	.word	0x080103c8
 8001264:	080103f4 	.word	0x080103f4

08001268 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800126c:	22c1      	movs	r2, #193	; 0xc1
 800126e:	2106      	movs	r1, #6
 8001270:	2000      	movs	r0, #0
 8001272:	f000 fbcd 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(100);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f001 ffc2 	bl	8003200 <HAL_Delay>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <ak09916_lp_config>:

void ak09916_lp_config()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	// LP_CONFIG: ODR is determined by I2C_MST_ODR_CONFIG register, page 37
	write_single_icm20948_reg(ub_0, B0_LP_CONFIG, 0x40);
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	2105      	movs	r1, #5
 8001288:	2000      	movs	r0, #0
 800128a:	f000 fbc1 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(100);
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f001 ffb6 	bl	8003200 <HAL_Delay>
	// I2C_MST_ODR_CONFIG: 1.1 kHz/(2^3) = 136 Hz, page 68
	write_single_icm20948_reg(ub_3, B3_I2C_MST_ODR_CONFIG, 0x03);
 8001294:	2203      	movs	r2, #3
 8001296:	2100      	movs	r1, #0
 8001298:	2030      	movs	r0, #48	; 0x30
 800129a:	f000 fbb9 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(100);
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f001 ffae 	bl	8003200 <HAL_Delay>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 80012ac:	2101      	movs	r1, #1
 80012ae:	2032      	movs	r0, #50	; 0x32
 80012b0:	f000 fc52 	bl	8001b58 <write_single_ak09916_reg>
	HAL_Delay(100);
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f001 ffa3 	bl	8003200 <HAL_Delay>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <icm20948_wakeup>:

void icm20948_wakeup()
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80012c4:	2106      	movs	r1, #6
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 fb76 	bl	80019b8 <read_single_icm20948_reg>
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012d6:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	461a      	mov	r2, r3
 80012dc:	2106      	movs	r1, #6
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fb96 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(100);
 80012e4:	2064      	movs	r0, #100	; 0x64
 80012e6:	f001 ff8b 	bl	8003200 <HAL_Delay>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80012f8:	2103      	movs	r1, #3
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 fb5c 	bl	80019b8 <read_single_icm20948_reg>
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	461a      	mov	r2, r3
 8001310:	2103      	movs	r1, #3
 8001312:	2000      	movs	r0, #0
 8001314:	f000 fb7c 	bl	8001a10 <write_single_icm20948_reg>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001326:	2103      	movs	r1, #3
 8001328:	2000      	movs	r0, #0
 800132a:	f000 fb45 	bl	80019b8 <read_single_icm20948_reg>
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	461a      	mov	r2, r3
 800133e:	2103      	movs	r1, #3
 8001340:	2000      	movs	r0, #0
 8001342:	f000 fb65 	bl	8001a10 <write_single_icm20948_reg>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001354:	2103      	movs	r1, #3
 8001356:	2000      	movs	r0, #0
 8001358:	f000 fb2e 	bl	80019b8 <read_single_icm20948_reg>
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	461a      	mov	r2, r3
 800136c:	2103      	movs	r1, #3
 800136e:	2000      	movs	r0, #0
 8001370:	f000 fb4e 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(100);
 8001374:	2064      	movs	r0, #100	; 0x64
 8001376:	f001 ff43 	bl	8003200 <HAL_Delay>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 800138c:	2101      	movs	r1, #1
 800138e:	2030      	movs	r0, #48	; 0x30
 8001390:	f000 fb12 	bl	80019b8 <read_single_icm20948_reg>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4313      	orrs	r3, r2
 800139e:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	461a      	mov	r2, r3
 80013a4:	2101      	movs	r1, #1
 80013a6:	2030      	movs	r0, #48	; 0x30
 80013a8:	f000 fb32 	bl	8001a10 <write_single_icm20948_reg>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80013be:	2106      	movs	r1, #6
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 faf9 	bl	80019b8 <read_single_icm20948_reg>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	461a      	mov	r2, r3
 80013d6:	2106      	movs	r1, #6
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 fb19 	bl	8001a10 <write_single_icm20948_reg>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2109      	movs	r1, #9
 80013ee:	2020      	movs	r0, #32
 80013f0:	f000 fb0e 	bl	8001a10 <write_single_icm20948_reg>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001402:	2101      	movs	r1, #1
 8001404:	2020      	movs	r0, #32
 8001406:	f000 fad7 	bl	80019b8 <read_single_icm20948_reg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	b25a      	sxtb	r2, r3
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	4313      	orrs	r3, r2
 800141a:	b25b      	sxtb	r3, r3
 800141c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	461a      	mov	r2, r3
 8001422:	2101      	movs	r1, #1
 8001424:	2020      	movs	r0, #32
 8001426:	f000 faf3 	bl	8001a10 <write_single_icm20948_reg>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800143c:	2114      	movs	r1, #20
 800143e:	2020      	movs	r0, #32
 8001440:	f000 faba 	bl	80019b8 <read_single_icm20948_reg>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	b25a      	sxtb	r2, r3
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4313      	orrs	r3, r2
 8001454:	b25b      	sxtb	r3, r3
 8001456:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	461a      	mov	r2, r3
 800145c:	2101      	movs	r1, #1
 800145e:	2020      	movs	r0, #32
 8001460:	f000 fad6 	bl	8001a10 <write_single_icm20948_reg>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	461a      	mov	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	2020      	movs	r0, #32
 800147e:	f000 fac7 	bl	8001a10 <write_single_icm20948_reg>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	2110      	movs	r1, #16
 80014ac:	2020      	movs	r0, #32
 80014ae:	f000 faaf 	bl	8001a10 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	461a      	mov	r2, r3
 80014b6:	2111      	movs	r1, #17
 80014b8:	2020      	movs	r0, #32
 80014ba:	f000 faa9 	bl	8001a10 <write_single_icm20948_reg>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4619      	mov	r1, r3
 80014d4:	2031      	movs	r0, #49	; 0x31
 80014d6:	f000 fb3f 	bl	8001b58 <write_single_ak09916_reg>
	HAL_Delay(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f001 fe90 	bl	8003200 <HAL_Delay>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	2300      	movs	r3, #0
 8001500:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	e031      	b.n	800156c <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc52 	bl	8000db6 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001528:	ee17 3a90 	vmov	r3, s15
 800152c:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001538:	edd7 7a07 	vldr	s15, [r7, #28]
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001544:	ee17 3a90 	vmov	r3, s15
 8001548:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001554:	edd7 7a08 	vldr	s15, [r7, #32]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001560:	ee17 3a90 	vmov	r3, s15
 8001564:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	3301      	adds	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	2b63      	cmp	r3, #99	; 0x63
 8001570:	ddca      	ble.n	8001508 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a29      	ldr	r2, [pc, #164]	; (800161c <icm20948_gyro_calibration+0x134>)
 8001576:	fb82 1203 	smull	r1, r2, r2, r3
 800157a:	1152      	asrs	r2, r2, #5
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <icm20948_gyro_calibration+0x134>)
 8001586:	fb82 1203 	smull	r1, r2, r2, r3
 800158a:	1152      	asrs	r2, r2, #5
 800158c:	17db      	asrs	r3, r3, #31
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <icm20948_gyro_calibration+0x134>)
 8001596:	fb82 1203 	smull	r1, r2, r2, r3
 800159a:	1152      	asrs	r2, r2, #5
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	425b      	negs	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da00      	bge.n	80015ac <icm20948_gyro_calibration+0xc4>
 80015aa:	3303      	adds	r3, #3
 80015ac:	109b      	asrs	r3, r3, #2
 80015ae:	121b      	asrs	r3, r3, #8
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	425b      	negs	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da00      	bge.n	80015be <icm20948_gyro_calibration+0xd6>
 80015bc:	3303      	adds	r3, #3
 80015be:	109b      	asrs	r3, r3, #2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	425b      	negs	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da00      	bge.n	80015ce <icm20948_gyro_calibration+0xe6>
 80015cc:	3303      	adds	r3, #3
 80015ce:	109b      	asrs	r3, r3, #2
 80015d0:	121b      	asrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	425b      	negs	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da00      	bge.n	80015e0 <icm20948_gyro_calibration+0xf8>
 80015de:	3303      	adds	r3, #3
 80015e0:	109b      	asrs	r3, r3, #2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	425b      	negs	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da00      	bge.n	80015f0 <icm20948_gyro_calibration+0x108>
 80015ee:	3303      	adds	r3, #3
 80015f0:	109b      	asrs	r3, r3, #2
 80015f2:	121b      	asrs	r3, r3, #8
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	425b      	negs	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da00      	bge.n	8001602 <icm20948_gyro_calibration+0x11a>
 8001600:	3303      	adds	r3, #3
 8001602:	109b      	asrs	r3, r3, #2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	2306      	movs	r3, #6
 800160c:	2103      	movs	r1, #3
 800160e:	2020      	movs	r0, #32
 8001610:	f000 fa52 	bl	8001ab8 <write_multiple_icm20948_reg>
}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	51eb851f 	.word	0x51eb851f

08001620 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b090      	sub	sp, #64	; 0x40
 8001624:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	2300      	movs	r3, #0
 8001644:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164a:	e031      	b.n	80016b0 <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fbf3 	bl	8000e3c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001688:	ee17 3a90 	vmov	r3, s15
 800168c:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a4:	ee17 3a90 	vmov	r3, s15
 80016a8:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 80016aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ac:	3301      	adds	r3, #1
 80016ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b2:	2b63      	cmp	r3, #99	; 0x63
 80016b4:	ddca      	ble.n	800164c <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <icm20948_accel_calibration+0x214>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1152      	asrs	r2, r2, #5
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <icm20948_accel_calibration+0x214>)
 80016ca:	fb82 1203 	smull	r1, r2, r2, r3
 80016ce:	1152      	asrs	r2, r2, #5
 80016d0:	17db      	asrs	r3, r3, #31
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	4a56      	ldr	r2, [pc, #344]	; (8001834 <icm20948_accel_calibration+0x214>)
 80016da:	fb82 1203 	smull	r1, r2, r2, r3
 80016de:	1152      	asrs	r2, r2, #5
 80016e0:	17db      	asrs	r3, r3, #31
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 80016e6:	4a54      	ldr	r2, [pc, #336]	; (8001838 <icm20948_accel_calibration+0x218>)
 80016e8:	463b      	mov	r3, r7
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	4611      	mov	r1, r2
 80016ee:	8019      	strh	r1, [r3, #0]
 80016f0:	3302      	adds	r3, #2
 80016f2:	0c12      	lsrs	r2, r2, #16
 80016f4:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80016f6:	2202      	movs	r2, #2
 80016f8:	2114      	movs	r1, #20
 80016fa:	2010      	movs	r0, #16
 80016fc:	f000 f9ac 	bl	8001a58 <read_multiple_icm20948_reg>
 8001700:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800170a:	3201      	adds	r2, #1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001714:	3301      	adds	r3, #1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001720:	2202      	movs	r2, #2
 8001722:	2117      	movs	r1, #23
 8001724:	2010      	movs	r0, #16
 8001726:	f000 f997 	bl	8001a58 <read_multiple_icm20948_reg>
 800172a:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800172c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001734:	3201      	adds	r2, #1
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800174a:	2202      	movs	r2, #2
 800174c:	211a      	movs	r1, #26
 800174e:	2010      	movs	r0, #16
 8001750:	f000 f982 	bl	8001a58 <read_multiple_icm20948_reg>
 8001754:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800175e:	3201      	adds	r2, #1
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001768:	3301      	adds	r3, #1
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	da00      	bge.n	800177e <icm20948_accel_calibration+0x15e>
 800177c:	3307      	adds	r3, #7
 800177e:	10db      	asrs	r3, r3, #3
 8001780:	425b      	negs	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da00      	bge.n	8001790 <icm20948_accel_calibration+0x170>
 800178e:	3307      	adds	r3, #7
 8001790:	10db      	asrs	r3, r3, #3
 8001792:	425b      	negs	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da00      	bge.n	80017a2 <icm20948_accel_calibration+0x182>
 80017a0:	3307      	adds	r3, #7
 80017a2:	10db      	asrs	r3, r3, #3
 80017a4:	425b      	negs	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	121b      	asrs	r3, r3, #8
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80017be:	797a      	ldrb	r2, [r7, #5]
 80017c0:	783b      	ldrb	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	121b      	asrs	r3, r3, #8
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	787b      	ldrb	r3, [r7, #1]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	121b      	asrs	r3, r3, #8
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80017fa:	7a7a      	ldrb	r2, [r7, #9]
 80017fc:	78bb      	ldrb	r3, [r7, #2]
 80017fe:	4313      	orrs	r3, r2
 8001800:	b2db      	uxtb	r3, r3
 8001802:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001804:	1d3a      	adds	r2, r7, #4
 8001806:	2302      	movs	r3, #2
 8001808:	2114      	movs	r1, #20
 800180a:	2010      	movs	r0, #16
 800180c:	f000 f954 	bl	8001ab8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	1c9a      	adds	r2, r3, #2
 8001814:	2302      	movs	r3, #2
 8001816:	2117      	movs	r1, #23
 8001818:	2010      	movs	r0, #16
 800181a:	f000 f94d 	bl	8001ab8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	2302      	movs	r3, #2
 8001824:	211a      	movs	r1, #26
 8001826:	2010      	movs	r0, #16
 8001828:	f000 f946 	bl	8001ab8 <write_multiple_icm20948_reg>
}
 800182c:	bf00      	nop
 800182e:	3740      	adds	r7, #64	; 0x40
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	51eb851f 	.word	0x51eb851f
 8001838:	0801041c 	.word	0x0801041c

0800183c <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001846:	2101      	movs	r1, #1
 8001848:	2020      	movs	r0, #32
 800184a:	f000 f8b5 	bl	80019b8 <read_single_icm20948_reg>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d827      	bhi.n	80018a8 <icm20948_gyro_full_scale_select+0x6c>
 8001858:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <icm20948_gyro_full_scale_select+0x24>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001871 	.word	0x08001871
 8001864:	08001879 	.word	0x08001879
 8001868:	08001889 	.word	0x08001889
 800186c:	08001899 	.word	0x08001899
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <icm20948_gyro_full_scale_select+0x80>)
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <icm20948_gyro_full_scale_select+0x84>)
 8001874:	601a      	str	r2, [r3, #0]
			break;
 8001876:	e017      	b.n	80018a8 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <icm20948_gyro_full_scale_select+0x80>)
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <icm20948_gyro_full_scale_select+0x88>)
 8001884:	601a      	str	r2, [r3, #0]
			break;
 8001886:	e00f      	b.n	80018a8 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <icm20948_gyro_full_scale_select+0x80>)
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <icm20948_gyro_full_scale_select+0x8c>)
 8001894:	601a      	str	r2, [r3, #0]
			break;
 8001896:	e007      	b.n	80018a8 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f043 0306 	orr.w	r3, r3, #6
 800189e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <icm20948_gyro_full_scale_select+0x80>)
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <icm20948_gyro_full_scale_select+0x90>)
 80018a4:	601a      	str	r2, [r3, #0]
			break;
 80018a6:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	461a      	mov	r2, r3
 80018ac:	2101      	movs	r1, #1
 80018ae:	2020      	movs	r0, #32
 80018b0:	f000 f8ae 	bl	8001a10 <write_single_icm20948_reg>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002f0 	.word	0x200002f0
 80018c0:	43030000 	.word	0x43030000
 80018c4:	42830000 	.word	0x42830000
 80018c8:	42033333 	.word	0x42033333
 80018cc:	41833333 	.word	0x41833333

080018d0 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80018da:	2114      	movs	r1, #20
 80018dc:	2020      	movs	r0, #32
 80018de:	f000 f86b 	bl	80019b8 <read_single_icm20948_reg>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d82b      	bhi.n	8001944 <icm20948_accel_full_scale_select+0x74>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <icm20948_accel_full_scale_select+0x24>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	0800190f 	.word	0x0800190f
 80018fc:	08001921 	.word	0x08001921
 8001900:	08001933 	.word	0x08001933
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <icm20948_accel_full_scale_select+0x88>)
 8001906:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800190a:	601a      	str	r2, [r3, #0]
			break;
 800190c:	e01a      	b.n	8001944 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <icm20948_accel_full_scale_select+0x88>)
 8001918:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800191c:	601a      	str	r2, [r3, #0]
			break;
 800191e:	e011      	b.n	8001944 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <icm20948_accel_full_scale_select+0x88>)
 800192a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800192e:	601a      	str	r2, [r3, #0]
			break;
 8001930:	e008      	b.n	8001944 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	f043 0306 	orr.w	r3, r3, #6
 8001938:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <icm20948_accel_full_scale_select+0x88>)
 800193c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001940:	601a      	str	r2, [r3, #0]
			break;
 8001942:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	461a      	mov	r2, r3
 8001948:	2114      	movs	r1, #20
 800194a:	2020      	movs	r0, #32
 800194c:	f000 f860 	bl	8001a10 <write_single_icm20948_reg>
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200002f4 	.word	0x200002f4

0800195c <cs_high>:


/* Static Functions */
static void cs_high()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8001960:	2201      	movs	r2, #1
 8001962:	2110      	movs	r1, #16
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f001 ffc4 	bl	80038f4 <HAL_GPIO_WritePin>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <cs_low>:

static void cs_low()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2110      	movs	r1, #16
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f001 ffba 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800198e:	237f      	movs	r3, #127	; 0x7f
 8001990:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	737b      	strb	r3, [r7, #13]

	cs_low();
 8001996:	f7ff ffeb 	bl	8001970 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800199a:	f107 010c 	add.w	r1, r7, #12
 800199e:	230a      	movs	r3, #10
 80019a0:	2202      	movs	r2, #2
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <select_user_bank+0x30>)
 80019a4:	f005 fde7 	bl	8007576 <HAL_SPI_Transmit>
	cs_high();
 80019a8:	f7ff ffd8 	bl	800195c <cs_high>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000398 	.word	0x20000398

080019b8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ffd5 	bl	8001984 <select_user_bank>

	cs_low();
 80019da:	f7ff ffc9 	bl	8001970 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80019de:	f107 010f 	add.w	r1, r7, #15
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	2201      	movs	r2, #1
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <read_single_icm20948_reg+0x54>)
 80019ea:	f005 fdc4 	bl	8007576 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80019ee:	f107 010e 	add.w	r1, r7, #14
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	2201      	movs	r2, #1
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <read_single_icm20948_reg+0x54>)
 80019fa:	f005 ff31 	bl	8007860 <HAL_SPI_Receive>
	cs_high();
 80019fe:	f7ff ffad 	bl	800195c <cs_high>

	return reg_val;
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000398 	.word	0x20000398

08001a10 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	71bb      	strb	r3, [r7, #6]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ffa9 	bl	8001984 <select_user_bank>

	cs_low();
 8001a32:	f7ff ff9d 	bl	8001970 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001a36:	f107 010c 	add.w	r1, r7, #12
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <write_single_icm20948_reg+0x44>)
 8001a42:	f005 fd98 	bl	8007576 <HAL_SPI_Transmit>
	cs_high();
 8001a46:	f7ff ff89 	bl	800195c <cs_high>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000398 	.word	0x20000398

08001a58 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	460b      	mov	r3, r1
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	4613      	mov	r3, r2
 8001a68:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff84 	bl	8001984 <select_user_bank>

	cs_low();
 8001a7c:	f7ff ff78 	bl	8001970 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001a80:	f107 010f 	add.w	r1, r7, #15
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <read_multiple_icm20948_reg+0x58>)
 8001a8c:	f005 fd73 	bl	8007576 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001a90:	797b      	ldrb	r3, [r7, #5]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <read_multiple_icm20948_reg+0x5c>)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <read_multiple_icm20948_reg+0x58>)
 8001a9c:	f005 fee0 	bl	8007860 <HAL_SPI_Receive>
	cs_high();
 8001aa0:	f7ff ff5c 	bl	800195c <cs_high>

	return reg_val;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <read_multiple_icm20948_reg+0x5c>)
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000398 	.word	0x20000398
 8001ab4:	200002f8 	.word	0x200002f8

08001ab8 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	603a      	str	r2, [r7, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	71bb      	strb	r3, [r7, #6]
 8001aca:	4613      	mov	r3, r2
 8001acc:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff55 	bl	8001984 <select_user_bank>

	cs_low();
 8001ada:	f7ff ff49 	bl	8001970 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001ade:	f107 010f 	add.w	r1, r7, #15
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <write_multiple_icm20948_reg+0x54>)
 8001aea:	f005 fd44 	bl	8007576 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <write_multiple_icm20948_reg+0x54>)
 8001afa:	f005 fd3c 	bl	8007576 <HAL_SPI_Transmit>
	cs_high();
 8001afe:	f7ff ff2d 	bl	800195c <cs_high>
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000398 	.word	0x20000398

08001b10 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001b1a:	228c      	movs	r2, #140	; 0x8c
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	2030      	movs	r0, #48	; 0x30
 8001b20:	f7ff ff76 	bl	8001a10 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2104      	movs	r1, #4
 8001b2a:	2030      	movs	r0, #48	; 0x30
 8001b2c:	f7ff ff70 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001b30:	2032      	movs	r0, #50	; 0x32
 8001b32:	f001 fb65 	bl	8003200 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001b36:	2281      	movs	r2, #129	; 0x81
 8001b38:	2105      	movs	r1, #5
 8001b3a:	2030      	movs	r0, #48	; 0x30
 8001b3c:	f7ff ff68 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001b40:	2032      	movs	r0, #50	; 0x32
 8001b42:	f001 fb5d 	bl	8003200 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001b46:	213b      	movs	r1, #59	; 0x3b
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff ff35 	bl	80019b8 <read_single_icm20948_reg>
 8001b4e:	4603      	mov	r3, r0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001b68:	220c      	movs	r2, #12
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	2030      	movs	r0, #48	; 0x30
 8001b6e:	f7ff ff4f 	bl	8001a10 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	461a      	mov	r2, r3
 8001b76:	2104      	movs	r1, #4
 8001b78:	2030      	movs	r0, #48	; 0x30
 8001b7a:	f7ff ff49 	bl	8001a10 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	461a      	mov	r2, r3
 8001b82:	2106      	movs	r1, #6
 8001b84:	2030      	movs	r0, #48	; 0x30
 8001b86:	f7ff ff43 	bl	8001a10 <write_single_icm20948_reg>
	//	Enable and single data write
	HAL_Delay(50);
 8001b8a:	2032      	movs	r0, #50	; 0x32
 8001b8c:	f001 fb38 	bl	8003200 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001b90:	2281      	movs	r2, #129	; 0x81
 8001b92:	2105      	movs	r1, #5
 8001b94:	2030      	movs	r0, #48	; 0x30
 8001b96:	f7ff ff3b 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001b9a:	2032      	movs	r0, #50	; 0x32
 8001b9c:	f001 fb30 	bl	8003200 <HAL_Delay>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001bb8:	228c      	movs	r2, #140	; 0x8c
 8001bba:	2103      	movs	r1, #3
 8001bbc:	2030      	movs	r0, #48	; 0x30
 8001bbe:	f7ff ff27 	bl	8001a10 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	2030      	movs	r0, #48	; 0x30
 8001bca:	f7ff ff21 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001bce:	2032      	movs	r0, #50	; 0x32
 8001bd0:	f001 fb16 	bl	8003200 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2105      	movs	r1, #5
 8001be0:	2030      	movs	r0, #48	; 0x30
 8001be2:	f7ff ff15 	bl	8001a10 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001be6:	2032      	movs	r0, #50	; 0x32
 8001be8:	f001 fb0a 	bl	8003200 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	213b      	movs	r1, #59	; 0x3b
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff ff30 	bl	8001a58 <read_multiple_icm20948_reg>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c0a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c0e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d013      	beq.n	8001c42 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c1e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c22:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c2a:	e000      	b.n	8001c2e <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c2c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c2e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f9      	beq.n	8001c2c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c54:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8001c58:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE BEGIN 1 */
	combined_data dataToSend;
	uint32_t startTime = HAL_GetTick();
 8001c5a:	f001 fac5 	bl	80031e8 <HAL_GetTick>
 8001c5e:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c62:	f001 fa58 	bl	8003116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c66:	f000 f8fb 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6a:	f7fe ffed 	bl	8000c48 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001c6e:	f000 f981 	bl	8001f74 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001c72:	f000 fcbf 	bl	80025f4 <MX_RTC_Init>
  MX_SPI1_Init();
 8001c76:	f000 fd4d 	bl	8002714 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001c7a:	f00a fe25 	bl	800c8c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8001c7e:	f7ff f851 	bl	8000d24 <icm20948_init>
  ak09916_init();
 8001c82:	f7ff f87d 	bl	8000d80 <ak09916_init>


  CSP_QUADSPI_Init();
 8001c86:	f000 fa23 	bl	80020d0 <CSP_QUADSPI_Init>

  if (CSP_QUADSPI_Init() != HAL_OK)
 8001c8a:	f000 fa21 	bl	80020d0 <CSP_QUADSPI_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <main+0x48>
     {
      Error_Handler();
 8001c94:	f000 f968 	bl	8001f68 <Error_Handler>
     }

  if (CSP_QSPI_Erase_Chip() != HAL_OK)
 8001c98:	f000 fa5a 	bl	8002150 <CSP_QSPI_Erase_Chip>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <main+0x56>
     {
      Error_Handler();
 8001ca2:	f000 f961 	bl	8001f68 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dataToSend.time_info = read_time(startTime); // �?�设你已�?有了read_time函数
 8001ca6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001caa:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 f926 	bl	8002f00 <read_time>
 8001cb4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001cb8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001cbc:	f507 742b 	add.w	r4, r7, #684	; 0x2ac
 8001cc0:	461d      	mov	r5, r3
 8001cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  dataToSend.sensor_data = read_all_data(); // �?�设你已�?修改了read_all_data函数如之�?所示
 8001cce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f964 	bl	8000fa0 <read_all_data>
 8001cd8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001cdc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001ce0:	f507 7432 	add.w	r4, r7, #712	; 0x2c8
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	6023      	str	r3, [r4, #0]

	  char buffer[512]; // �?�设512字节足够大

	  sprintf(buffer,
 8001cf2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
			  "x_accel = %f/y_accel = %f/z_accel = %f&"
			  "x_gyro = %f/y_gyro = %f/z_gyro =  %f&"
			  "x_mag = %f/y_mag = %f/z_mag = %f&\r\n",
			  dataToSend.time_info.unix_timestamp,

			  dataToSend.time_info.utc_time.year,
 8001cf8:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
	  sprintf(buffer,
 8001cfc:	65bb      	str	r3, [r7, #88]	; 0x58
			  dataToSend.time_info.utc_time.month,
 8001cfe:	f897 32b2 	ldrb.w	r3, [r7, #690]	; 0x2b2
	  sprintf(buffer,
 8001d02:	657b      	str	r3, [r7, #84]	; 0x54
			  dataToSend.time_info.utc_time.date,
 8001d04:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
	  sprintf(buffer,
 8001d08:	653b      	str	r3, [r7, #80]	; 0x50
			  dataToSend.time_info.utc_time.hour,
 8001d0a:	f897 32b4 	ldrb.w	r3, [r7, #692]	; 0x2b4
	  sprintf(buffer,
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
			  dataToSend.time_info.utc_time.min,
 8001d10:	f897 32b5 	ldrb.w	r3, [r7, #693]	; 0x2b5
	  sprintf(buffer,
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
			  dataToSend.time_info.utc_time.sec,
 8001d16:	f897 32b6 	ldrb.w	r3, [r7, #694]	; 0x2b6
	  sprintf(buffer,
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44

			  dataToSend.time_info.uk_time.year,
 8001d1c:	f8b7 32b8 	ldrh.w	r3, [r7, #696]	; 0x2b8
	  sprintf(buffer,
 8001d20:	643b      	str	r3, [r7, #64]	; 0x40
			  dataToSend.time_info.uk_time.month,
 8001d22:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
	  sprintf(buffer,
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
			  dataToSend.time_info.uk_time.date,
 8001d28:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
	  sprintf(buffer,
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
			  dataToSend.time_info.uk_time.hour,
 8001d2e:	f897 32bc 	ldrb.w	r3, [r7, #700]	; 0x2bc
	  sprintf(buffer,
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
			  dataToSend.time_info.uk_time.min,
 8001d34:	f897 32bd 	ldrb.w	r3, [r7, #701]	; 0x2bd
	  sprintf(buffer,
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
			  dataToSend.time_info.uk_time.sec,
 8001d3a:	f897 32be 	ldrb.w	r3, [r7, #702]	; 0x2be
	  sprintf(buffer,
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d40:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 8001d44:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d46:	f8d7 62c4 	ldr.w	r6, [r7, #708]	; 0x2c4

			  dataToSend.time_info.elapsed_minutes, dataToSend.time_info.elapsed_seconds,

			  dataToSend.sensor_data.x_accel,
 8001d4a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
	  sprintf(buffer,
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbfa 	bl	8000548 <__aeabi_f2d>
 8001d54:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  dataToSend.sensor_data.y_accel,
 8001d58:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
	  sprintf(buffer,
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbf3 	bl	8000548 <__aeabi_f2d>
 8001d62:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  dataToSend.sensor_data.z_accel,
 8001d66:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
	  sprintf(buffer,
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbec 	bl	8000548 <__aeabi_f2d>
 8001d70:	e9c7 0104 	strd	r0, r1, [r7, #16]

			  dataToSend.sensor_data.x_gyro,
 8001d74:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
	  sprintf(buffer,
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbe5 	bl	8000548 <__aeabi_f2d>
 8001d7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  dataToSend.sensor_data.y_gyro,
 8001d82:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
	  sprintf(buffer,
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbde 	bl	8000548 <__aeabi_f2d>
 8001d8c:	e9c7 0100 	strd	r0, r1, [r7]
			  dataToSend.sensor_data.z_gyro,
 8001d90:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
	  sprintf(buffer,
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbd7 	bl	8000548 <__aeabi_f2d>
 8001d9a:	4682      	mov	sl, r0
 8001d9c:	468b      	mov	fp, r1

			  dataToSend.sensor_data.x_magnet,
 8001d9e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
	  sprintf(buffer,
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_f2d>
 8001da8:	4680      	mov	r8, r0
 8001daa:	4689      	mov	r9, r1
			  dataToSend.sensor_data.y_magnet,
 8001dac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
	  sprintf(buffer,
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbc9 	bl	8000548 <__aeabi_f2d>
 8001db6:	4604      	mov	r4, r0
 8001db8:	460d      	mov	r5, r1
			  dataToSend.sensor_data.z_magnet
 8001dba:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
	  sprintf(buffer,
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fbc2 	bl	8000548 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001dcc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001dd0:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8001dd4:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8001dd8:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 8001ddc:	ed97 7b00 	vldr	d7, [r7]
 8001de0:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001de4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001de8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001dec:	ed97 7b04 	vldr	d7, [r7, #16]
 8001df0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001df4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001df8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001dfc:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e00:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001e04:	960c      	str	r6, [sp, #48]	; 0x30
 8001e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e08:	910b      	str	r1, [sp, #44]	; 0x2c
 8001e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e0c:	910a      	str	r1, [sp, #40]	; 0x28
 8001e0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e10:	9109      	str	r1, [sp, #36]	; 0x24
 8001e12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e14:	9108      	str	r1, [sp, #32]
 8001e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e18:	9107      	str	r1, [sp, #28]
 8001e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e1c:	9106      	str	r1, [sp, #24]
 8001e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e20:	9105      	str	r1, [sp, #20]
 8001e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e24:	9104      	str	r1, [sp, #16]
 8001e26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001e28:	9103      	str	r1, [sp, #12]
 8001e2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e2c:	9102      	str	r1, [sp, #8]
 8001e2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e30:	9101      	str	r1, [sp, #4]
 8001e32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e34:	9100      	str	r1, [sp, #0]
 8001e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <main+0x20c>)
 8001e3c:	f00c f89c 	bl	800df78 <siprintf>

	  );

	  CDC_Transmit_FS(buffer, strlen(buffer));
 8001e40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fa13 	bl	8000270 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00a fdf5 	bl	800ca44 <CDC_Transmit_FS>
  {
 8001e5a:	e724      	b.n	8001ca6 <main+0x56>
 8001e5c:	08010420 	.word	0x08010420

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b096      	sub	sp, #88	; 0x58
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	2244      	movs	r2, #68	; 0x44
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f00c f97a 	bl	800e168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	463b      	mov	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e86:	f003 fae9 	bl	800545c <HAL_PWREx_ControlVoltageScaling>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e90:	f000 f86a 	bl	8001f68 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e94:	f003 fac4 	bl	8005420 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <SystemClock_Config+0xcc>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <SystemClock_Config+0xcc>)
 8001ea0:	f023 0318 	bic.w	r3, r3, #24
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001ea8:	231e      	movs	r3, #30
 8001eaa:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001ec6:	23b0      	movs	r3, #176	; 0xb0
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 ff8e 	bl	8005e08 <HAL_RCC_OscConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ef2:	f000 f839 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	230f      	movs	r3, #15
 8001ef8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efa:	2303      	movs	r3, #3
 8001efc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fbdc 	bl	80066cc <HAL_RCC_ClockConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001f1a:	f000 f825 	bl	8001f68 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f1e:	f004 ff47 	bl	8006db0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f22:	bf00      	nop
 8001f24:	3758      	adds	r7, #88	; 0x58
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000

08001f30 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e009      	b.n	8001f56 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	60ba      	str	r2, [r7, #8]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fe59 	bl	8001c02 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dbf1      	blt.n	8001f42 <_write+0x12>
	}
	return len;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <Error_Handler+0x8>
	...

08001f74 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f7a:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <MX_QUADSPI_Init+0x54>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f92:	2219      	movs	r2, #25
 8001f94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_QUADSPI_Init+0x50>)
 8001fb0:	f003 faba 	bl	8005528 <HAL_QSPI_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001fba:	f7ff ffd5 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000320 	.word	0x20000320
 8001fc8:	a0001000 	.word	0xa0001000

08001fcc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a25      	ldr	r2, [pc, #148]	; (8002080 <HAL_QSPI_MspInit+0xb4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d144      	bne.n	8002078 <HAL_QSPI_MspInit+0xac>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	4a24      	ldr	r2, [pc, #144]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6513      	str	r3, [r2, #80]	; 0x50
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_QSPI_MspInit+0xb8>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8002036:	23cc      	movs	r3, #204	; 0xcc
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002046:	230a      	movs	r3, #10
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002054:	f001 fa0a 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002058:	2303      	movs	r3, #3
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002068:	230a      	movs	r3, #10
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_QSPI_MspInit+0xbc>)
 8002074:	f001 f9fa 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	a0001000 	.word	0xa0001000
 8002084:	40021000 	.word	0x40021000
 8002088:	48000400 	.word	0x48000400

0800208c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_QSPI_MspDeInit+0x38>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10e      	bne.n	80020bc <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_QSPI_MspDeInit+0x3c>)
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_QSPI_MspDeInit+0x3c>)
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	6513      	str	r3, [r2, #80]	; 0x50
    PA6     ------> QUADSPI_BK1_IO3
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7);
 80020aa:	21cc      	movs	r1, #204	; 0xcc
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f001 fb4e 	bl	8003750 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 80020b4:	2103      	movs	r1, #3
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <HAL_QSPI_MspDeInit+0x40>)
 80020b8:	f001 fb4a 	bl	8003750 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	a0001000 	.word	0xa0001000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400

080020d0 <CSP_QUADSPI_Init>:
/* USER CODE BEGIN 1 */


/* QUADSPI init function */
uint8_t
CSP_QUADSPI_Init(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <CSP_QUADSPI_Init+0x78>)
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <CSP_QUADSPI_Init+0x7c>)
 80020d8:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80020da:	481b      	ldr	r0, [pc, #108]	; (8002148 <CSP_QUADSPI_Init+0x78>)
 80020dc:	f003 faa0 	bl	8005620 <HAL_QSPI_DeInit>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e02c      	b.n	8002144 <CSP_QUADSPI_Init+0x74>
    }

    MX_QUADSPI_Init();
 80020ea:	f7ff ff43 	bl	8001f74 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 80020ee:	f000 f97f 	bl	80023f0 <QSPI_ResetChip>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e023      	b.n	8002144 <CSP_QUADSPI_Init+0x74>
    }

    HAL_Delay(1);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f001 f87f 	bl	8003200 <HAL_Delay>

    if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8002102:	f241 3088 	movw	r0, #5000	; 0x1388
 8002106:	f000 f863 	bl	80021d0 <QSPI_AutoPollingMemReady>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <CSP_QUADSPI_Init+0x44>
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e017      	b.n	8002144 <CSP_QUADSPI_Init+0x74>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8002114:	f000 f896 	bl	8002244 <QSPI_WriteEnable>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <CSP_QUADSPI_Init+0x52>

        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e010      	b.n	8002144 <CSP_QUADSPI_Init+0x74>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8002122:	f000 f8db 	bl	80022dc <QSPI_Configuration>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <CSP_QUADSPI_Init+0x60>
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e009      	b.n	8002144 <CSP_QUADSPI_Init+0x74>
    }

    if (QSPI_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8002130:	f241 3088 	movw	r0, #5000	; 0x1388
 8002134:	f000 f84c 	bl	80021d0 <QSPI_AutoPollingMemReady>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <CSP_QUADSPI_Init+0x72>
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <CSP_QUADSPI_Init+0x74>
    }

    return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000320 	.word	0x20000320
 800214c:	a0001000 	.word	0xa0001000

08002150 <CSP_QSPI_Erase_Chip>:


uint8_t
CSP_QSPI_Erase_Chip(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b08e      	sub	sp, #56	; 0x38
 8002154:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8002156:	f000 f875 	bl	8002244 <QSPI_WriteEnable>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e02c      	b.n	80021be <CSP_QSPI_Erase_Chip+0x6e>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = CHIP_ERASE_CMD;
 8002164:	23c7      	movs	r3, #199	; 0xc7
 8002166:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216c:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_32_BITS;
 800216e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002172:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002180:	2300      	movs	r3, #0
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002194:	463b      	mov	r3, r7
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4619      	mov	r1, r3
 800219c:	480a      	ldr	r0, [pc, #40]	; (80021c8 <CSP_QSPI_Erase_Chip+0x78>)
 800219e:	f003 fa63 	bl	8005668 <HAL_QSPI_Command>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e008      	b.n	80021be <CSP_QSPI_Erase_Chip+0x6e>
    }

    if (QSPI_AutoPollingMemReady(QUADSPI_MAX_ERASE_TIMEOUT) != HAL_OK) {
 80021ac:	4807      	ldr	r0, [pc, #28]	; (80021cc <CSP_QSPI_Erase_Chip+0x7c>)
 80021ae:	f000 f80f 	bl	80021d0 <QSPI_AutoPollingMemReady>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <CSP_QSPI_Erase_Chip+0x6c>
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <CSP_QSPI_Erase_Chip+0x6e>
    }


    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3738      	adds	r7, #56	; 0x38
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000320 	.word	0x20000320
 80021cc:	000704e0 	.word	0x000704e0

080021d0 <QSPI_AutoPollingMemReady>:

static uint8_t
QSPI_AutoPollingMemReady(uint32_t Timeout) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b096      	sub	sp, #88	; 0x58
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = READ_STATUS_REG_CMD;
 80021de:	2305      	movs	r3, #5
 80021e0:	623b      	str	r3, [r7, #32]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80021ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ee:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DummyCycles = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80021f8:	2300      	movs	r3, #0
 80021fa:	653b      	str	r3, [r7, #80]	; 0x50
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80021fc:	2300      	movs	r3, #0
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54

    sConfig.Match = 0x0000;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
    sConfig.Mask = 0x0101;
 8002204:	f240 1301 	movw	r3, #257	; 0x101
 8002208:	60fb      	str	r3, [r7, #12]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
    sConfig.StatusBytesSize = 2;
 800220e:	2302      	movs	r3, #2
 8002210:	617b      	str	r3, [r7, #20]
    sConfig.Interval = 0x10;
 8002212:	2310      	movs	r3, #16
 8002214:	613b      	str	r3, [r7, #16]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221a:	61fb      	str	r3, [r7, #28]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, Timeout) != HAL_OK) {
 800221c:	f107 0208 	add.w	r2, r7, #8
 8002220:	f107 0120 	add.w	r1, r7, #32
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <QSPI_AutoPollingMemReady+0x70>)
 8002228:	f003 fbab 	bl	8005982 <HAL_QSPI_AutoPolling>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <QSPI_AutoPollingMemReady+0x66>
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <QSPI_AutoPollingMemReady+0x68>
    }

    return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3758      	adds	r7, #88	; 0x58
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000320 	.word	0x20000320

08002244 <QSPI_WriteEnable>:

static uint8_t
QSPI_WriteEnable(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b094      	sub	sp, #80	; 0x50
 8002248:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800224a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8002250:	2306      	movs	r3, #6
 8002252:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002254:	2300      	movs	r3, #0
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002258:	2300      	movs	r3, #0
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 800225c:	2300      	movs	r3, #0
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002268:	2300      	movs	r3, #0
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800226c:	2300      	movs	r3, #0
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4619      	mov	r1, r3
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <QSPI_WriteEnable+0x94>)
 800227c:	f003 f9f4 	bl	8005668 <HAL_QSPI_Command>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e021      	b.n	80022ce <QSPI_WriteEnable+0x8a>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x0202;
 800228a:	f240 2302 	movw	r3, #514	; 0x202
 800228e:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x0202;
 8002290:	f240 2302 	movw	r3, #514	; 0x202
 8002294:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 2;
 800229a:	2302      	movs	r3, #2
 800229c:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 800229e:	2310      	movs	r3, #16
 80022a0:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80022a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a6:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 80022a8:	2305      	movs	r3, #5
 80022aa:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80022ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80022b2:	463a      	mov	r2, r7
 80022b4:	f107 0118 	add.w	r1, r7, #24
 80022b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80022bc:	4806      	ldr	r0, [pc, #24]	; (80022d8 <QSPI_WriteEnable+0x94>)
 80022be:	f003 fb60 	bl	8005982 <HAL_QSPI_AutoPolling>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <QSPI_WriteEnable+0x88>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <QSPI_WriteEnable+0x8a>
    }

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3750      	adds	r7, #80	; 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000320 	.word	0x20000320

080022dc <QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
static uint8_t
QSPI_Configuration(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b090      	sub	sp, #64	; 0x40
 80022e0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint16_t reg;


    /*enter 4 byte address*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = ENTER_4_BYTE_ADD_CMD;
 80022e8:	23b7      	movs	r3, #183	; 0xb7
 80022ea:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_NONE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002300:	2300      	movs	r3, #0
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800230c:	f107 0308 	add.w	r3, r7, #8
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4619      	mov	r1, r3
 8002316:	4834      	ldr	r0, [pc, #208]	; (80023e8 <QSPI_Configuration+0x10c>)
 8002318:	f003 f9a6 	bl	8005668 <HAL_QSPI_Command>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e05c      	b.n	80023e0 <QSPI_Configuration+0x104>
    }


    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 800232c:	2385      	movs	r3, #133	; 0x85
 800232e:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002346:	2300      	movs	r3, #0
 8002348:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800234a:	2300      	movs	r3, #0
 800234c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 2;
 800234e:	2302      	movs	r3, #2
 8002350:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4619      	mov	r1, r3
 800235c:	4822      	ldr	r0, [pc, #136]	; (80023e8 <QSPI_Configuration+0x10c>)
 800235e:	f003 f983 	bl	8005668 <HAL_QSPI_Command>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <QSPI_Configuration+0x90>
        != HAL_OK) {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e039      	b.n	80023e0 <QSPI_Configuration+0x104>
    }


    if (HAL_QSPI_Receive(&hqspi, (uint8_t*)(&reg),
 800236c:	1dbb      	adds	r3, r7, #6
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4619      	mov	r1, r3
 8002374:	481c      	ldr	r0, [pc, #112]	; (80023e8 <QSPI_Configuration+0x10c>)
 8002376:	f003 fa67 	bl	8005848 <HAL_QSPI_Receive>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <QSPI_Configuration+0xa8>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e02d      	b.n	80023e0 <QSPI_Configuration+0x104>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8002384:	f7ff ff5e 	bl	8002244 <QSPI_WriteEnable>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <QSPI_Configuration+0xb6>

        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e026      	b.n	80023e0 <QSPI_Configuration+0x104>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0F0, ((DUMMY_CLOCK_CYCLES_READ_QUAD << 4) |
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	b21a      	sxth	r2, r3
 8002396:	f640 730f 	movw	r3, #3855	; 0xf0f
 800239a:	4013      	ands	r3, r2
 800239c:	b21a      	sxth	r2, r3
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <QSPI_Configuration+0x110>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	80fb      	strh	r3, [r7, #6]
                             (DUMMY_CLOCK_CYCLES_READ_QUAD << 12)));


    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80023a8:	2381      	movs	r3, #129	; 0x81
 80023aa:	60bb      	str	r3, [r7, #8]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4619      	mov	r1, r3
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <QSPI_Configuration+0x10c>)
 80023b8:	f003 f956 	bl	8005668 <HAL_QSPI_Command>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <QSPI_Configuration+0xea>
        != HAL_OK) {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00c      	b.n	80023e0 <QSPI_Configuration+0x104>
    }

    if (HAL_QSPI_Transmit(&hqspi, (uint8_t*)(&reg),
 80023c6:	1dbb      	adds	r3, r7, #6
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <QSPI_Configuration+0x10c>)
 80023d0:	f003 f9a8 	bl	8005724 <HAL_QSPI_Transmit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <QSPI_Configuration+0x102>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <QSPI_Configuration+0x104>
    }
    return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3740      	adds	r7, #64	; 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000320 	.word	0x20000320
 80023ec:	ffffa0a0 	.word	0xffffa0a0

080023f0 <QSPI_ResetChip>:
    }
    return HAL_OK;
}

static uint8_t
QSPI_ResetChip() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b090      	sub	sp, #64	; 0x40
 80023f4:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80023fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fe:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002404:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8002416:	2366      	movs	r3, #102	; 0x66
 8002418:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4619      	mov	r1, r3
 8002432:	486f      	ldr	r0, [pc, #444]	; (80025f0 <QSPI_ResetChip+0x200>)
 8002434:	f003 f918 	bl	8005668 <HAL_QSPI_Command>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0d2      	b.n	80025e8 <QSPI_ResetChip+0x1f8>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8002442:	2300      	movs	r3, #0
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002446:	e003      	b.n	8002450 <QSPI_ResetChip+0x60>
        __NOP();
 8002448:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 800244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244c:	3301      	adds	r3, #1
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	2b2e      	cmp	r3, #46	; 0x2e
 8002454:	d9f8      	bls.n	8002448 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800245c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002460:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800246e:	2300      	movs	r3, #0
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 8002472:	2399      	movs	r3, #153	; 0x99
 8002474:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4619      	mov	r1, r3
 800248e:	4858      	ldr	r0, [pc, #352]	; (80025f0 <QSPI_ResetChip+0x200>)
 8002490:	f003 f8ea 	bl	8005668 <HAL_QSPI_Command>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0a4      	b.n	80025e8 <QSPI_ResetChip+0x1f8>
    }

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 800249e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a2:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80024a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80024b6:	2300      	movs	r3, #0
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 80024ba:	2366      	movs	r3, #102	; 0x66
 80024bc:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4619      	mov	r1, r3
 80024d6:	4846      	ldr	r0, [pc, #280]	; (80025f0 <QSPI_ResetChip+0x200>)
 80024d8:	f003 f8c6 	bl	8005668 <HAL_QSPI_Command>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <QSPI_ResetChip+0xf6>
        != HAL_OK) {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e080      	b.n	80025e8 <QSPI_ResetChip+0x1f8>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ea:	e003      	b.n	80024f4 <QSPI_ResetChip+0x104>
        __NOP();
 80024ec:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 80024ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f0:	3301      	adds	r3, #1
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f6:	2b2e      	cmp	r3, #46	; 0x2e
 80024f8:	d9f8      	bls.n	80024ec <QSPI_ResetChip+0xfc>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 80024fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fe:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002504:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002512:	2300      	movs	r3, #0
 8002514:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 8002516:	2399      	movs	r3, #153	; 0x99
 8002518:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8002522:	2300      	movs	r3, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4619      	mov	r1, r3
 8002532:	482f      	ldr	r0, [pc, #188]	; (80025f0 <QSPI_ResetChip+0x200>)
 8002534:	f003 f898 	bl	8005668 <HAL_QSPI_Command>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <QSPI_ResetChip+0x152>
        != HAL_OK) {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e052      	b.n	80025e8 <QSPI_ResetChip+0x1f8>
    }

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8002542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002546:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254c:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800255a:	2300      	movs	r3, #0
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 800255e:	2366      	movs	r3, #102	; 0x66
 8002560:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4619      	mov	r1, r3
 800257a:	481d      	ldr	r0, [pc, #116]	; (80025f0 <QSPI_ResetChip+0x200>)
 800257c:	f003 f874 	bl	8005668 <HAL_QSPI_Command>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <QSPI_ResetChip+0x19a>
        != HAL_OK) {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e02e      	b.n	80025e8 <QSPI_ResetChip+0x1f8>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 800258a:	2300      	movs	r3, #0
 800258c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258e:	e003      	b.n	8002598 <QSPI_ResetChip+0x1a8>
        __NOP();
 8002590:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	3301      	adds	r3, #1
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	2b2e      	cmp	r3, #46	; 0x2e
 800259c:	d9f8      	bls.n	8002590 <QSPI_ResetChip+0x1a0>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800259e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a2:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80025a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80025b6:	2300      	movs	r3, #0
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_EXECUTE_CMD;
 80025ba:	2399      	movs	r3, #153	; 0x99
 80025bc:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4619      	mov	r1, r3
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <QSPI_ResetChip+0x200>)
 80025d8:	f003 f846 	bl	8005668 <HAL_QSPI_Command>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <QSPI_ResetChip+0x1f6>
        != HAL_OK) {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <QSPI_ResetChip+0x1f8>
    }

    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3740      	adds	r7, #64	; 0x40
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000320 	.word	0x20000320

080025f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002608:	2300      	movs	r3, #0
 800260a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <MX_RTC_Init+0xb8>)
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <MX_RTC_Init+0xbc>)
 8002610:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <MX_RTC_Init+0xb8>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <MX_RTC_Init+0xb8>)
 800261a:	227f      	movs	r2, #127	; 0x7f
 800261c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <MX_RTC_Init+0xb8>)
 8002620:	22ff      	movs	r2, #255	; 0xff
 8002622:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_RTC_Init+0xb8>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <MX_RTC_Init+0xb8>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_RTC_Init+0xb8>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_RTC_Init+0xb8>)
 8002638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800263c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_RTC_Init+0xb8>)
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002644:	4819      	ldr	r0, [pc, #100]	; (80026ac <MX_RTC_Init+0xb8>)
 8002646:	f004 fbc3 	bl	8006dd0 <HAL_RTC_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002650:	f7ff fc8a 	bl	8001f68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002654:	2300      	movs	r3, #0
 8002656:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002658:	2300      	movs	r3, #0
 800265a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800265c:	2300      	movs	r3, #0
 800265e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2201      	movs	r2, #1
 800266c:	4619      	mov	r1, r3
 800266e:	480f      	ldr	r0, [pc, #60]	; (80026ac <MX_RTC_Init+0xb8>)
 8002670:	f004 fc3e 	bl	8006ef0 <HAL_RTC_SetTime>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800267a:	f7ff fc75 	bl	8001f68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800267e:	2301      	movs	r3, #1
 8002680:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002682:	2301      	movs	r3, #1
 8002684:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002686:	2301      	movs	r3, #1
 8002688:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800268a:	2300      	movs	r3, #0
 800268c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800268e:	463b      	mov	r3, r7
 8002690:	2201      	movs	r2, #1
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_RTC_Init+0xb8>)
 8002696:	f004 fd24 	bl	80070e2 <HAL_RTC_SetDate>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 80026a0:	f7ff fc62 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000036c 	.word	0x2000036c
 80026b0:	40002800 	.word	0x40002800

080026b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b090      	sub	sp, #64	; 0x40
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	2234      	movs	r2, #52	; 0x34
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00b fd4f 	bl	800e168 <memset>
  if(rtcHandle->Instance==RTC)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_RTC_MspInit+0x58>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d117      	bne.n	8002704 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 f9dd 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80026f0:	f7ff fc3a 	bl	8001f68 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RTC_MspInit+0x5c>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_RTC_MspInit+0x5c>)
 80026fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002704:	bf00      	nop
 8002706:	3740      	adds	r7, #64	; 0x40
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40002800 	.word	0x40002800
 8002710:	40021000 	.word	0x40021000

08002714 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <MX_SPI1_Init+0x74>)
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <MX_SPI1_Init+0x78>)
 800271c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <MX_SPI1_Init+0x74>)
 8002720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <MX_SPI1_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <MX_SPI1_Init+0x74>)
 800272e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002732:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <MX_SPI1_Init+0x74>)
 8002736:	2202      	movs	r2, #2
 8002738:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_SPI1_Init+0x74>)
 800273c:	2201      	movs	r2, #1
 800273e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_SPI1_Init+0x74>)
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_SPI1_Init+0x74>)
 800274a:	2218      	movs	r2, #24
 800274c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_SPI1_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_SPI1_Init+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_SPI1_Init+0x74>)
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_SPI1_Init+0x74>)
 8002762:	2207      	movs	r2, #7
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_SPI1_Init+0x74>)
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_SPI1_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_SPI1_Init+0x74>)
 8002774:	f004 fe5c 	bl	8007430 <HAL_SPI_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800277e:	f7ff fbf3 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000398 	.word	0x20000398
 800278c:	40013000 	.word	0x40013000

08002790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <HAL_SPI_MspInit+0xb4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d144      	bne.n	800283c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027b2:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	4a24      	ldr	r2, [pc, #144]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027bc:	6613      	str	r3, [r2, #96]	; 0x60
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_SPI_MspInit+0xb8>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027fa:	2320      	movs	r3, #32
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800280a:	2305      	movs	r3, #5
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002818:	f000 fe28 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800281c:	2330      	movs	r3, #48	; 0x30
 800281e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800282c:	2305      	movs	r3, #5
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4619      	mov	r1, r3
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <HAL_SPI_MspInit+0xbc>)
 8002838:	f000 fe18 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40013000 	.word	0x40013000
 8002848:	40021000 	.word	0x40021000
 800284c:	48000400 	.word	0x48000400

08002850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_MspInit+0x44>)
 8002858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_MspInit+0x44>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6613      	str	r3, [r2, #96]	; 0x60
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_MspInit+0x44>)
 8002864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_MspInit+0x44>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_MspInit+0x44>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6593      	str	r3, [r2, #88]	; 0x58
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_MspInit+0x44>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800289c:	e7fe      	b.n	800289c <NMI_Handler+0x4>

0800289e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <HardFault_Handler+0x4>

080028a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <MemManage_Handler+0x4>

080028aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e4:	f000 fc6c 	bl	80031c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <USB_IRQHandler+0x10>)
 80028f2:	f001 f93f 	bl	8003b74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200010e4 	.word	0x200010e4

08002900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return 1;
 8002904:	2301      	movs	r3, #1
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_kill>:

int _kill(int pid, int sig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800291a:	f00b fc77 	bl	800e20c <__errno>
 800291e:	4603      	mov	r3, r0
 8002920:	2216      	movs	r2, #22
 8002922:	601a      	str	r2, [r3, #0]
  return -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_exit>:

void _exit (int status)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ffe7 	bl	8002910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002942:	e7fe      	b.n	8002942 <_exit+0x12>

08002944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e00a      	b.n	800296c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002956:	f3af 8000 	nop.w
 800295a:	4601      	mov	r1, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	b2ca      	uxtb	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf0      	blt.n	8002956 <_read+0x12>
  }

  return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_close>:
  }
  return len;
}

int _close(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	605a      	str	r2, [r3, #4]
  return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_isatty>:

int _isatty(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f00b fbf8 	bl	800e20c <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000a000 	.word	0x2000a000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	200003fc 	.word	0x200003fc
 8002a50:	20001748 	.word	0x20001748

08002a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <SystemInit+0x20>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SystemInit+0x20>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <isLeapYear>:
//	NMEA_result.local_time.min	 = utc_time->min;
//	NMEA_result.local_time.sec	 = utc_time->sec;
//}

// 判断给定的年份是否为闰年
int isLeapYear(int year) {
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
    if(year % 400 == 0) return 1;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <isLeapYear+0x64>)
 8002a84:	fb83 1302 	smull	r1, r3, r3, r2
 8002a88:	11d9      	asrs	r1, r3, #7
 8002a8a:	17d3      	asrs	r3, r2, #31
 8002a8c:	1acb      	subs	r3, r1, r3
 8002a8e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <isLeapYear+0x28>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e016      	b.n	8002ace <isLeapYear+0x56>
    if(year % 100 == 0) return 0;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <isLeapYear+0x64>)
 8002aa4:	fb83 1302 	smull	r1, r3, r3, r2
 8002aa8:	1159      	asrs	r1, r3, #5
 8002aaa:	17d3      	asrs	r3, r2, #31
 8002aac:	1acb      	subs	r3, r1, r3
 8002aae:	2164      	movs	r1, #100	; 0x64
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <isLeapYear+0x46>
 8002aba:	2300      	movs	r3, #0
 8002abc:	e007      	b.n	8002ace <isLeapYear+0x56>
    if(year % 4 == 0) return 1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <isLeapYear+0x54>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <isLeapYear+0x56>
    return 0;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	51eb851f 	.word	0x51eb851f

08002ae0 <daysInMonth>:

// 返回指定月份的天数
int daysInMonth(int month, int year) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
    switch(month) {
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	bf8c      	ite	hi
 8002af0:	2201      	movhi	r2, #1
 8002af2:	2200      	movls	r2, #0
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d120      	bne.n	8002b3c <daysInMonth+0x5c>
 8002afa:	2201      	movs	r2, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	f403 6225 	and.w	r2, r3, #2640	; 0xa50
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2201      	movne	r2, #1
 8002b0a:	2200      	moveq	r2, #0
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	2a00      	cmp	r2, #0
 8002b10:	d112      	bne.n	8002b38 <daysInMonth+0x58>
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <daysInMonth+0x5c>
        case 2: return isLeapYear(year) ? 29 : 28;
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f7ff ffa7 	bl	8002a78 <isLeapYear>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <daysInMonth+0x54>
 8002b30:	231d      	movs	r3, #29
 8002b32:	e004      	b.n	8002b3e <daysInMonth+0x5e>
 8002b34:	231c      	movs	r3, #28
 8002b36:	e002      	b.n	8002b3e <daysInMonth+0x5e>
        case 4: case 6: case 9: case 11: return 30;
 8002b38:	231e      	movs	r3, #30
 8002b3a:	e000      	b.n	8002b3e <daysInMonth+0x5e>
        default: return 31;
 8002b3c:	231f      	movs	r3, #31
    }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <isInDST>:
// 判断是否应该应用夏令时调整
int isInDST(nmea_time* time) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    int lastSundayOfMarch = 31 - (2 + 31 - time->year) % 7;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <isInDST+0xe4>)
 8002b5a:	fb83 1302 	smull	r1, r3, r3, r2
 8002b5e:	4413      	add	r3, r2
 8002b60:	1099      	asrs	r1, r3, #2
 8002b62:	17d3      	asrs	r3, r2, #31
 8002b64:	1ac9      	subs	r1, r1, r3
 8002b66:	460b      	mov	r3, r1
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a5b      	subs	r3, r3, r1
 8002b6c:	1ad1      	subs	r1, r2, r3
 8002b6e:	f1c1 031f 	rsb	r3, r1, #31
 8002b72:	60fb      	str	r3, [r7, #12]
    int lastSundayOfOctober = 31 - (5 + 31 - time->year) % 7;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f1c3 0224 	rsb	r2, r3, #36	; 0x24
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <isInDST+0xe4>)
 8002b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8002b82:	4413      	add	r3, r2
 8002b84:	1099      	asrs	r1, r3, #2
 8002b86:	17d3      	asrs	r3, r2, #31
 8002b88:	1ac9      	subs	r1, r1, r3
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a5b      	subs	r3, r3, r1
 8002b90:	1ad1      	subs	r1, r2, r3
 8002b92:	f1c1 031f 	rsb	r3, r1, #31
 8002b96:	60bb      	str	r3, [r7, #8]

    if(time->month > 3 && time->month < 10) return 1;  // DST is active between last Sunday of March and October
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	789b      	ldrb	r3, [r3, #2]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d905      	bls.n	8002bac <isInDST+0x64>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	789b      	ldrb	r3, [r3, #2]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d801      	bhi.n	8002bac <isInDST+0x64>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e038      	b.n	8002c1e <isInDST+0xd6>
    if(time->month == 3 && time->date > lastSundayOfMarch) return 1;  // After the last Sunday of March
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d107      	bne.n	8002bc4 <isInDST+0x7c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	78db      	ldrb	r3, [r3, #3]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	da01      	bge.n	8002bc4 <isInDST+0x7c>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e02c      	b.n	8002c1e <isInDST+0xd6>
    if(time->month == 3 && time->date == lastSundayOfMarch && time->hour >= 1) return 1;  // On the last Sunday of March but after 1am UTC
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d10b      	bne.n	8002be4 <isInDST+0x9c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d105      	bne.n	8002be4 <isInDST+0x9c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <isInDST+0x9c>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e01c      	b.n	8002c1e <isInDST+0xd6>
    if(time->month == 10 && time->date < lastSundayOfOctober) return 1;  // Before the last Sunday of October
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	789b      	ldrb	r3, [r3, #2]
 8002be8:	2b0a      	cmp	r3, #10
 8002bea:	d107      	bne.n	8002bfc <isInDST+0xb4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	78db      	ldrb	r3, [r3, #3]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	dd01      	ble.n	8002bfc <isInDST+0xb4>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e010      	b.n	8002c1e <isInDST+0xd6>
    if(time->month == 10 && time->date == lastSundayOfOctober && time->hour < 1) return 1;  // On the last Sunday of October but before 1am UTC
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	789b      	ldrb	r3, [r3, #2]
 8002c00:	2b0a      	cmp	r3, #10
 8002c02:	d10b      	bne.n	8002c1c <isInDST+0xd4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	78db      	ldrb	r3, [r3, #3]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d105      	bne.n	8002c1c <isInDST+0xd4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	791b      	ldrb	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <isInDST+0xd4>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <isInDST+0xd6>

    return 0;  // If none of the above conditions is met, it's not DST
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	92492493 	.word	0x92492493

08002c30 <UTC_to_UKtime>:

void UTC_to_UKtime(nmea_time* utc_time) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    int year, month, day, hour;

    year = utc_time->year;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
    month = utc_time->month;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	789b      	ldrb	r3, [r3, #2]
 8002c42:	613b      	str	r3, [r7, #16]
    day = utc_time->date;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	78db      	ldrb	r3, [r3, #3]
 8002c48:	60fb      	str	r3, [r7, #12]
    hour = utc_time->hour;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	791b      	ldrb	r3, [r3, #4]
 8002c4e:	60bb      	str	r3, [r7, #8]

    if(isInDST(utc_time)) {
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff79 	bl	8002b48 <isInDST>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <UTC_to_UKtime+0x32>
        hour++; // Move one hour forward for DST
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
    }

    // Check for time overflow after adjustment
    if(hour >= 24) {
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b17      	cmp	r3, #23
 8002c66:	dd1a      	ble.n	8002c9e <UTC_to_UKtime+0x6e>
        hour -= 24;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3b18      	subs	r3, #24
 8002c6c:	60bb      	str	r3, [r7, #8]
        day++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3301      	adds	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
        if(day > daysInMonth(month, year)) {
 8002c74:	6979      	ldr	r1, [r7, #20]
 8002c76:	6938      	ldr	r0, [r7, #16]
 8002c78:	f7ff ff32 	bl	8002ae0 <daysInMonth>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4293      	cmp	r3, r2
 8002c82:	dd0c      	ble.n	8002c9e <UTC_to_UKtime+0x6e>
            day = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
            month++;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	613b      	str	r3, [r7, #16]
            if(month > 12) {
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	dd04      	ble.n	8002c9e <UTC_to_UKtime+0x6e>
                month = 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
                year++;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
            }
        }
    }

    NMEA_result.local_time.year = year;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <UTC_to_UKtime+0xa8>)
 8002ca4:	801a      	strh	r2, [r3, #0]
    NMEA_result.local_time.month = month;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <UTC_to_UKtime+0xa8>)
 8002cac:	709a      	strb	r2, [r3, #2]
    NMEA_result.local_time.date = day;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <UTC_to_UKtime+0xa8>)
 8002cb4:	70da      	strb	r2, [r3, #3]
    NMEA_result.local_time.hour = hour;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <UTC_to_UKtime+0xa8>)
 8002cbc:	711a      	strb	r2, [r3, #4]
    NMEA_result.local_time.min = utc_time->min;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	795a      	ldrb	r2, [r3, #5]
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <UTC_to_UKtime+0xa8>)
 8002cc4:	715a      	strb	r2, [r3, #5]
    NMEA_result.local_time.sec = utc_time->sec;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	799a      	ldrb	r2, [r3, #6]
 8002cca:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <UTC_to_UKtime+0xa8>)
 8002ccc:	719a      	strb	r2, [r3, #6]
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000318 	.word	0x20000318

08002cdc <ConvertDateToSecond>:
* Input          : @date: format 'DDMMYY,HHMMSS.SSS'
* Output         : None
* Return         : Second
*******************************************************************************/
uint32_t ConvertDateToSecond(const uint8_t *date)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    static const uint16_t months[12] = {
        0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334  // 闰年的2月需要特殊处理
    };

    uint32_t seconds = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
    uint16_t temp = 1970;
 8002ce8:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8002cec:	81fb      	strh	r3, [r7, #14]
    uint16_t days = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	81bb      	strh	r3, [r7, #12]

    if(NULL == date) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <ConvertDateToSecond+0x20>
        return 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e0f5      	b.n	8002ee8 <ConvertDateToSecond+0x20c>
    }
    //year
    temp = (date[4] - 0x30) * 10 + (date[5] - 0x30) + 2000;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	3b30      	subs	r3, #48	; 0x30
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3305      	adds	r3, #5
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8002d20:	81fb      	strh	r3, [r7, #14]
    if(0 == (temp % 4) && (temp % 100 != 0 || temp % 400 == 0)) {
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11b      	bne.n	8002d66 <ConvertDateToSecond+0x8a>
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	4a70      	ldr	r2, [pc, #448]	; (8002ef4 <ConvertDateToSecond+0x218>)
 8002d32:	fba2 1203 	umull	r1, r2, r2, r3
 8002d36:	0952      	lsrs	r2, r2, #5
 8002d38:	2164      	movs	r1, #100	; 0x64
 8002d3a:	fb01 f202 	mul.w	r2, r1, r2
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <ConvertDateToSecond+0x84>
 8002d46:	89fb      	ldrh	r3, [r7, #14]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <ConvertDateToSecond+0x218>)
 8002d4a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d4e:	09d2      	lsrs	r2, r2, #7
 8002d50:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002d54:	fb01 f202 	mul.w	r2, r1, r2
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <ConvertDateToSecond+0x8a>
        days += 1;
 8002d60:	89bb      	ldrh	r3, [r7, #12]
 8002d62:	3301      	adds	r3, #1
 8002d64:	81bb      	strh	r3, [r7, #12]
    }
    temp -= 1;
 8002d66:	89fb      	ldrh	r3, [r7, #14]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	81fb      	strh	r3, [r7, #14]
    //UTC time start 1970
    for(; temp >= 1970; temp--) {
 8002d6c:	e011      	b.n	8002d92 <ConvertDateToSecond+0xb6>
        if(temp % 4) {
 8002d6e:	89fb      	ldrh	r3, [r7, #14]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <ConvertDateToSecond+0xa8>
            days += 365;
 8002d7a:	89bb      	ldrh	r3, [r7, #12]
 8002d7c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8002d80:	81bb      	strh	r3, [r7, #12]
 8002d82:	e003      	b.n	8002d8c <ConvertDateToSecond+0xb0>
        } else {
            //leap year
            days += 366;
 8002d84:	89bb      	ldrh	r3, [r7, #12]
 8002d86:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8002d8a:	81bb      	strh	r3, [r7, #12]
    for(; temp >= 1970; temp--) {
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	81fb      	strh	r3, [r7, #14]
 8002d92:	89fb      	ldrh	r3, [r7, #14]
 8002d94:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d8e8      	bhi.n	8002d6e <ConvertDateToSecond+0x92>
        }
    }
    //month
    temp = (date[2] - 0x30) * 10 + (date[3] - 0x30);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3302      	adds	r3, #2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	3b30      	subs	r3, #48	; 0x30
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3303      	adds	r3, #3
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b30      	subs	r3, #48	; 0x30
 8002dbe:	81fb      	strh	r3, [r7, #14]
    temp -= 1;
 8002dc0:	89fb      	ldrh	r3, [r7, #14]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	81fb      	strh	r3, [r7, #14]
    days += months[temp];
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <ConvertDateToSecond+0x21c>)
 8002dca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002dce:	89bb      	ldrh	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	81bb      	strh	r3, [r7, #12]
    if(temp > 1 && (date[4] - 0x30) * 10 + (date[5] - 0x30) % 4 == 0) {
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d91a      	bls.n	8002e10 <ConvertDateToSecond+0x134>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4619      	mov	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3305      	adds	r3, #5
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3b30      	subs	r3, #48	; 0x30
 8002df6:	425a      	negs	r2, r3
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	f002 0203 	and.w	r2, r2, #3
 8002e00:	bf58      	it	pl
 8002e02:	4253      	negpl	r3, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <ConvertDateToSecond+0x134>
        days += 1;  // 如果是闰年并且月份超过2月，加一天
 8002e0a:	89bb      	ldrh	r3, [r7, #12]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	81bb      	strh	r3, [r7, #12]
    }
    //day
    temp = (date[0] - 0x30) * 10 + (date[1] - 0x30);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	3b30      	subs	r3, #48	; 0x30
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3301      	adds	r3, #1
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b30      	subs	r3, #48	; 0x30
 8002e30:	81fb      	strh	r3, [r7, #14]
    days += temp - 1;
 8002e32:	89fa      	ldrh	r2, [r7, #14]
 8002e34:	89bb      	ldrh	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	81bb      	strh	r3, [r7, #12]
    //hour
    temp = (date[7] - 0x30) * 10 + (date[8] - 0x30);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3307      	adds	r3, #7
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b30      	subs	r3, #48	; 0x30
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3308      	adds	r3, #8
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b30      	subs	r3, #48	; 0x30
 8002e60:	81fb      	strh	r3, [r7, #14]
    seconds += temp * ONEMINUTETOSENCOND * 60;
 8002e62:	89fb      	ldrh	r3, [r7, #14]
 8002e64:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4413      	add	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
    //min
    temp = (date[9] - 0x30) * 10 + (date[10] - 0x30);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3309      	adds	r3, #9
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3b30      	subs	r3, #48	; 0x30
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	330a      	adds	r3, #10
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b30      	subs	r3, #48	; 0x30
 8002e96:	81fb      	strh	r3, [r7, #14]
    seconds += temp * 60;
 8002e98:	89fa      	ldrh	r2, [r7, #14]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60bb      	str	r3, [r7, #8]
    //second
    temp = (date[11] - 0x30) * 10 + (date[12] - 0x30);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	330b      	adds	r3, #11
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	3b30      	subs	r3, #48	; 0x30
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b30      	subs	r3, #48	; 0x30
 8002ecc:	81fb      	strh	r3, [r7, #14]
    seconds += temp;
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60bb      	str	r3, [r7, #8]

    seconds += days * ONEDAYTOSENCOND;
 8002ed6:	89bb      	ldrh	r3, [r7, #12]
 8002ed8:	4a08      	ldr	r2, [pc, #32]	; (8002efc <ConvertDateToSecond+0x220>)
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60bb      	str	r3, [r7, #8]

    return seconds;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	51eb851f 	.word	0x51eb851f
 8002ef8:	08010654 	.word	0x08010654
 8002efc:	00015180 	.word	0x00015180

08002f00 <read_time>:

time_data read_time(uint32_t startTime){
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b099      	sub	sp, #100	; 0x64
 8002f04:	af04      	add	r7, sp, #16
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]

	  time_data result;
	  // 获�?� RTC 的时间和日期
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4960      	ldr	r1, [pc, #384]	; (8003090 <read_time+0x190>)
 8002f0e:	4861      	ldr	r0, [pc, #388]	; (8003094 <read_time+0x194>)
 8002f10:	f004 f88b 	bl	800702a <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002f14:	2200      	movs	r2, #0
 8002f16:	4960      	ldr	r1, [pc, #384]	; (8003098 <read_time+0x198>)
 8002f18:	485e      	ldr	r0, [pc, #376]	; (8003094 <read_time+0x194>)
 8002f1a:	f004 f969 	bl	80071f0 <HAL_RTC_GetDate>

	  // 显示日期和时间
	  /* Display date Format : yy/mm/dd */
	  printf("%04d/%02d/%02d\r\n",2000 + sDate.Year, sDate.Month, sDate.Date);
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <read_time+0x198>)
 8002f20:	78db      	ldrb	r3, [r3, #3]
 8002f22:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <read_time+0x198>)
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <read_time+0x198>)
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	485a      	ldr	r0, [pc, #360]	; (800309c <read_time+0x19c>)
 8002f32:	f00a ffb3 	bl	800de9c <iprintf>
	  /* Display time Format : hh:mm:ss */
	  printf("UTC Time is: %02d:%02d:%02d\r\n",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002f36:	4b56      	ldr	r3, [pc, #344]	; (8003090 <read_time+0x190>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <read_time+0x190>)
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b53      	ldr	r3, [pc, #332]	; (8003090 <read_time+0x190>)
 8002f44:	789b      	ldrb	r3, [r3, #2]
 8002f46:	4856      	ldr	r0, [pc, #344]	; (80030a0 <read_time+0x1a0>)
 8002f48:	f00a ffa8 	bl	800de9c <iprintf>

	  // 创建一个数组，将从 RTC 获�?�的日期和时间转�?�为 "DDMMYY,HHMMSS.SSS" 格�?
	  uint8_t rtcDate[14];
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
	          sDate.Date, sDate.Month, sDate.Year,
 8002f4c:	4b52      	ldr	r3, [pc, #328]	; (8003098 <read_time+0x198>)
 8002f4e:	789b      	ldrb	r3, [r3, #2]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 8002f50:	461d      	mov	r5, r3
	          sDate.Date, sDate.Month, sDate.Year,
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <read_time+0x198>)
 8002f54:	785b      	ldrb	r3, [r3, #1]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 8002f56:	461e      	mov	r6, r3
	          sDate.Date, sDate.Month, sDate.Year,
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <read_time+0x198>)
 8002f5a:	78db      	ldrb	r3, [r3, #3]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 8002f5c:	461a      	mov	r2, r3
	          sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <read_time+0x190>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 8002f62:	4619      	mov	r1, r3
	          sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <read_time+0x190>)
 8002f66:	785b      	ldrb	r3, [r3, #1]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 8002f68:	461c      	mov	r4, r3
	          sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002f6a:	4b49      	ldr	r3, [pc, #292]	; (8003090 <read_time+0x190>)
 8002f6c:	789b      	ldrb	r3, [r3, #2]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 8002f6e:	f107 0014 	add.w	r0, r7, #20
 8002f72:	9303      	str	r3, [sp, #12]
 8002f74:	9402      	str	r4, [sp, #8]
 8002f76:	9101      	str	r1, [sp, #4]
 8002f78:	9200      	str	r2, [sp, #0]
 8002f7a:	4633      	mov	r3, r6
 8002f7c:	462a      	mov	r2, r5
 8002f7e:	4949      	ldr	r1, [pc, #292]	; (80030a4 <read_time+0x1a4>)
 8002f80:	f00a fffa 	bl	800df78 <siprintf>

	  // 将 RTC 的日期和时间转�?�为 Unix 时间戳
	  uint32_t timestamp = ConvertDateToSecond(rtcDate);
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fea7 	bl	8002cdc <ConvertDateToSecond>
 8002f8e:	64f8      	str	r0, [r7, #76]	; 0x4c
	  printf("Unix Timestamp: %u\n", timestamp);
 8002f90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f92:	4845      	ldr	r0, [pc, #276]	; (80030a8 <read_time+0x1a8>)
 8002f94:	f00a ff82 	bl	800de9c <iprintf>

	    // 为NMEA time结构填充RTC的日期和时间
	  nmea_time testTime = {
			  .year = 2000 + sDate.Year,
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <read_time+0x198>)
 8002f9a:	78db      	ldrb	r3, [r3, #3]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002fa2:	b29b      	uxth	r3, r3
	  nmea_time testTime = {
 8002fa4:	81bb      	strh	r3, [r7, #12]
			  .month = sDate.Month,
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <read_time+0x198>)
 8002fa8:	785b      	ldrb	r3, [r3, #1]
	  nmea_time testTime = {
 8002faa:	73bb      	strb	r3, [r7, #14]
			  .date = sDate.Date,
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <read_time+0x198>)
 8002fae:	789b      	ldrb	r3, [r3, #2]
	  nmea_time testTime = {
 8002fb0:	73fb      	strb	r3, [r7, #15]
			  .hour = sTime.Hours,
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <read_time+0x190>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
	  nmea_time testTime = {
 8002fb6:	743b      	strb	r3, [r7, #16]
			  .min = sTime.Minutes,
 8002fb8:	4b35      	ldr	r3, [pc, #212]	; (8003090 <read_time+0x190>)
 8002fba:	785b      	ldrb	r3, [r3, #1]
	  nmea_time testTime = {
 8002fbc:	747b      	strb	r3, [r7, #17]
			  .sec = sTime.Seconds
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <read_time+0x190>)
 8002fc0:	789b      	ldrb	r3, [r3, #2]
	  nmea_time testTime = {
 8002fc2:	74bb      	strb	r3, [r7, #18]
	  };


	   // 使用UTC_to_UKtime函数转�?�时间
	  UTC_to_UKtime(&testTime);
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fe31 	bl	8002c30 <UTC_to_UKtime>

	    // 打�?�转�?��?�的英国�?令时时间
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
	           NMEA_result.local_time.year, NMEA_result.local_time.month, NMEA_result.local_time.date,
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <read_time+0x1ac>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002fd2:	4618      	mov	r0, r3
	           NMEA_result.local_time.year, NMEA_result.local_time.month, NMEA_result.local_time.date,
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <read_time+0x1ac>)
 8002fd6:	789b      	ldrb	r3, [r3, #2]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002fd8:	461c      	mov	r4, r3
	           NMEA_result.local_time.year, NMEA_result.local_time.month, NMEA_result.local_time.date,
 8002fda:	4b34      	ldr	r3, [pc, #208]	; (80030ac <read_time+0x1ac>)
 8002fdc:	78db      	ldrb	r3, [r3, #3]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002fde:	461d      	mov	r5, r3
	           NMEA_result.local_time.hour, NMEA_result.local_time.min, NMEA_result.local_time.sec);
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <read_time+0x1ac>)
 8002fe2:	791b      	ldrb	r3, [r3, #4]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002fe4:	461a      	mov	r2, r3
	           NMEA_result.local_time.hour, NMEA_result.local_time.min, NMEA_result.local_time.sec);
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <read_time+0x1ac>)
 8002fe8:	795b      	ldrb	r3, [r3, #5]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002fea:	4619      	mov	r1, r3
	           NMEA_result.local_time.hour, NMEA_result.local_time.min, NMEA_result.local_time.sec);
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <read_time+0x1ac>)
 8002fee:	799b      	ldrb	r3, [r3, #6]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002ff0:	9302      	str	r3, [sp, #8]
 8002ff2:	9101      	str	r1, [sp, #4]
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	462b      	mov	r3, r5
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	482c      	ldr	r0, [pc, #176]	; (80030b0 <read_time+0x1b0>)
 8002ffe:	f00a ff4d 	bl	800de9c <iprintf>

	  // 计算程序运行后的流逝时间
	  uint32_t elapsedTime = HAL_GetTick() - startTime;
 8003002:	f000 f8f1 	bl	80031e8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint32_t elapsedSeconds = elapsedTime / 1000;
 800300e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003010:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <read_time+0x1b4>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	099b      	lsrs	r3, r3, #6
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
	  uint32_t elapsedMinutes = elapsedSeconds / 60;
 800301a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <read_time+0x1b8>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
	  elapsedSeconds %= 60;
 8003026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <read_time+0x1b8>)
 800302a:	fba3 1302 	umull	r1, r3, r3, r2
 800302e:	0959      	lsrs	r1, r3, #5
 8003030:	460b      	mov	r3, r1
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a5b      	subs	r3, r3, r1
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	647b      	str	r3, [r7, #68]	; 0x44

	  printf("Elapsed time: %02u:%02u\n", elapsedMinutes, elapsedSeconds);
 800303c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003040:	481e      	ldr	r0, [pc, #120]	; (80030bc <read_time+0x1bc>)
 8003042:	f00a ff2b 	bl	800de9c <iprintf>
	  printf("\r\n");
 8003046:	481e      	ldr	r0, [pc, #120]	; (80030c0 <read_time+0x1c0>)
 8003048:	f00a ff8e 	bl	800df68 <puts>

	  result.unix_timestamp = timestamp;
 800304c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
	  result.utc_time = testTime;  // 假设NMEA_time结构体可以直接赋值，如果不行，请分别为每个字段赋值
 8003050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003054:	f107 020c 	add.w	r2, r7, #12
 8003058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800305c:	e883 0003 	stmia.w	r3, {r0, r1}
	  result.uk_time = NMEA_result.local_time;
 8003060:	4a12      	ldr	r2, [pc, #72]	; (80030ac <read_time+0x1ac>)
 8003062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003066:	6810      	ldr	r0, [r2, #0]
 8003068:	6851      	ldr	r1, [r2, #4]
 800306a:	c303      	stmia	r3!, {r0, r1}
	  result.elapsed_minutes = elapsedMinutes;
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
	  result.elapsed_seconds = elapsedSeconds;
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c

	  return result;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	461d      	mov	r5, r3
 8003078:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800307c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003080:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003084:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	3754      	adds	r7, #84	; 0x54
 800308c:	46bd      	mov	sp, r7
 800308e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003090:	20000300 	.word	0x20000300
 8003094:	2000036c 	.word	0x2000036c
 8003098:	20000314 	.word	0x20000314
 800309c:	08010514 	.word	0x08010514
 80030a0:	08010528 	.word	0x08010528
 80030a4:	08010548 	.word	0x08010548
 80030a8:	08010568 	.word	0x08010568
 80030ac:	20000318 	.word	0x20000318
 80030b0:	0801057c 	.word	0x0801057c
 80030b4:	10624dd3 	.word	0x10624dd3
 80030b8:	88888889 	.word	0x88888889
 80030bc:	080105ac 	.word	0x080105ac
 80030c0:	080105c8 	.word	0x080105c8

080030c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c8:	f7ff fcc4 	bl	8002a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <LoopForever+0xe>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e4:	4c0a      	ldr	r4, [pc, #40]	; (8003110 <LoopForever+0x16>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f2:	f00b f891 	bl	800e218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f6:	f7fe fdab 	bl	8001c50 <main>

080030fa <LoopForever>:

LoopForever:
    b LoopForever
 80030fa:	e7fe      	b.n	80030fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030fc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003108:	080109e4 	.word	0x080109e4
  ldr r2, =_sbss
 800310c:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003110:	20001748 	.word	0x20001748

08003114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_2_IRQHandler>

08003116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003120:	2003      	movs	r0, #3
 8003122:	f000 f961 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003126:	200f      	movs	r0, #15
 8003128:	f000 f80e 	bl	8003148 <HAL_InitTick>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	e001      	b.n	800313c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003138:	f7ff fb8a 	bl	8002850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800313c:	79fb      	ldrb	r3, [r7, #7]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_InitTick+0x6c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_InitTick+0x70>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_InitTick+0x6c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316a:	fbb3 f3f1 	udiv	r3, r3, r1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f96d 	bl	8003452 <HAL_SYSTICK_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b0f      	cmp	r3, #15
 8003182:	d809      	bhi.n	8003198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003184:	2200      	movs	r2, #0
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f000 f937 	bl	80033fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_InitTick+0x74>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e007      	b.n	80031a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e004      	b.n	80031a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e001      	b.n	80031a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000008 	.word	0x20000008
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004

080031c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_IncTick+0x20>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_IncTick+0x24>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000008 	.word	0x20000008
 80031e4:	20000400 	.word	0x20000400

080031e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_GetTick+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000400 	.word	0x20000400

08003200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff ffee 	bl	80031e8 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d005      	beq.n	8003226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_Delay+0x44>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003226:	bf00      	nop
 8003228:	f7ff ffde 	bl	80031e8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f7      	bhi.n	8003228 <HAL_Delay+0x28>
  {
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000008 	.word	0x20000008

08003248 <__NVIC_SetPriorityGrouping>:
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327a:	4a04      	ldr	r2, [pc, #16]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_GetPriorityGrouping>:
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0307 	and.w	r3, r3, #7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_EnableIRQ>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0b      	blt.n	80032d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4907      	ldr	r1, [pc, #28]	; (80032e4 <__NVIC_EnableIRQ+0x38>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db0a      	blt.n	8003312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	490c      	ldr	r1, [pc, #48]	; (8003334 <__NVIC_SetPriority+0x4c>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	440b      	add	r3, r1
 800330c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003310:	e00a      	b.n	8003328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4908      	ldr	r1, [pc, #32]	; (8003338 <__NVIC_SetPriority+0x50>)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3b04      	subs	r3, #4
 8003320:	0112      	lsls	r2, r2, #4
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	440b      	add	r3, r1
 8003326:	761a      	strb	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <NVIC_EncodePriority>:
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b04      	cmp	r3, #4
 8003358:	bf28      	it	cs
 800335a:	2304      	movcs	r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3304      	adds	r3, #4
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <NVIC_EncodePriority+0x30>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b03      	subs	r3, #3
 800336a:	e000      	b.n	800336e <NVIC_EncodePriority+0x32>
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43d9      	mvns	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	4313      	orrs	r3, r2
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <SysTick_Config>:
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	210f      	movs	r1, #15
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f7ff ff8e 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff29 	bl	8003248 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003410:	f7ff ff3e 	bl	8003290 <__NVIC_GetPriorityGrouping>
 8003414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f7ff ff8e 	bl	800333c <NVIC_EncodePriority>
 8003420:	4602      	mov	r2, r0
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5d 	bl	80032e8 <__NVIC_SetPriority>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff31 	bl	80032ac <__NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa2 	bl	80033a4 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	e14e      	b.n	800371a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8140 	beq.w	8003714 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d005      	beq.n	80034ac <HAL_GPIO_Init+0x40>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d130      	bne.n	800350e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e2:	2201      	movs	r2, #1
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 0201 	and.w	r2, r3, #1
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b03      	cmp	r3, #3
 8003518:	d017      	beq.n	800354a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d123      	bne.n	800359e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	6939      	ldr	r1, [r7, #16]
 800359a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0203 	and.w	r2, r3, #3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 809a 	beq.w	8003714 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e0:	4b55      	ldr	r3, [pc, #340]	; (8003738 <HAL_GPIO_Init+0x2cc>)
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	4a54      	ldr	r2, [pc, #336]	; (8003738 <HAL_GPIO_Init+0x2cc>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6613      	str	r3, [r2, #96]	; 0x60
 80035ec:	4b52      	ldr	r3, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x2cc>)
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035f8:	4a50      	ldr	r2, [pc, #320]	; (800373c <HAL_GPIO_Init+0x2d0>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003622:	d013      	beq.n	800364c <HAL_GPIO_Init+0x1e0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a46      	ldr	r2, [pc, #280]	; (8003740 <HAL_GPIO_Init+0x2d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00d      	beq.n	8003648 <HAL_GPIO_Init+0x1dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a45      	ldr	r2, [pc, #276]	; (8003744 <HAL_GPIO_Init+0x2d8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <HAL_GPIO_Init+0x1d8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a44      	ldr	r2, [pc, #272]	; (8003748 <HAL_GPIO_Init+0x2dc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_GPIO_Init+0x1d4>
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <HAL_GPIO_Init+0x1e2>
 8003640:	2307      	movs	r3, #7
 8003642:	e004      	b.n	800364e <HAL_GPIO_Init+0x1e2>
 8003644:	2302      	movs	r3, #2
 8003646:	e002      	b.n	800364e <HAL_GPIO_Init+0x1e2>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_GPIO_Init+0x1e2>
 800364c:	2300      	movs	r3, #0
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	f002 0203 	and.w	r2, r2, #3
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	4093      	lsls	r3, r2
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800365e:	4937      	ldr	r1, [pc, #220]	; (800373c <HAL_GPIO_Init+0x2d0>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800366c:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_GPIO_Init+0x2e0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003690:	4a2e      	ldr	r2, [pc, #184]	; (800374c <HAL_GPIO_Init+0x2e0>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_GPIO_Init+0x2e0>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ba:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_GPIO_Init+0x2e0>)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_GPIO_Init+0x2e0>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <HAL_GPIO_Init+0x2e0>)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <HAL_GPIO_Init+0x2e0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_GPIO_Init+0x2e0>)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	f47f aea9 	bne.w	800347c <HAL_GPIO_Init+0x10>
  }
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	40010000 	.word	0x40010000
 8003740:	48000400 	.word	0x48000400
 8003744:	48000800 	.word	0x48000800
 8003748:	48000c00 	.word	0x48000c00
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800375e:	e0b1      	b.n	80038c4 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003760:	2201      	movs	r2, #1
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a4 	beq.w	80038be <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003776:	4a5a      	ldr	r2, [pc, #360]	; (80038e0 <HAL_GPIO_DeInit+0x190>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	220f      	movs	r2, #15
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800379e:	d013      	beq.n	80037c8 <HAL_GPIO_DeInit+0x78>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a50      	ldr	r2, [pc, #320]	; (80038e4 <HAL_GPIO_DeInit+0x194>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00d      	beq.n	80037c4 <HAL_GPIO_DeInit+0x74>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <HAL_GPIO_DeInit+0x198>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <HAL_GPIO_DeInit+0x70>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a4e      	ldr	r2, [pc, #312]	; (80038ec <HAL_GPIO_DeInit+0x19c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_GPIO_DeInit+0x6c>
 80037b8:	2303      	movs	r3, #3
 80037ba:	e006      	b.n	80037ca <HAL_GPIO_DeInit+0x7a>
 80037bc:	2307      	movs	r3, #7
 80037be:	e004      	b.n	80037ca <HAL_GPIO_DeInit+0x7a>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e002      	b.n	80037ca <HAL_GPIO_DeInit+0x7a>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_GPIO_DeInit+0x7a>
 80037c8:	2300      	movs	r3, #0
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	f002 0203 	and.w	r2, r2, #3
 80037d0:	0092      	lsls	r2, r2, #2
 80037d2:	4093      	lsls	r3, r2
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d132      	bne.n	8003840 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80037da:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	4943      	ldr	r1, [pc, #268]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	493f      	ldr	r1, [pc, #252]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80037f6:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	493c      	ldr	r1, [pc, #240]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 8003800:	4013      	ands	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003804:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	43db      	mvns	r3, r3
 800380c:	4938      	ldr	r1, [pc, #224]	; (80038f0 <HAL_GPIO_DeInit+0x1a0>)
 800380e:	4013      	ands	r3, r2
 8003810:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003822:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <HAL_GPIO_DeInit+0x190>)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43da      	mvns	r2, r3
 8003832:	482b      	ldr	r0, [pc, #172]	; (80038e0 <HAL_GPIO_DeInit+0x190>)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	400a      	ands	r2, r1
 800383a:	3302      	adds	r3, #2
 800383c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2103      	movs	r1, #3
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	08d2      	lsrs	r2, r2, #3
 8003874:	4019      	ands	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3208      	adds	r2, #8
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2103      	movs	r1, #3
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	2101      	movs	r1, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	401a      	ands	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2103      	movs	r1, #3
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f af47 	bne.w	8003760 <HAL_GPIO_DeInit+0x10>
  }
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40010000 	.word	0x40010000
 80038e4:	48000400 	.word	0x48000400
 80038e8:	48000800 	.word	0x48000800
 80038ec:	48000c00 	.word	0x48000c00
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003910:	e002      	b.n	8003918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	b08b      	sub	sp, #44	; 0x2c
 8003928:	af06      	add	r7, sp, #24
 800392a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0f8      	b.n	8003b28 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f009 f9d4 	bl	800ccf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2203      	movs	r2, #3
 8003954:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f004 fcbd 	bl	80082dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	687e      	ldr	r6, [r7, #4]
 800396a:	466d      	mov	r5, sp
 800396c:	f106 0410 	add.w	r4, r6, #16
 8003970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	1d33      	adds	r3, r6, #4
 800397a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800397c:	6838      	ldr	r0, [r7, #0]
 800397e:	f004 fc85 	bl	800828c <USB_CoreInit>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0c9      	b.n	8003b28 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f004 fcb9 	bl	8008312 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	e040      	b.n	8003a28 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	3301      	adds	r3, #1
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	3303      	adds	r3, #3
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	440b      	add	r3, r1
 80039f4:	3338      	adds	r3, #56	; 0x38
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	333c      	adds	r3, #60	; 0x3c
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3340      	adds	r3, #64	; 0x40
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	3301      	adds	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d3b9      	bcc.n	80039a6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e044      	b.n	8003ac2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3b5      	bcc.n	8003a38 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	687e      	ldr	r6, [r7, #4]
 8003ad4:	466d      	mov	r5, sp
 8003ad6:	f106 0410 	add.w	r4, r6, #16
 8003ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	1d33      	adds	r3, r6, #4
 8003ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae6:	6838      	ldr	r0, [r7, #0]
 8003ae8:	f004 fc20 	bl	800832c <USB_DevInit>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e014      	b.n	8003b28 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 fc58 	bl	80053cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f006 feb1 	bl	800a888 <USB_DevDisconnect>

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_PCD_Start+0x16>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e012      	b.n	8003b6c <HAL_PCD_Start+0x3c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fbab 	bl	80082ae <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f006 fe7c 	bl	800a85a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f006 fe96 	bl	800a8b2 <USB_ReadInterrupts>
 8003b86:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fb13 	bl	80041be <PCD_EP_ISR_Handler>

    return;
 8003b98:	e110      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f009 f952 	bl	800ce66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f8fc 	bl	8003dc2 <HAL_PCD_SetAddress>

    return;
 8003bca:	e0f7      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003be8:	b292      	uxth	r2, r2
 8003bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bee:	e0e5      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c12:	e0d3      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d034      	beq.n	8003c88 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	b292      	uxth	r2, r2
 8003c32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0208 	bic.w	r2, r2, #8
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c60:	2100      	movs	r1, #0
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f009 fbb0 	bl	800d3c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f009 f935 	bl	800ced8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c80:	b292      	uxth	r2, r2
 8003c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c86:	e099      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d027      	beq.n	8003ce2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0208 	orr.w	r2, r2, #8
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0204 	orr.w	r2, r2, #4
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f009 f8e2 	bl	800cea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ce0:	e06c      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d040      	beq.n	8003d6e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d12b      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0204 	orr.w	r2, r2, #4
 8003d20:	b292      	uxth	r2, r2
 8003d22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0208 	orr.w	r2, r2, #8
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f009 fb32 	bl	800d3c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003d64:	e02a      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f009 f89c 	bl	800cea4 <HAL_PCD_SuspendCallback>
    return;
 8003d6c:	e026      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00f      	beq.n	8003d98 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f009 f85a 	bl	800ce4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d96:	e011      	b.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00c      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db4:	b292      	uxth	r2, r2
 8003db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dba:	bf00      	nop
  }
}
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_SetAddress+0x1a>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e013      	b.n	8003e04 <HAL_PCD_SetAddress+0x42>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f006 fd1c 	bl	800a832 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	70fb      	strb	r3, [r7, #3]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	803b      	strh	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da0e      	bge.n	8003e50 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	705a      	strb	r2, [r3, #1]
 8003e4e:	e00e      	b.n	8003e6e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e7a:	883a      	ldrh	r2, [r7, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	78ba      	ldrb	r2, [r7, #2]
 8003e84:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e86:	78bb      	ldrb	r3, [r7, #2]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d102      	bne.n	8003e92 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_Open+0x94>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <HAL_PCD_EP_Open+0xb2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 fa5e 	bl	8008370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da0e      	bge.n	8003ef8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	705a      	strb	r2, [r3, #1]
 8003ef6:	e00e      	b.n	8003f16 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 0207 	and.w	r2, r3, #7
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_PCD_EP_Close+0x6a>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e00e      	b.n	8003f4e <HAL_PCD_EP_Close+0x88>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68f9      	ldr	r1, [r7, #12]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f004 fdda 	bl	8008af8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	460b      	mov	r3, r1
 8003f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f66:	7afb      	ldrb	r3, [r7, #11]
 8003f68:	f003 0207 	and.w	r2, r3, #7
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 ff92 	bl	8008ed2 <USB_EPStartXfer>

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2201      	movs	r2, #1
 8004032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	b2da      	uxtb	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	4618      	mov	r0, r3
 8004048:	f004 ff43 	bl	8008ed2 <USB_EPStartXfer>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	f003 0207 	and.w	r2, r3, #7
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d901      	bls.n	8004074 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e04c      	b.n	800410e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	da0e      	bge.n	800409a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	705a      	strb	r2, [r3, #1]
 8004098:	e00c      	b.n	80040b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_PCD_EP_SetStall+0x7e>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e01c      	b.n	800410e <HAL_PCD_EP_SetStall+0xb8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f006 faa6 	bl	800a634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f006 fbe7 	bl	800a8d2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d901      	bls.n	8004134 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e040      	b.n	80041b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0e      	bge.n	800415a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	705a      	strb	r2, [r3, #1]
 8004158:	e00e      	b.n	8004178 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	f003 0207 	and.w	r2, r3, #7
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_PCD_EP_ClrStall+0x82>
 8004194:	2302      	movs	r3, #2
 8004196:	e00e      	b.n	80041b6 <HAL_PCD_EP_ClrStall+0xa0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f006 fa95 	bl	800a6d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b096      	sub	sp, #88	; 0x58
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041c6:	e3b1      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80041e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 8173 	bne.w	80044d2 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d150      	bne.n	800429a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	81fb      	strh	r3, [r7, #14]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	89fb      	ldrh	r3, [r7, #14]
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29b      	uxth	r3, r3
 800421a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3328      	adds	r3, #40	; 0x28
 8004220:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	4413      	add	r3, r2
 800423c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004248:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	441a      	add	r2, r3
 8004254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004256:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004258:	2100      	movs	r1, #0
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f008 fddb 	bl	800ce16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 835f 	beq.w	800492c <PCD_EP_ISR_Handler+0x76e>
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 835a 	bne.w	800492c <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004284:	b2da      	uxtb	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	b292      	uxth	r2, r2
 800428c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004298:	e348      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042a0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80042ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d032      	beq.n	800431e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	4413      	add	r3, r2
 80042d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80042ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f006 fb3b 	bl	800a96e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004304:	4013      	ands	r3, r2
 8004306:	823b      	strh	r3, [r7, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	8a3a      	ldrh	r2, [r7, #16]
 800430e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004312:	b292      	uxth	r2, r2
 8004314:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f008 fd50 	bl	800cdbc <HAL_PCD_SetupStageCallback>
 800431c:	e306      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800431e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004322:	2b00      	cmp	r3, #0
 8004324:	f280 8302 	bge.w	800492c <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29a      	uxth	r2, r3
 8004330:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004334:	4013      	ands	r3, r2
 8004336:	83fb      	strh	r3, [r7, #30]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	8bfa      	ldrh	r2, [r7, #30]
 800433e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004342:	b292      	uxth	r2, r2
 8004344:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	4413      	add	r3, r2
 8004360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800436a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800436e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d019      	beq.n	80043aa <PCD_EP_ISR_Handler+0x1ec>
 8004376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d015      	beq.n	80043aa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004384:	6959      	ldr	r1, [r3, #20]
 8004386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004388:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800438e:	b29b      	uxth	r3, r3
 8004390:	f006 faed 	bl	800a96e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	441a      	add	r2, r3
 800439e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80043a2:	2100      	movs	r1, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f008 fd1b 	bl	800cde0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80043b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f040 82b5 	bne.w	800492c <PCD_EP_ISR_Handler+0x76e>
 80043c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043ce:	f000 82ad 	beq.w	800492c <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	4413      	add	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b3e      	cmp	r3, #62	; 0x3e
 8004408:	d91d      	bls.n	8004446 <PCD_EP_ISR_Handler+0x288>
 800440a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
 8004412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <PCD_EP_ISR_Handler+0x266>
 800441e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004420:	3b01      	subs	r3, #1
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29a      	uxth	r2, r3
 800442a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442c:	b29b      	uxth	r3, r3
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	b29b      	uxth	r3, r3
 8004432:	4313      	orrs	r3, r2
 8004434:	b29b      	uxth	r3, r3
 8004436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443e:	b29a      	uxth	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	e026      	b.n	8004494 <PCD_EP_ISR_Handler+0x2d6>
 8004446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <PCD_EP_ISR_Handler+0x2a6>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445c:	b29a      	uxth	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	e017      	b.n	8004494 <PCD_EP_ISR_Handler+0x2d6>
 8004464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	647b      	str	r3, [r7, #68]	; 0x44
 800446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <PCD_EP_ISR_Handler+0x2c0>
 8004478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447a:	3301      	adds	r3, #1
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29a      	uxth	r2, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004486:	b29b      	uxth	r3, r3
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	b29b      	uxth	r3, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	b29a      	uxth	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a4:	827b      	strh	r3, [r7, #18]
 80044a6:	8a7b      	ldrh	r3, [r7, #18]
 80044a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044ac:	827b      	strh	r3, [r7, #18]
 80044ae:	8a7b      	ldrh	r3, [r7, #18]
 80044b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044b4:	827b      	strh	r3, [r7, #18]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	8a7b      	ldrh	r3, [r7, #18]
 80044bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	8013      	strh	r3, [r2, #0]
 80044d0:	e22c      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f280 80f6 	bge.w	80046dc <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29a      	uxth	r2, r3
 8004502:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004506:	4013      	ands	r3, r2
 8004508:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800451e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004522:	b292      	uxth	r2, r2
 8004524:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004526:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800453c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453e:	7b1b      	ldrb	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d123      	bne.n	800458c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4413      	add	r3, r2
 800455e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004568:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800456c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 808e 	beq.w	8004692 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	6959      	ldr	r1, [r3, #20]
 800457e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004580:	88da      	ldrh	r2, [r3, #6]
 8004582:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004586:	f006 f9f2 	bl	800a96e <USB_ReadPMA>
 800458a:	e082      	b.n	8004692 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800458c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458e:	78db      	ldrb	r3, [r3, #3]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d10a      	bne.n	80045aa <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004594:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004598:	461a      	mov	r2, r3
 800459a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9d3 	bl	8004948 <HAL_PCD_EP_DB_Receive>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80045a8:	e073      	b.n	8004692 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d022      	beq.n	800464e <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	4413      	add	r3, r2
 8004622:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800462c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004630:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02c      	beq.n	8004692 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004642:	891a      	ldrh	r2, [r3, #8]
 8004644:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004648:	f006 f991 	bl	800a96e <USB_ReadPMA>
 800464c:	e021      	b.n	8004692 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	4413      	add	r3, r2
 8004668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004672:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004676:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004684:	6959      	ldr	r1, [r3, #20]
 8004686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004688:	895a      	ldrh	r2, [r3, #10]
 800468a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800468e:	f006 f96e 	bl	800a96e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800469a:	441a      	add	r2, r3
 800469c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80046a8:	441a      	add	r2, r3
 80046aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <PCD_EP_ISR_Handler+0x504>
 80046b6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80046ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d206      	bcs.n	80046d0 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f008 fb89 	bl	800cde0 <HAL_PCD_DataOutStageCallback>
 80046ce:	e005      	b.n	80046dc <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046d6:	4618      	mov	r0, r3
 80046d8:	f004 fbfb 	bl	8008ed2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8121 	beq.w	800492c <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80046ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473c:	78db      	ldrb	r3, [r3, #3]
 800473e:	2b01      	cmp	r3, #1
 8004740:	f040 80a2 	bne.w	8004888 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8004744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004746:	2200      	movs	r2, #0
 8004748:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474c:	7b1b      	ldrb	r3, [r3, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8093 	beq.w	800487a <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d046      	beq.n	80047ee <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d126      	bne.n	80047b6 <PCD_EP_ISR_Handler+0x5f8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	4413      	add	r3, r2
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	00da      	lsls	r2, r3, #3
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	4413      	add	r3, r2
 800478a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479a:	b29a      	uxth	r2, r3
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e061      	b.n	800487a <PCD_EP_ISR_Handler+0x6bc>
 80047b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d15d      	bne.n	800487a <PCD_EP_ISR_Handler+0x6bc>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	4413      	add	r3, r2
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	00da      	lsls	r2, r3, #3
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	4413      	add	r3, r2
 80047e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2200      	movs	r2, #0
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e045      	b.n	800487a <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d126      	bne.n	800484a <PCD_EP_ISR_Handler+0x68c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004810:	4413      	add	r3, r2
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00da      	lsls	r2, r3, #3
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	4413      	add	r3, r2
 800481e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482e:	b29a      	uxth	r2, r3
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004842:	b29a      	uxth	r2, r3
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	e017      	b.n	800487a <PCD_EP_ISR_Handler+0x6bc>
 800484a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d113      	bne.n	800487a <PCD_EP_ISR_Handler+0x6bc>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485a:	b29b      	uxth	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	4413      	add	r3, r2
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	00da      	lsls	r2, r3, #3
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	4413      	add	r3, r2
 800486e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	2200      	movs	r2, #0
 8004878:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800487a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f008 fac8 	bl	800ce16 <HAL_PCD_DataInStageCallback>
 8004886:	e051      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004888:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d144      	bne.n	800491e <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489c:	b29b      	uxth	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	4413      	add	r3, r2
 80048ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80048bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d907      	bls.n	80048d8 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80048c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048d0:	1ad2      	subs	r2, r2, r3
 80048d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d4:	619a      	str	r2, [r3, #24]
 80048d6:	e002      	b.n	80048de <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	2200      	movs	r2, #0
 80048dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f008 fa92 	bl	800ce16 <HAL_PCD_DataInStageCallback>
 80048f2:	e01b      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048fc:	441a      	add	r2, r3
 80048fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004900:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800490a:	441a      	add	r2, r3
 800490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004916:	4618      	mov	r0, r3
 8004918:	f004 fadb 	bl	8008ed2 <USB_EPStartXfer>
 800491c:	e006      	b.n	800492c <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800491e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004922:	461a      	mov	r2, r3
 8004924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f917 	bl	8004b5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004934:	b29b      	uxth	r3, r3
 8004936:	b21b      	sxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	f6ff ac45 	blt.w	80041c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3758      	adds	r7, #88	; 0x58
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d07c      	beq.n	8004a5a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	4413      	add	r3, r2
 800497a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004984:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	8b7b      	ldrh	r3, [r7, #26]
 800498c:	429a      	cmp	r2, r3
 800498e:	d306      	bcc.n	800499e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	8b7b      	ldrh	r3, [r7, #26]
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	619a      	str	r2, [r3, #24]
 800499c:	e002      	b.n	80049a4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d123      	bne.n	80049f4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	833b      	strh	r3, [r7, #24]
 80049c8:	8b3b      	ldrh	r3, [r7, #24]
 80049ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049ce:	833b      	strh	r3, [r7, #24]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	8b3b      	ldrh	r3, [r7, #24]
 80049e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01f      	beq.n	8004a3e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	82fb      	strh	r3, [r7, #22]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	8afb      	ldrh	r3, [r7, #22]
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a3e:	8b7b      	ldrh	r3, [r7, #26]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8085 	beq.w	8004b50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6959      	ldr	r1, [r3, #20]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	891a      	ldrh	r2, [r3, #8]
 8004a52:	8b7b      	ldrh	r3, [r7, #26]
 8004a54:	f005 ff8b 	bl	800a96e <USB_ReadPMA>
 8004a58:	e07a      	b.n	8004b50 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	4413      	add	r3, r2
 8004a74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	8b7b      	ldrh	r3, [r7, #26]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d306      	bcc.n	8004a98 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	8b7b      	ldrh	r3, [r7, #26]
 8004a90:	1ad2      	subs	r2, r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	619a      	str	r2, [r3, #24]
 8004a96:	e002      	b.n	8004a9e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d123      	bne.n	8004aee <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	83fb      	strh	r3, [r7, #30]
 8004ac2:	8bfb      	ldrh	r3, [r7, #30]
 8004ac4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ac8:	83fb      	strh	r3, [r7, #30]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8bfb      	ldrh	r3, [r7, #30]
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11f      	bne.n	8004b38 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	83bb      	strh	r3, [r7, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8bbb      	ldrh	r3, [r7, #28]
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b38:	8b7b      	ldrh	r3, [r7, #26]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6959      	ldr	r1, [r3, #20]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	895a      	ldrh	r2, [r3, #10]
 8004b4a:	8b7b      	ldrh	r3, [r7, #26]
 8004b4c:	f005 ff0f 	bl	800a96e <USB_ReadPMA>
    }
  }

  return count;
 8004b50:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b0a4      	sub	sp, #144	; 0x90
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	4613      	mov	r3, r2
 8004b66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 81db 	beq.w	8004f2a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b98:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d907      	bls.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	619a      	str	r2, [r3, #24]
 8004bb6:	e002      	b.n	8004bbe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 80b9 	bne.w	8004d3a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d126      	bne.n	8004c1e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	4413      	add	r3, r2
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	00da      	lsls	r2, r3, #3
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	e01a      	b.n	8004c54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d116      	bne.n	8004c54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	4413      	add	r3, r2
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	00da      	lsls	r2, r3, #3
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2200      	movs	r2, #0
 8004c52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d126      	bne.n	8004cb0 <HAL_PCD_EP_DB_Transmit+0x156>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	00da      	lsls	r2, r3, #3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e017      	b.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d113      	bne.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	4413      	add	r3, r2
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	00da      	lsls	r2, r3, #3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f008 f895 	bl	800ce16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 82fa 	beq.w	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	82fb      	strh	r3, [r7, #22]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8afb      	ldrh	r3, [r7, #22]
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
 8004d38:	e2d8      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d021      	beq.n	8004d88 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	f040 82ac 	bne.w	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004daa:	441a      	add	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d30b      	bcc.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	621a      	str	r2, [r3, #32]
 8004dd2:	e017      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d108      	bne.n	8004dee <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004ddc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004dec:	e00a      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d165      	bne.n	8004ed8 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	4413      	add	r3, r2
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	00da      	lsls	r2, r3, #3
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e48:	2b3e      	cmp	r3, #62	; 0x3e
 8004e4a:	d91d      	bls.n	8004e88 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e62:	3b01      	subs	r3, #1
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e044      	b.n	8004f12 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e035      	b.n	8004f12 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_PCD_EP_DB_Transmit+0x366>
 8004eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	029b      	lsls	r3, r3, #10
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e01c      	b.n	8004f12 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d118      	bne.n	8004f12 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef4:	4413      	add	r3, r2
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	00da      	lsls	r2, r3, #3
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	4413      	add	r3, r2
 8004f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
 8004f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f10:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6959      	ldr	r1, [r3, #20]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	891a      	ldrh	r2, [r3, #8]
 8004f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f005 fce1 	bl	800a8ea <USB_WritePMA>
 8004f28:	e1e0      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d307      	bcc.n	8004f6e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f66:	1ad2      	subs	r2, r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	619a      	str	r2, [r3, #24]
 8004f6c:	e002      	b.n	8004f74 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 80c0 	bne.w	80050fe <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d126      	bne.n	8004fd4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f9a:	4413      	add	r3, r2
 8004f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	00da      	lsls	r2, r3, #3
 8004fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	e01a      	b.n	800500a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d116      	bne.n	800500a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff0:	4413      	add	r3, r2
 8004ff2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00da      	lsls	r2, r3, #3
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005002:	663b      	str	r3, [r7, #96]	; 0x60
 8005004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005006:	2200      	movs	r2, #0
 8005008:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	677b      	str	r3, [r7, #116]	; 0x74
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d12b      	bne.n	8005070 <HAL_PCD_EP_DB_Transmit+0x516>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	4413      	add	r3, r2
 800502e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	00da      	lsls	r2, r3, #3
 8005036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005038:	4413      	add	r3, r2
 800503a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800503e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800504e:	b29a      	uxth	r2, r3
 8005050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005066:	b29a      	uxth	r2, r3
 8005068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e017      	b.n	80050a0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d113      	bne.n	80050a0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005080:	b29b      	uxth	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005086:	4413      	add	r3, r2
 8005088:	677b      	str	r3, [r7, #116]	; 0x74
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	00da      	lsls	r2, r3, #3
 8005090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005092:	4413      	add	r3, r2
 8005094:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005098:	673b      	str	r3, [r7, #112]	; 0x70
 800509a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800509c:	2200      	movs	r2, #0
 800509e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f007 feb5 	bl	800ce16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 811a 	bne.w	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
 80050fc:	e0f6      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d121      	bne.n	800514c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005152:	2b01      	cmp	r3, #1
 8005154:	f040 80ca 	bne.w	80052ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005160:	441a      	add	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800516e:	441a      	add	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	429a      	cmp	r2, r3
 800517e:	d30b      	bcc.n	8005198 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005190:	1ad2      	subs	r2, r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	621a      	str	r2, [r3, #32]
 8005196:	e017      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d108      	bne.n	80051b2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80051a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051b0:	e00a      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	657b      	str	r3, [r7, #84]	; 0x54
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d165      	bne.n	80052a2 <HAL_PCD_EP_DB_Transmit+0x748>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ea:	4413      	add	r3, r2
 80051ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	00da      	lsls	r2, r3, #3
 80051f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005208:	b29a      	uxth	r2, r3
 800520a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005212:	2b3e      	cmp	r3, #62	; 0x3e
 8005214:	d91d      	bls.n	8005252 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	66bb      	str	r3, [r7, #104]	; 0x68
 800521e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800522a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522c:	3b01      	subs	r3, #1
 800522e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005238:	b29b      	uxth	r3, r3
 800523a:	029b      	lsls	r3, r3, #10
 800523c:	b29b      	uxth	r3, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524a:	b29a      	uxth	r2, r3
 800524c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e041      	b.n	80052d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <HAL_PCD_EP_DB_Transmit+0x716>
 800525a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005268:	b29a      	uxth	r2, r3
 800526a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e032      	b.n	80052d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	66bb      	str	r3, [r7, #104]	; 0x68
 8005278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_PCD_EP_DB_Transmit+0x730>
 8005284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005286:	3301      	adds	r3, #1
 8005288:	66bb      	str	r3, [r7, #104]	; 0x68
 800528a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29a      	uxth	r2, r3
 8005290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29b      	uxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	e019      	b.n	80052d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d115      	bne.n	80052d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b8:	4413      	add	r3, r2
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	00da      	lsls	r2, r3, #3
 80052c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c4:	4413      	add	r3, r2
 80052c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052ca:	653b      	str	r3, [r7, #80]	; 0x50
 80052cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6959      	ldr	r1, [r3, #20]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	895a      	ldrh	r2, [r3, #10]
 80052e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f005 faff 	bl	800a8ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005306:	82bb      	strh	r3, [r7, #20]
 8005308:	8abb      	ldrh	r3, [r7, #20]
 800530a:	f083 0310 	eor.w	r3, r3, #16
 800530e:	82bb      	strh	r3, [r7, #20]
 8005310:	8abb      	ldrh	r3, [r7, #20]
 8005312:	f083 0320 	eor.w	r3, r3, #32
 8005316:	82bb      	strh	r3, [r7, #20]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	8abb      	ldrh	r3, [r7, #20]
 8005328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	b29b      	uxth	r3, r3
 800533a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3790      	adds	r7, #144	; 0x90
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005358:	897b      	ldrh	r3, [r7, #10]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005364:	897b      	ldrh	r3, [r7, #10]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	e009      	b.n	8005390 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800537c:	897a      	ldrh	r2, [r7, #10]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005390:	893b      	ldrh	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	80da      	strh	r2, [r3, #6]
 80053a4:	e00b      	b.n	80053be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2201      	movs	r2, #1
 80053aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005404:	b29b      	uxth	r3, r3
 8005406:	f043 0302 	orr.w	r3, r3, #2
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a04      	ldr	r2, [pc, #16]	; (800543c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800542a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542e:	6013      	str	r3, [r2, #0]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40007000 	.word	0x40007000

08005440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <HAL_PWREx_GetVoltageRange+0x18>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40007000 	.word	0x40007000

0800545c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546a:	d130      	bne.n	80054ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800546c:	4b23      	ldr	r3, [pc, #140]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005478:	d038      	beq.n	80054ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800548a:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2232      	movs	r2, #50	; 0x32
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0c9b      	lsrs	r3, r3, #18
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054a0:	e002      	b.n	80054a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054a8:	4b14      	ldr	r3, [pc, #80]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d102      	bne.n	80054bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f2      	bne.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c8:	d110      	bne.n	80054ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e00f      	b.n	80054ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d007      	beq.n	80054ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054e4:	4a05      	ldr	r2, [pc, #20]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40007000 	.word	0x40007000
 8005500:	20000000 	.word	0x20000000
 8005504:	431bde83 	.word	0x431bde83

08005508 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_PWREx_EnableVddUSB+0x1c>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a04      	ldr	r2, [pc, #16]	; (8005524 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005516:	6053      	str	r3, [r2, #4]
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40007000 	.word	0x40007000

08005528 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af02      	add	r7, sp, #8
 800552e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005530:	f7fd fe5a 	bl	80031e8 <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e069      	b.n	8005614 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fc fd39 	bl	8001fcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800555a:	f241 3188 	movw	r1, #5000	; 0x1388
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa86 	bl	8005a70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	3b01      	subs	r3, #1
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	2120      	movs	r1, #32
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa7e 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005594:	7afb      	ldrb	r3, [r7, #11]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d137      	bne.n	800560a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055a4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6852      	ldr	r2, [r2, #4]
 80055ac:	0611      	lsls	r1, r2, #24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68d2      	ldr	r2, [r2, #12]
 80055b2:	4311      	orrs	r1, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	69d2      	ldr	r2, [r2, #28]
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6a12      	ldr	r2, [r2, #32]
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_QSPI_Init+0xf4>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6912      	ldr	r2, [r2, #16]
 80055d6:	0411      	lsls	r1, r2, #16
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6952      	ldr	r2, [r2, #20]
 80055dc:	4311      	orrs	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6992      	ldr	r2, [r2, #24]
 80055e2:	4311      	orrs	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005612:	7afb      	ldrb	r3, [r7, #11]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	ffe0f8fe 	.word	0xffe0f8fe

08005620 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e016      	b.n	8005660 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fd22 	bl	800208c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005674:	f7fd fdb8 	bl	80031e8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_QSPI_Command+0x22>
 8005686:	2302      	movs	r3, #2
 8005688:	e048      	b.n	800571c <HAL_QSPI_Command+0xb4>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d137      	bne.n	800570e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2120      	movs	r1, #32
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f9e8 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d125      	bne.n	8005712 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80056c6:	2200      	movs	r2, #0
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fa15 	bl	8005afa <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d115      	bne.n	8005704 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2201      	movs	r2, #1
 80056e0:	2102      	movs	r1, #2
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f9d2 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2202      	movs	r2, #2
 80056f8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005702:	e006      	b.n	8005712 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800570c:	e001      	b.n	8005712 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005734:	f7fd fd58 	bl	80031e8 <HAL_GetTick>
 8005738:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3320      	adds	r3, #32
 8005740:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_QSPI_Transmit+0x2e>
 800574e:	2302      	movs	r3, #2
 8005750:	e076      	b.n	8005840 <HAL_QSPI_Transmit+0x11c>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d165      	bne.n	8005832 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d056      	beq.n	8005820 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2212      	movs	r2, #18
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80057a6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80057a8:	e01b      	b.n	80057e2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2201      	movs	r2, #1
 80057b2:	2104      	movs	r1, #4
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f969 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d113      	bne.n	80057ec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	1e5a      	subs	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1df      	bne.n	80057aa <HAL_QSPI_Transmit+0x86>
 80057ea:	e000      	b.n	80057ee <HAL_QSPI_Transmit+0xca>
          break;
 80057ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d110      	bne.n	8005816 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2201      	movs	r2, #1
 80057fc:	2102      	movs	r1, #2
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f944 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005808:	7ffb      	ldrb	r3, [r7, #31]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2202      	movs	r2, #2
 8005814:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800581e:	e00a      	b.n	8005836 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	f043 0208 	orr.w	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e001      	b.n	8005836 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800583e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005858:	f7fd fcc6 	bl	80031e8 <HAL_GetTick>
 800585c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3320      	adds	r3, #32
 800586c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_QSPI_Receive+0x36>
 800587a:	2302      	movs	r3, #2
 800587c:	e07d      	b.n	800597a <HAL_QSPI_Receive+0x132>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d16c      	bne.n	800596c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d05d      	beq.n	800595a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2222      	movs	r2, #34	; 0x22
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80058d6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80058e0:	e01c      	b.n	800591c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2201      	movs	r2, #1
 80058ea:	2106      	movs	r1, #6
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f8cd 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d114      	bne.n	8005926 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	7812      	ldrb	r2, [r2, #0]
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1de      	bne.n	80058e2 <HAL_QSPI_Receive+0x9a>
 8005924:	e000      	b.n	8005928 <HAL_QSPI_Receive+0xe0>
          break;
 8005926:	bf00      	nop
      }

      if (status == HAL_OK)
 8005928:	7ffb      	ldrb	r3, [r7, #31]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d110      	bne.n	8005950 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2201      	movs	r2, #1
 8005936:	2102      	movs	r1, #2
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f8a7 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005942:	7ffb      	ldrb	r3, [r7, #31]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2202      	movs	r2, #2
 800594e:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005958:	e00a      	b.n	8005970 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e001      	b.n	8005970 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800596c:	2302      	movs	r3, #2
 800596e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005978:	7ffb      	ldrb	r3, [r7, #31]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b088      	sub	sp, #32
 8005986:	af02      	add	r7, sp, #8
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005990:	f7fd fc2a 	bl	80031e8 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_QSPI_AutoPolling+0x24>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e060      	b.n	8005a68 <HAL_QSPI_AutoPolling+0xe6>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d14f      	bne.n	8005a5a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2242      	movs	r2, #66	; 0x42
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2200      	movs	r2, #0
 80059d0:	2120      	movs	r1, #32
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f85a 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d13d      	bne.n	8005a5e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6852      	ldr	r2, [r2, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005a18:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f866 	bl	8005afa <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2201      	movs	r2, #1
 8005a36:	2108      	movs	r1, #8
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f827 	bl	8005a8c <QSPI_WaitFlagStateUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a58:	e001      	b.n	8005a5e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a9c:	e01a      	b.n	8005ad4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d016      	beq.n	8005ad4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa6:	f7fd fb9f 	bl	80031e8 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d302      	bcc.n	8005abc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10b      	bne.n	8005ad4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	f043 0201 	orr.w	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e00e      	b.n	8005af2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1d6      	bne.n	8005a9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <QSPI_Config+0x28>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b14:	d005      	beq.n	8005b22 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3a01      	subs	r2, #1
 8005b20:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80b9 	beq.w	8005c9e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d05f      	beq.n	8005bf4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	6892      	ldr	r2, [r2, #8]
 8005b3c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d031      	beq.n	8005baa <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	431a      	orrs	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	049b      	lsls	r3, r3, #18
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	ea42 0103 	orr.w	r1, r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b9a:	f000 812e 	beq.w	8005dfa <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	6852      	ldr	r2, [r2, #4]
 8005ba6:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005ba8:	e127      	b.n	8005dfa <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	049b      	lsls	r3, r3, #18
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	615a      	str	r2, [r3, #20]
}
 8005bf2:	e102      	b.n	8005dfa <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d02e      	beq.n	8005c5a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	049b      	lsls	r3, r3, #18
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	ea42 0103 	orr.w	r1, r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c4a:	f000 80d6 	beq.w	8005dfa <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	6852      	ldr	r2, [r2, #4]
 8005c56:	619a      	str	r2, [r3, #24]
}
 8005c58:	e0cf      	b.n	8005dfa <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	049b      	lsls	r3, r3, #18
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	ea42 0103 	orr.w	r1, r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	615a      	str	r2, [r3, #20]
}
 8005c9c:	e0ad      	b.n	8005dfa <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d058      	beq.n	8005d58 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	6892      	ldr	r2, [r2, #8]
 8005cae:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02d      	beq.n	8005d14 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	049b      	lsls	r3, r3, #18
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	ea42 0103 	orr.w	r1, r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d06:	d078      	beq.n	8005dfa <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	6852      	ldr	r2, [r2, #4]
 8005d10:	619a      	str	r2, [r3, #24]
}
 8005d12:	e072      	b.n	8005dfa <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	049b      	lsls	r3, r3, #18
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	615a      	str	r2, [r3, #20]
}
 8005d56:	e050      	b.n	8005dfa <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02a      	beq.n	8005db6 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	049b      	lsls	r3, r3, #18
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005da8:	d027      	beq.n	8005dfa <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	6852      	ldr	r2, [r2, #4]
 8005db2:	619a      	str	r2, [r3, #24]
}
 8005db4:	e021      	b.n	8005dfa <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01d      	beq.n	8005dfa <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	049b      	lsls	r3, r3, #18
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	ea42 0103 	orr.w	r1, r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	615a      	str	r2, [r3, #20]
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d102      	bne.n	8005e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f000 bc4f 	b.w	80066ba <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1c:	4b97      	ldr	r3, [pc, #604]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 030c 	and.w	r3, r3, #12
 8005e24:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e26:	4b95      	ldr	r3, [pc, #596]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80e6 	beq.w	800600a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_RCC_OscConfig+0x4c>
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b0c      	cmp	r3, #12
 8005e48:	f040 808d 	bne.w	8005f66 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	f040 8089 	bne.w	8005f66 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e54:	4b89      	ldr	r3, [pc, #548]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <HAL_RCC_OscConfig+0x66>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f000 bc26 	b.w	80066ba <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e72:	4b82      	ldr	r3, [pc, #520]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <HAL_RCC_OscConfig+0x80>
 8005e7e:	4b7f      	ldr	r3, [pc, #508]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e86:	e005      	b.n	8005e94 <HAL_RCC_OscConfig+0x8c>
 8005e88:	4b7c      	ldr	r3, [pc, #496]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d224      	bcs.n	8005ee2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fda1 	bl	80069e4 <RCC_SetFlashLatencyFromMSIRange>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f000 bc06 	b.w	80066ba <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eae:	4b73      	ldr	r3, [pc, #460]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a72      	ldr	r2, [pc, #456]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b70      	ldr	r3, [pc, #448]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	496d      	ldr	r1, [pc, #436]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ecc:	4b6b      	ldr	r3, [pc, #428]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	4968      	ldr	r1, [pc, #416]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	e025      	b.n	8005f2e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ee2:	4b66      	ldr	r3, [pc, #408]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a65      	ldr	r2, [pc, #404]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	4b63      	ldr	r3, [pc, #396]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	4960      	ldr	r1, [pc, #384]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f00:	4b5e      	ldr	r3, [pc, #376]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	495b      	ldr	r1, [pc, #364]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fd60 	bl	80069e4 <RCC_SetFlashLatencyFromMSIRange>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e3c5      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f2e:	f000 fccd 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b51      	ldr	r3, [pc, #324]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	4950      	ldr	r1, [pc, #320]	; (8006080 <HAL_RCC_OscConfig+0x278>)
 8005f40:	5ccb      	ldrb	r3, [r1, r3]
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4a:	4a4e      	ldr	r2, [pc, #312]	; (8006084 <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f4e:	4b4e      	ldr	r3, [pc, #312]	; (8006088 <HAL_RCC_OscConfig+0x280>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fd f8f8 	bl	8003148 <HAL_InitTick>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d052      	beq.n	8006008 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	e3a9      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d032      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f6e:	4b43      	ldr	r3, [pc, #268]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a42      	ldr	r2, [pc, #264]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f7a:	f7fd f935 	bl	80031e8 <HAL_GetTick>
 8005f7e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f82:	f7fd f931 	bl	80031e8 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e392      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fa0:	4b36      	ldr	r3, [pc, #216]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a35      	ldr	r2, [pc, #212]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fa6:	f043 0308 	orr.w	r3, r3, #8
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b33      	ldr	r3, [pc, #204]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	4930      	ldr	r1, [pc, #192]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fbe:	4b2f      	ldr	r3, [pc, #188]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	492b      	ldr	r1, [pc, #172]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
 8005fd2:	e01a      	b.n	800600a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fd4:	4b29      	ldr	r3, [pc, #164]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a28      	ldr	r2, [pc, #160]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fe0:	f7fd f902 	bl	80031e8 <HAL_GetTick>
 8005fe4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fe8:	f7fd f8fe 	bl	80031e8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e35f      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1e0>
 8006006:	e000      	b.n	800600a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d073      	beq.n	80060fe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d005      	beq.n	8006028 <HAL_RCC_OscConfig+0x220>
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b0c      	cmp	r3, #12
 8006020:	d10e      	bne.n	8006040 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d10b      	bne.n	8006040 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <HAL_RCC_OscConfig+0x274>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d063      	beq.n	80060fc <HAL_RCC_OscConfig+0x2f4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d15f      	bne.n	80060fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e33c      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006048:	d106      	bne.n	8006058 <HAL_RCC_OscConfig+0x250>
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <HAL_RCC_OscConfig+0x274>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a0b      	ldr	r2, [pc, #44]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8006050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e025      	b.n	80060a4 <HAL_RCC_OscConfig+0x29c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006060:	d114      	bne.n	800608c <HAL_RCC_OscConfig+0x284>
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a05      	ldr	r2, [pc, #20]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8006068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b03      	ldr	r3, [pc, #12]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a02      	ldr	r2, [pc, #8]	; (800607c <HAL_RCC_OscConfig+0x274>)
 8006074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e013      	b.n	80060a4 <HAL_RCC_OscConfig+0x29c>
 800607c:	40021000 	.word	0x40021000
 8006080:	08010614 	.word	0x08010614
 8006084:	20000000 	.word	0x20000000
 8006088:	20000004 	.word	0x20000004
 800608c:	4b8f      	ldr	r3, [pc, #572]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a8e      	ldr	r2, [pc, #568]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4b8c      	ldr	r3, [pc, #560]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a8b      	ldr	r2, [pc, #556]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800609e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fd f89c 	bl	80031e8 <HAL_GetTick>
 80060b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fd f898 	bl	80031e8 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e2f9      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060c6:	4b81      	ldr	r3, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x2ac>
 80060d2:	e014      	b.n	80060fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fd f888 	bl	80031e8 <HAL_GetTick>
 80060d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060dc:	f7fd f884 	bl	80031e8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b64      	cmp	r3, #100	; 0x64
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e2e5      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ee:	4b77      	ldr	r3, [pc, #476]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x2d4>
 80060fa:	e000      	b.n	80060fe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d060      	beq.n	80061cc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d005      	beq.n	800611c <HAL_RCC_OscConfig+0x314>
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2b0c      	cmp	r3, #12
 8006114:	d119      	bne.n	800614a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d116      	bne.n	800614a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800611c:	4b6b      	ldr	r3, [pc, #428]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_OscConfig+0x32c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e2c2      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006134:	4b65      	ldr	r3, [pc, #404]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	061b      	lsls	r3, r3, #24
 8006142:	4962      	ldr	r1, [pc, #392]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006144:	4313      	orrs	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006148:	e040      	b.n	80061cc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d023      	beq.n	800619a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006152:	4b5e      	ldr	r3, [pc, #376]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a5d      	ldr	r2, [pc, #372]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fd f843 	bl	80031e8 <HAL_GetTick>
 8006162:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006166:	f7fd f83f 	bl	80031e8 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e2a0      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006178:	4b54      	ldr	r3, [pc, #336]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006184:	4b51      	ldr	r3, [pc, #324]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	494e      	ldr	r1, [pc, #312]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	604b      	str	r3, [r1, #4]
 8006198:	e018      	b.n	80061cc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619a:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a4b      	ldr	r2, [pc, #300]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80061a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a6:	f7fd f81f 	bl	80031e8 <HAL_GetTick>
 80061aa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ae:	f7fd f81b 	bl	80031e8 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e27c      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061c0:	4b42      	ldr	r3, [pc, #264]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f0      	bne.n	80061ae <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8082 	beq.w	80062de <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d05f      	beq.n	80062a2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80061e2:	4b3a      	ldr	r3, [pc, #232]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80061e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d037      	beq.n	8006268 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e254      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01b      	beq.n	8006252 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800621a:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800621c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006220:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006222:	f023 0301 	bic.w	r3, r3, #1
 8006226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800622a:	f7fc ffdd 	bl	80031e8 <HAL_GetTick>
 800622e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006232:	f7fc ffd9 	bl	80031e8 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b11      	cmp	r3, #17
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e23a      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006244:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1ef      	bne.n	8006232 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006258:	f023 0210 	bic.w	r2, r3, #16
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	491a      	ldr	r1, [pc, #104]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006268:	4b18      	ldr	r3, [pc, #96]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 800626a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fc ffb6 	bl	80031e8 <HAL_GetTick>
 800627c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006280:	f7fc ffb2 	bl	80031e8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b11      	cmp	r3, #17
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e213      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 8006294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0ef      	beq.n	8006280 <HAL_RCC_OscConfig+0x478>
 80062a0:	e01d      	b.n	80062de <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80062a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <HAL_RCC_OscConfig+0x4c4>)
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b2:	f7fc ff99 	bl	80031e8 <HAL_GetTick>
 80062b6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062b8:	e00a      	b.n	80062d0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ba:	f7fc ff95 	bl	80031e8 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b11      	cmp	r3, #17
 80062c6:	d903      	bls.n	80062d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e1f6      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
 80062cc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062d0:	4ba9      	ldr	r3, [pc, #676]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80062d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1ed      	bne.n	80062ba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80bd 	beq.w	8006466 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062f2:	4ba1      	ldr	r3, [pc, #644]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10e      	bne.n	800631c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fe:	4b9e      	ldr	r3, [pc, #632]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006302:	4a9d      	ldr	r2, [pc, #628]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006308:	6593      	str	r3, [r2, #88]	; 0x58
 800630a:	4b9b      	ldr	r3, [pc, #620]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800631c:	4b97      	ldr	r3, [pc, #604]	; (800657c <HAL_RCC_OscConfig+0x774>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d118      	bne.n	800635a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006328:	4b94      	ldr	r3, [pc, #592]	; (800657c <HAL_RCC_OscConfig+0x774>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a93      	ldr	r2, [pc, #588]	; (800657c <HAL_RCC_OscConfig+0x774>)
 800632e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006334:	f7fc ff58 	bl	80031e8 <HAL_GetTick>
 8006338:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633c:	f7fc ff54 	bl	80031e8 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e1b5      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800634e:	4b8b      	ldr	r3, [pc, #556]	; (800657c <HAL_RCC_OscConfig+0x774>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d02c      	beq.n	80063c0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006366:	4b84      	ldr	r3, [pc, #528]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006378:	497f      	ldr	r1, [pc, #508]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d010      	beq.n	80063ae <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800638c:	4b7a      	ldr	r3, [pc, #488]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	4a79      	ldr	r2, [pc, #484]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006394:	f043 0304 	orr.w	r3, r3, #4
 8006398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800639c:	4b76      	ldr	r3, [pc, #472]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	4a75      	ldr	r2, [pc, #468]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063ac:	e018      	b.n	80063e0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80063ae:	4b72      	ldr	r3, [pc, #456]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	4a70      	ldr	r2, [pc, #448]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063be:	e00f      	b.n	80063e0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80063c0:	4b6d      	ldr	r3, [pc, #436]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	4a6c      	ldr	r2, [pc, #432]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80063d0:	4b69      	ldr	r3, [pc, #420]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	4a68      	ldr	r2, [pc, #416]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80063d8:	f023 0304 	bic.w	r3, r3, #4
 80063dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d016      	beq.n	8006416 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fc fefe 	bl	80031e8 <HAL_GetTick>
 80063ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fc fefa 	bl	80031e8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e159      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006406:	4b5c      	ldr	r3, [pc, #368]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0ed      	beq.n	80063f0 <HAL_RCC_OscConfig+0x5e8>
 8006414:	e01d      	b.n	8006452 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fc fee7 	bl	80031e8 <HAL_GetTick>
 800641a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fc fee3 	bl	80031e8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	; 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e142      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006434:	4b50      	ldr	r3, [pc, #320]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1ed      	bne.n	800641e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006442:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006448:	4a4b      	ldr	r2, [pc, #300]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800644a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006456:	2b01      	cmp	r3, #1
 8006458:	d105      	bne.n	8006466 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800645a:	4b47      	ldr	r3, [pc, #284]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800645c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645e:	4a46      	ldr	r2, [pc, #280]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006464:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03c      	beq.n	80064ec <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01c      	beq.n	80064b4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800647a:	4b3f      	ldr	r3, [pc, #252]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800647c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006480:	4a3d      	ldr	r2, [pc, #244]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648a:	f7fc fead 	bl	80031e8 <HAL_GetTick>
 800648e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006492:	f7fc fea9 	bl	80031e8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e10a      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064a4:	4b34      	ldr	r3, [pc, #208]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80064a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ef      	beq.n	8006492 <HAL_RCC_OscConfig+0x68a>
 80064b2:	e01b      	b.n	80064ec <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064b4:	4b30      	ldr	r3, [pc, #192]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80064b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064ba:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c4:	f7fc fe90 	bl	80031e8 <HAL_GetTick>
 80064c8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064cc:	f7fc fe8c 	bl	80031e8 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e0ed      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 80064e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1ef      	bne.n	80064cc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80e1 	beq.w	80066b8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	f040 80b5 	bne.w	800666a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006500:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f003 0203 	and.w	r2, r3, #3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	429a      	cmp	r2, r3
 8006512:	d124      	bne.n	800655e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651e:	3b01      	subs	r3, #1
 8006520:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006522:	429a      	cmp	r2, r3
 8006524:	d11b      	bne.n	800655e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d113      	bne.n	800655e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	3b01      	subs	r3, #1
 8006544:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d109      	bne.n	800655e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	3b01      	subs	r3, #1
 8006558:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d05f      	beq.n	800661e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d05a      	beq.n	800661a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a03      	ldr	r2, [pc, #12]	; (8006578 <HAL_RCC_OscConfig+0x770>)
 800656a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800656e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006570:	f7fc fe3a 	bl	80031e8 <HAL_GetTick>
 8006574:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006576:	e00c      	b.n	8006592 <HAL_RCC_OscConfig+0x78a>
 8006578:	40021000 	.word	0x40021000
 800657c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006580:	f7fc fe32 	bl	80031e8 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e093      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006592:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800659e:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	4b49      	ldr	r3, [pc, #292]	; (80066c8 <HAL_RCC_OscConfig+0x8c0>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065ae:	3a01      	subs	r2, #1
 80065b0:	0112      	lsls	r2, r2, #4
 80065b2:	4311      	orrs	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065b8:	0212      	lsls	r2, r2, #8
 80065ba:	4311      	orrs	r1, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065c0:	0852      	lsrs	r2, r2, #1
 80065c2:	3a01      	subs	r2, #1
 80065c4:	0552      	lsls	r2, r2, #21
 80065c6:	4311      	orrs	r1, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065cc:	0852      	lsrs	r2, r2, #1
 80065ce:	3a01      	subs	r2, #1
 80065d0:	0652      	lsls	r2, r2, #25
 80065d2:	430a      	orrs	r2, r1
 80065d4:	493b      	ldr	r1, [pc, #236]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065da:	4b3a      	ldr	r3, [pc, #232]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a39      	ldr	r2, [pc, #228]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80065e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065e4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065e6:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	4a36      	ldr	r2, [pc, #216]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80065ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065f0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065f2:	f7fc fdf9 	bl	80031e8 <HAL_GetTick>
 80065f6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fa:	f7fc fdf5 	bl	80031e8 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e056      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800660c:	4b2d      	ldr	r3, [pc, #180]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006618:	e04e      	b.n	80066b8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e04d      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800661e:	4b29      	ldr	r3, [pc, #164]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d146      	bne.n	80066b8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800662a:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a25      	ldr	r2, [pc, #148]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006634:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006636:	4b23      	ldr	r3, [pc, #140]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	4a22      	ldr	r2, [pc, #136]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 800663c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006640:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006642:	f7fc fdd1 	bl	80031e8 <HAL_GetTick>
 8006646:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800664a:	f7fc fdcd 	bl	80031e8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e02e      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800665c:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCC_OscConfig+0x842>
 8006668:	e026      	b.n	80066b8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	2b0c      	cmp	r3, #12
 800666e:	d021      	beq.n	80066b4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006670:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800667a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667c:	f7fc fdb4 	bl	80031e8 <HAL_GetTick>
 8006680:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006684:	f7fc fdb0 	bl	80031e8 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e011      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	4a07      	ldr	r2, [pc, #28]	; (80066c4 <HAL_RCC_OscConfig+0x8bc>)
 80066a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80066ac:	f023 0303 	bic.w	r3, r3, #3
 80066b0:	60d3      	str	r3, [r2, #12]
 80066b2:	e001      	b.n	80066b8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	; 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40021000 	.word	0x40021000
 80066c8:	f99f808c 	.word	0xf99f808c

080066cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0e7      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066e0:	4b75      	ldr	r3, [pc, #468]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d910      	bls.n	8006710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	4b72      	ldr	r3, [pc, #456]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f023 0207 	bic.w	r2, r3, #7
 80066f6:	4970      	ldr	r1, [pc, #448]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	4b6e      	ldr	r3, [pc, #440]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0cf      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	4b66      	ldr	r3, [pc, #408]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006728:	429a      	cmp	r2, r3
 800672a:	d908      	bls.n	800673e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800672c:	4b63      	ldr	r3, [pc, #396]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4960      	ldr	r1, [pc, #384]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d04c      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b03      	cmp	r3, #3
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006752:	4b5a      	ldr	r3, [pc, #360]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d121      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e0a6      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800676a:	4b54      	ldr	r3, [pc, #336]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d115      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e09a      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006782:	4b4e      	ldr	r3, [pc, #312]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e08e      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006792:	4b4a      	ldr	r3, [pc, #296]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e086      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067a2:	4b46      	ldr	r3, [pc, #280]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 0203 	bic.w	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4943      	ldr	r1, [pc, #268]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b4:	f7fc fd18 	bl	80031e8 <HAL_GetTick>
 80067b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	e00a      	b.n	80067d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067bc:	f7fc fd14 	bl	80031e8 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e06e      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d2:	4b3a      	ldr	r3, [pc, #232]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 020c 	and.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d1eb      	bne.n	80067bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	4b31      	ldr	r3, [pc, #196]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d208      	bcs.n	8006812 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006800:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	492b      	ldr	r1, [pc, #172]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006812:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d210      	bcs.n	8006842 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006820:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 0207 	bic.w	r2, r3, #7
 8006828:	4923      	ldr	r1, [pc, #140]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006830:	4b21      	ldr	r3, [pc, #132]	; (80068b8 <HAL_RCC_ClockConfig+0x1ec>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d001      	beq.n	8006842 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e036      	b.n	80068b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684e:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4918      	ldr	r1, [pc, #96]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4910      	ldr	r1, [pc, #64]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006880:	f000 f824 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 8006884:	4602      	mov	r2, r0
 8006886:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <HAL_RCC_ClockConfig+0x1f0>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	490b      	ldr	r1, [pc, #44]	; (80068c0 <HAL_RCC_ClockConfig+0x1f4>)
 8006892:	5ccb      	ldrb	r3, [r1, r3]
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
 800689c:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <HAL_RCC_ClockConfig+0x1f8>)
 800689e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_RCC_ClockConfig+0x1fc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fc fc4f 	bl	8003148 <HAL_InitTick>
 80068aa:	4603      	mov	r3, r0
 80068ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80068ae:	7afb      	ldrb	r3, [r7, #11]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40022000 	.word	0x40022000
 80068bc:	40021000 	.word	0x40021000
 80068c0:	08010614 	.word	0x08010614
 80068c4:	20000000 	.word	0x20000000
 80068c8:	20000004 	.word	0x20000004

080068cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	; 0x24
 80068d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068da:	4b3e      	ldr	r3, [pc, #248]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e4:	4b3b      	ldr	r3, [pc, #236]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x34>
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d121      	bne.n	800693e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d11e      	bne.n	800693e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800690c:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800690e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	e005      	b.n	8006928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800691c:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	091b      	lsrs	r3, r3, #4
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006928:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10d      	bne.n	8006954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800693c:	e00a      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b04      	cmp	r3, #4
 8006942:	d102      	bne.n	800694a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <HAL_RCC_GetSysClockFreq+0x110>)
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e004      	b.n	8006954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d101      	bne.n	8006954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006950:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b0c      	cmp	r3, #12
 8006958:	d134      	bne.n	80069c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800695a:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d003      	beq.n	8006972 <HAL_RCC_GetSysClockFreq+0xa6>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d003      	beq.n	8006978 <HAL_RCC_GetSysClockFreq+0xac>
 8006970:	e005      	b.n	800697e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <HAL_RCC_GetSysClockFreq+0x110>)
 8006974:	617b      	str	r3, [r7, #20]
      break;
 8006976:	e005      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800697a:	617b      	str	r3, [r7, #20]
      break;
 800697c:	e002      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	617b      	str	r3, [r7, #20]
      break;
 8006982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006984:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	3301      	adds	r3, #1
 8006990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	fb03 f202 	mul.w	r2, r3, r2
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069aa:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	0e5b      	lsrs	r3, r3, #25
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	3301      	adds	r3, #1
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80069c4:	69bb      	ldr	r3, [r7, #24]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3724      	adds	r7, #36	; 0x24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40021000 	.word	0x40021000
 80069d8:	08010624 	.word	0x08010624
 80069dc:	00f42400 	.word	0x00f42400
 80069e0:	007a1200 	.word	0x007a1200

080069e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80069f0:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80069fc:	f7fe fd20 	bl	8005440 <HAL_PWREx_GetVoltageRange>
 8006a00:	6178      	str	r0, [r7, #20]
 8006a02:	e014      	b.n	8006a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a1c:	f7fe fd10 	bl	8005440 <HAL_PWREx_GetVoltageRange>
 8006a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a26:	4a1d      	ldr	r2, [pc, #116]	; (8006a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a34:	d10b      	bne.n	8006a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b80      	cmp	r3, #128	; 0x80
 8006a3a:	d919      	bls.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2ba0      	cmp	r3, #160	; 0xa0
 8006a40:	d902      	bls.n	8006a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a42:	2302      	movs	r3, #2
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	e013      	b.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a48:	2301      	movs	r3, #1
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	e010      	b.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d902      	bls.n	8006a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a54:	2303      	movs	r3, #3
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	e00a      	b.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d102      	bne.n	8006a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a60:	2302      	movs	r3, #2
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	e004      	b.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b70      	cmp	r3, #112	; 0x70
 8006a6a:	d101      	bne.n	8006a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 0207 	bic.w	r2, r3, #7
 8006a78:	4909      	ldr	r1, [pc, #36]	; (8006aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d001      	beq.n	8006a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	40022000 	.word	0x40022000

08006aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006aac:	2300      	movs	r3, #0
 8006aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 809e 	beq.w	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ac6:	4b46      	ldr	r3, [pc, #280]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00d      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006adc:	4b40      	ldr	r3, [pc, #256]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	4a3f      	ldr	r2, [pc, #252]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ae8:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006af4:	2301      	movs	r3, #1
 8006af6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006af8:	4b3a      	ldr	r3, [pc, #232]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a39      	ldr	r2, [pc, #228]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b04:	f7fc fb70 	bl	80031e8 <HAL_GetTick>
 8006b08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b0a:	e009      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0c:	f7fc fb6c 	bl	80031e8 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d902      	bls.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8006b1e:	e005      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b20:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0ef      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d15a      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b32:	4b2b      	ldr	r3, [pc, #172]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01e      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d019      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b4e:	4b24      	ldr	r3, [pc, #144]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b5a:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b60:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b70:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b7a:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d016      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fc fb2c 	bl	80031e8 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b92:	e00b      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b94:	f7fc fb28 	bl	80031e8 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d902      	bls.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	74fb      	strb	r3, [r7, #19]
            break;
 8006baa:	e006      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0ec      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006bba:	7cfb      	ldrb	r3, [r7, #19]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	4904      	ldr	r1, [pc, #16]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bd6:	e009      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bd8:	7cfb      	ldrb	r3, [r7, #19]
 8006bda:	74bb      	strb	r3, [r7, #18]
 8006bdc:	e006      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006bde:	bf00      	nop
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bec:	7c7b      	ldrb	r3, [r7, #17]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d105      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf2:	4b6e      	ldr	r3, [pc, #440]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c0a:	4b68      	ldr	r3, [pc, #416]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c10:	f023 0203 	bic.w	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	4964      	ldr	r1, [pc, #400]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c2c:	4b5f      	ldr	r3, [pc, #380]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f023 020c 	bic.w	r2, r3, #12
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	495c      	ldr	r1, [pc, #368]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c4e:	4b57      	ldr	r3, [pc, #348]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4953      	ldr	r1, [pc, #332]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c70:	4b4e      	ldr	r3, [pc, #312]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	494b      	ldr	r1, [pc, #300]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c92:	4b46      	ldr	r3, [pc, #280]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	4942      	ldr	r1, [pc, #264]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cb4:	4b3d      	ldr	r3, [pc, #244]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	493a      	ldr	r1, [pc, #232]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cd6:	4b35      	ldr	r3, [pc, #212]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	4931      	ldr	r1, [pc, #196]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cf8:	4b2c      	ldr	r3, [pc, #176]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	4929      	ldr	r1, [pc, #164]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4920      	ldr	r1, [pc, #128]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	4918      	ldr	r1, [pc, #96]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5a:	d105      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d5c:	4b13      	ldr	r3, [pc, #76]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4a12      	ldr	r2, [pc, #72]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d66:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d015      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d74:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	490a      	ldr	r1, [pc, #40]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d92:	d105      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a04      	ldr	r2, [pc, #16]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006dba:	f043 0304 	orr.w	r3, r3, #4
 8006dbe:	6013      	str	r3, [r2, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000

08006dd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d07f      	beq.n	8006ee2 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fb fc5c 	bl	80026b4 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006e02:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e0c:	4b37      	ldr	r3, [pc, #220]	; (8006eec <HAL_RTC_Init+0x11c>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d05b      	beq.n	8006ed0 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	22ca      	movs	r2, #202	; 0xca
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2253      	movs	r2, #83	; 0x53
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa53 	bl	80072d4 <RTC_EnterInitMode>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d127      	bne.n	8006e88 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4a:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6999      	ldr	r1, [r3, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6912      	ldr	r2, [r2, #16]
 8006e72:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6919      	ldr	r1, [r3, #16]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	041a      	lsls	r2, r3, #16
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa59 	bl	8007340 <RTC_ExitInitMode>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d116      	bne.n	8006ec6 <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006ea6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6999      	ldr	r1, [r3, #24]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ece:	e001      	b.n	8006ed4 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
  }

  return status;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40002800 	.word	0x40002800

08006ef0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_RTC_SetTime+0x1a>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e08b      	b.n	8007022 <HAL_RTC_SetTime+0x132>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	22ca      	movs	r2, #202	; 0xca
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2253      	movs	r2, #83	; 0x53
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f9d2 	bl	80072d4 <RTC_EnterInitMode>
 8006f30:	4603      	mov	r3, r0
 8006f32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006f34:	7cfb      	ldrb	r3, [r7, #19]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d163      	bne.n	8007002 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d126      	bne.n	8006f8e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fa2f 	bl	80073bc <RTC_ByteToBcd2>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fa28 	bl	80073bc <RTC_ByteToBcd2>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f70:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	789b      	ldrb	r3, [r3, #2]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fa20 	bl	80073bc <RTC_ByteToBcd2>
 8006f7c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f7e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	78db      	ldrb	r3, [r3, #3]
 8006f86:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e018      	b.n	8006fc0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fb4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	78db      	ldrb	r3, [r3, #3]
 8006fba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006fca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fde:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6999      	ldr	r1, [r3, #24]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f9a1 	bl	8007340 <RTC_ExitInitMode>
 8006ffe:	4603      	mov	r3, r0
 8007000:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	22ff      	movs	r2, #255	; 0xff
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800700a:	7cfb      	ldrb	r3, [r7, #19]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8007020:	7cfb      	ldrb	r3, [r7, #19]
}
 8007022:	4618      	mov	r0, r3
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	bd90      	pop	{r4, r7, pc}

0800702a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007058:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800705c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007068:	b2da      	uxtb	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007078:	b2da      	uxtb	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007086:	b2da      	uxtb	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	0d9b      	lsrs	r3, r3, #22
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11a      	bne.n	80070d8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f9a8 	bl	80073fc <RTC_Bcd2ToByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f99f 	bl	80073fc <RTC_Bcd2ToByte>
 80070be:	4603      	mov	r3, r0
 80070c0:	461a      	mov	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	789b      	ldrb	r3, [r3, #2]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f996 	bl	80073fc <RTC_Bcd2ToByte>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070e2:	b590      	push	{r4, r7, lr}
 80070e4:	b087      	sub	sp, #28
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_RTC_SetDate+0x1a>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e075      	b.n	80071e8 <HAL_RTC_SetDate+0x106>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <HAL_RTC_SetDate+0x4e>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	b2db      	uxtb	r3, r3
 8007128:	330a      	adds	r3, #10
 800712a:	b2da      	uxtb	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d11c      	bne.n	8007170 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f93e 	bl	80073bc <RTC_ByteToBcd2>
 8007140:	4603      	mov	r3, r0
 8007142:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 f937 	bl	80073bc <RTC_ByteToBcd2>
 800714e:	4603      	mov	r3, r0
 8007150:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007152:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	789b      	ldrb	r3, [r3, #2]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f92f 	bl	80073bc <RTC_ByteToBcd2>
 800715e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007160:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e00e      	b.n	800718e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	78db      	ldrb	r3, [r3, #3]
 8007174:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800717c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007182:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	22ca      	movs	r2, #202	; 0xca
 8007194:	625a      	str	r2, [r3, #36]	; 0x24
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2253      	movs	r2, #83	; 0x53
 800719c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f898 	bl	80072d4 <RTC_EnterInitMode>
 80071a4:	4603      	mov	r3, r0
 80071a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80071a8:	7cfb      	ldrb	r3, [r7, #19]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10c      	bne.n	80071c8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f8be 	bl	8007340 <RTC_ExitInitMode>
 80071c4:	4603      	mov	r3, r0
 80071c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 80071e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd90      	pop	{r4, r7, pc}

080071f0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800720a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	0c1b      	lsrs	r3, r3, #16
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	0a1b      	lsrs	r3, r3, #8
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	0b5b      	lsrs	r3, r3, #13
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	b2da      	uxtb	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d11a      	bne.n	8007280 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	78db      	ldrb	r3, [r3, #3]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 f8d4 	bl	80073fc <RTC_Bcd2ToByte>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f8cb 	bl	80073fc <RTC_Bcd2ToByte>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	789b      	ldrb	r3, [r3, #2]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f8c2 	bl	80073fc <RTC_Bcd2ToByte>
 8007278:	4603      	mov	r3, r0
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a0d      	ldr	r2, [pc, #52]	; (80072d0 <HAL_RTC_WaitForSynchro+0x44>)
 800729a:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 800729c:	f7fb ffa4 	bl	80031e8 <HAL_GetTick>
 80072a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80072a2:	e009      	b.n	80072b8 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072a4:	f7fb ffa0 	bl	80031e8 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b2:	d901      	bls.n	80072b8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e007      	b.n	80072c8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0ee      	beq.n	80072a4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	0001005c 	.word	0x0001005c

080072d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d123      	bne.n	8007336 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80072fe:	f7fb ff73 	bl	80031e8 <HAL_GetTick>
 8007302:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007304:	e00d      	b.n	8007322 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007306:	f7fb ff6f 	bl	80031e8 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007314:	d905      	bls.n	8007322 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2203      	movs	r2, #3
 800731e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <RTC_EnterInitMode+0x62>
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d1e7      	bne.n	8007306 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800734c:	4b1a      	ldr	r3, [pc, #104]	; (80073b8 <RTC_ExitInitMode+0x78>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <RTC_ExitInitMode+0x78>)
 8007352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007356:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <RTC_ExitInitMode+0x78>)
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff ff91 	bl	800728c <HAL_RTC_WaitForSynchro>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01e      	beq.n	80073ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2203      	movs	r2, #3
 8007374:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	e017      	b.n	80073ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800737e:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <RTC_ExitInitMode+0x78>)
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <RTC_ExitInitMode+0x78>)
 8007384:	f023 0320 	bic.w	r3, r3, #32
 8007388:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff ff7e 	bl	800728c <HAL_RTC_WaitForSynchro>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2203      	movs	r2, #3
 800739a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <RTC_ExitInitMode+0x78>)
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	4a04      	ldr	r2, [pc, #16]	; (80073b8 <RTC_ExitInitMode+0x78>)
 80073a8:	f043 0320 	orr.w	r3, r3, #32
 80073ac:	6193      	str	r3, [r2, #24]
  }

  return status;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40002800 	.word	0x40002800

080073bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80073ce:	e005      	b.n	80073dc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	3b0a      	subs	r3, #10
 80073da:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80073dc:	7afb      	ldrb	r3, [r7, #11]
 80073de:	2b09      	cmp	r3, #9
 80073e0:	d8f6      	bhi.n	80073d0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b2db      	uxtb	r3, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	0092      	lsls	r2, r2, #2
 8007410:	4413      	add	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	b2da      	uxtb	r2, r3
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	4413      	add	r3, r2
 8007422:	b2db      	uxtb	r3, r3
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e095      	b.n	800756e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d108      	bne.n	800745c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007452:	d009      	beq.n	8007468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	61da      	str	r2, [r3, #28]
 800745a:	e005      	b.n	8007468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fb f984 	bl	8002790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074a8:	d902      	bls.n	80074b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	e002      	b.n	80074b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074be:	d007      	beq.n	80074d0 <HAL_SPI_Init+0xa0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074c8:	d002      	beq.n	80074d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	ea42 0103 	orr.w	r1, r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 0204 	and.w	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800754c:	ea42 0103 	orr.w	r1, r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_SPI_Transmit+0x22>
 8007594:	2302      	movs	r3, #2
 8007596:	e15f      	b.n	8007858 <HAL_SPI_Transmit+0x2e2>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075a0:	f7fb fe22 	bl	80031e8 <HAL_GetTick>
 80075a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d002      	beq.n	80075bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
 80075b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075ba:	e148      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_SPI_Transmit+0x52>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075cc:	e13f      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007618:	d10f      	bne.n	800763a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007628:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007638:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d007      	beq.n	8007658 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007660:	d94f      	bls.n	8007702 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0xfa>
 800766a:	8afb      	ldrh	r3, [r7, #22]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d142      	bne.n	80076f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007694:	e02f      	b.n	80076f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d112      	bne.n	80076ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	881a      	ldrh	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	1c9a      	adds	r2, r3, #2
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076c8:	e015      	b.n	80076f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ca:	f7fb fd8d 	bl	80031e8 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d803      	bhi.n	80076e2 <HAL_SPI_Transmit+0x16c>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d102      	bne.n	80076e8 <HAL_SPI_Transmit+0x172>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80076f4:	e0ab      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ca      	bne.n	8007696 <HAL_SPI_Transmit+0x120>
 8007700:	e080      	b.n	8007804 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_Transmit+0x19a>
 800770a:	8afb      	ldrh	r3, [r7, #22]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d174      	bne.n	80077fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d912      	bls.n	8007740 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	881a      	ldrh	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	1c9a      	adds	r2, r3, #2
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b02      	subs	r3, #2
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800773e:	e05c      	b.n	80077fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007766:	e048      	b.n	80077fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d12b      	bne.n	80077ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d912      	bls.n	80077a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	881a      	ldrh	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	1c9a      	adds	r2, r3, #2
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b02      	subs	r3, #2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077a4:	e029      	b.n	80077fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	7812      	ldrb	r2, [r2, #0]
 80077b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077cc:	e015      	b.n	80077fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ce:	f7fb fd0b 	bl	80031e8 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d803      	bhi.n	80077e6 <HAL_SPI_Transmit+0x270>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d102      	bne.n	80077ec <HAL_SPI_Transmit+0x276>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80077f8:	e029      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1b1      	bne.n	8007768 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fcf9 	bl	8008200 <SPI_EndRxTxTransaction>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	613b      	str	r3, [r7, #16]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e003      	b.n	800784e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007856:	7ffb      	ldrb	r3, [r7, #31]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d002      	beq.n	8007886 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007880:	2302      	movs	r3, #2
 8007882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007884:	e11a      	b.n	8007abc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800788e:	d112      	bne.n	80078b6 <HAL_SPI_Receive+0x56>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10e      	bne.n	80078b6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2204      	movs	r2, #4
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4613      	mov	r3, r2
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f90e 	bl	8007ace <HAL_SPI_TransmitReceive>
 80078b2:	4603      	mov	r3, r0
 80078b4:	e107      	b.n	8007ac6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_SPI_Receive+0x64>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e100      	b.n	8007ac6 <HAL_SPI_Receive+0x266>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078cc:	f7fb fc8c 	bl	80031e8 <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_SPI_Receive+0x7e>
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078e2:	e0eb      	b.n	8007abc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2204      	movs	r2, #4
 80078e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	88fa      	ldrh	r2, [r7, #6]
 80078fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800792e:	d908      	bls.n	8007942 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800793e:	605a      	str	r2, [r3, #4]
 8007940:	e007      	b.n	8007952 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007950:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795a:	d10f      	bne.n	800797c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800797a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d007      	beq.n	800799a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007998:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079a2:	d86f      	bhi.n	8007a84 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079a4:	e034      	b.n	8007a10 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d117      	bne.n	80079e4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f103 020c 	add.w	r2, r3, #12
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	7812      	ldrb	r2, [r2, #0]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80079e2:	e015      	b.n	8007a10 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e4:	f7fb fc00 	bl	80031e8 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d803      	bhi.n	80079fc <HAL_SPI_Receive+0x19c>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d102      	bne.n	8007a02 <HAL_SPI_Receive+0x1a2>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007a0e:	e055      	b.n	8007abc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1c4      	bne.n	80079a6 <HAL_SPI_Receive+0x146>
 8007a1c:	e038      	b.n	8007a90 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d115      	bne.n	8007a58 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	b292      	uxth	r2, r2
 8007a38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	1c9a      	adds	r2, r3, #2
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007a56:	e015      	b.n	8007a84 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a58:	f7fb fbc6 	bl	80031e8 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d803      	bhi.n	8007a70 <HAL_SPI_Receive+0x210>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d102      	bne.n	8007a76 <HAL_SPI_Receive+0x216>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007a82:	e01b      	b.n	8007abc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1c6      	bne.n	8007a1e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fb5b 	bl	8008150 <SPI_EndRxTransaction>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
 8007ab2:	e003      	b.n	8007abc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b08a      	sub	sp, #40	; 0x28
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007adc:	2301      	movs	r3, #1
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x26>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e20a      	b.n	8007f0a <HAL_SPI_TransmitReceive+0x43c>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007afc:	f7fb fb74 	bl	80031e8 <HAL_GetTick>
 8007b00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b10:	887b      	ldrh	r3, [r7, #2]
 8007b12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b14:	887b      	ldrh	r3, [r7, #2]
 8007b16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b18:	7efb      	ldrb	r3, [r7, #27]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d00e      	beq.n	8007b3c <HAL_SPI_TransmitReceive+0x6e>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b24:	d106      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x66>
 8007b2e:	7efb      	ldrb	r3, [r7, #27]
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d003      	beq.n	8007b3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007b34:	2302      	movs	r3, #2
 8007b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007b3a:	e1e0      	b.n	8007efe <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x80>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x80>
 8007b48:	887b      	ldrh	r3, [r7, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007b54:	e1d3      	b.n	8007efe <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d003      	beq.n	8007b6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2205      	movs	r2, #5
 8007b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	887a      	ldrh	r2, [r7, #2]
 8007b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	887a      	ldrh	r2, [r7, #2]
 8007b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	887a      	ldrh	r2, [r7, #2]
 8007b90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	887a      	ldrh	r2, [r7, #2]
 8007b96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bac:	d802      	bhi.n	8007bb4 <HAL_SPI_TransmitReceive+0xe6>
 8007bae:	8a3b      	ldrh	r3, [r7, #16]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d908      	bls.n	8007bc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	e007      	b.n	8007bd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	d007      	beq.n	8007bf4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bfc:	f240 8081 	bls.w	8007d02 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x140>
 8007c08:	8a7b      	ldrh	r3, [r7, #18]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d16d      	bne.n	8007cea <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	881a      	ldrh	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	1c9a      	adds	r2, r3, #2
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c32:	e05a      	b.n	8007cea <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d11b      	bne.n	8007c7a <HAL_SPI_TransmitReceive+0x1ac>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d016      	beq.n	8007c7a <HAL_SPI_TransmitReceive+0x1ac>
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d113      	bne.n	8007c7a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d11c      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x1f4>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	b292      	uxth	r2, r2
 8007ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	1c9a      	adds	r2, r3, #2
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cc2:	f7fb fa91 	bl	80031e8 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d80b      	bhi.n	8007cea <HAL_SPI_TransmitReceive+0x21c>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d007      	beq.n	8007cea <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007ce8:	e109      	b.n	8007efe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d19f      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x166>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d199      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x166>
 8007d00:	e0e3      	b.n	8007eca <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x244>
 8007d0a:	8a7b      	ldrh	r3, [r7, #18]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	f040 80cf 	bne.w	8007eb0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d912      	bls.n	8007d42 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	1c9a      	adds	r2, r3, #2
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b02      	subs	r3, #2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d40:	e0b6      	b.n	8007eb0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	7812      	ldrb	r2, [r2, #0]
 8007d4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d68:	e0a2      	b.n	8007eb0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d134      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x314>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d02f      	beq.n	8007de2 <HAL_SPI_TransmitReceive+0x314>
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d12c      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d912      	bls.n	8007db8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	881a      	ldrh	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	1c9a      	adds	r2, r3, #2
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b02      	subs	r3, #2
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007db6:	e012      	b.n	8007dde <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d148      	bne.n	8007e82 <HAL_SPI_TransmitReceive+0x3b4>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d042      	beq.n	8007e82 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d923      	bls.n	8007e50 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	b292      	uxth	r2, r2
 8007e14:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	1c9a      	adds	r2, r3, #2
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b02      	subs	r3, #2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d81f      	bhi.n	8007e7e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	e016      	b.n	8007e7e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f103 020c 	add.w	r2, r3, #12
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	7812      	ldrb	r2, [r2, #0]
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e82:	f7fb f9b1 	bl	80031e8 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d803      	bhi.n	8007e9a <HAL_SPI_TransmitReceive+0x3cc>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d102      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x3d2>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d107      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007eae:	e026      	b.n	8007efe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f47f af57 	bne.w	8007d6a <HAL_SPI_TransmitReceive+0x29c>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f47f af50 	bne.w	8007d6a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f996 	bl	8008200 <SPI_EndRxTxTransaction>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d005      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ef4:	e003      	b.n	8007efe <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3728      	adds	r7, #40	; 0x28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f24:	f7fb f960 	bl	80031e8 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	4413      	add	r3, r2
 8007f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f34:	f7fb f958 	bl	80031e8 <HAL_GetTick>
 8007f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f3a:	4b39      	ldr	r3, [pc, #228]	; (8008020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	015b      	lsls	r3, r3, #5
 8007f40:	0d1b      	lsrs	r3, r3, #20
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f4a:	e054      	b.n	8007ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d050      	beq.n	8007ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f54:	f7fb f948 	bl	80031e8 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d902      	bls.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d13d      	bne.n	8007fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f82:	d111      	bne.n	8007fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8c:	d004      	beq.n	8007f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f96:	d107      	bne.n	8007fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb0:	d10f      	bne.n	8007fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e017      	b.n	8008016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4013      	ands	r3, r2
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	429a      	cmp	r2, r3
 8008004:	bf0c      	ite	eq
 8008006:	2301      	moveq	r3, #1
 8008008:	2300      	movne	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	429a      	cmp	r2, r3
 8008012:	d19b      	bne.n	8007f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000000 	.word	0x20000000

08008024 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	; 0x28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008036:	f7fb f8d7 	bl	80031e8 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	4413      	add	r3, r2
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008046:	f7fb f8cf 	bl	80031e8 <HAL_GetTick>
 800804a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330c      	adds	r3, #12
 8008052:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008054:	4b3d      	ldr	r3, [pc, #244]	; (800814c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	00da      	lsls	r2, r3, #3
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	0d1b      	lsrs	r3, r3, #20
 8008064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008066:	fb02 f303 	mul.w	r3, r2, r3
 800806a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800806c:	e060      	b.n	8008130 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008074:	d107      	bne.n	8008086 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008084:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d050      	beq.n	8008130 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800808e:	f7fb f8ab 	bl	80031e8 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809a:	429a      	cmp	r2, r3
 800809c:	d902      	bls.n	80080a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d13d      	bne.n	8008120 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080bc:	d111      	bne.n	80080e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c6:	d004      	beq.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d0:	d107      	bne.n	80080e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ea:	d10f      	bne.n	800810c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800810a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e010      	b.n	8008142 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	3b01      	subs	r3, #1
 800812e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4013      	ands	r3, r2
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d196      	bne.n	800806e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3728      	adds	r7, #40	; 0x28
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000000 	.word	0x20000000

08008150 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af02      	add	r7, sp, #8
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008164:	d111      	bne.n	800818a <SPI_EndRxTransaction+0x3a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816e:	d004      	beq.n	800817a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d107      	bne.n	800818a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2200      	movs	r2, #0
 8008192:	2180      	movs	r1, #128	; 0x80
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff febd 	bl	8007f14 <SPI_WaitFlagStateUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d007      	beq.n	80081b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e023      	b.n	80081f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b8:	d11d      	bne.n	80081f6 <SPI_EndRxTransaction+0xa6>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c2:	d004      	beq.n	80081ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081cc:	d113      	bne.n	80081f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff ff22 	bl	8008024 <SPI_WaitFifoStateUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ea:	f043 0220 	orr.w	r2, r3, #32
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e000      	b.n	80081f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff ff03 	bl	8008024 <SPI_WaitFifoStateUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008228:	f043 0220 	orr.w	r2, r3, #32
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e027      	b.n	8008284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	2180      	movs	r1, #128	; 0x80
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fe68 	bl	8007f14 <SPI_WaitFlagStateUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e014      	b.n	8008284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fedc 	bl	8008024 <SPI_WaitFifoStateUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008276:	f043 0220 	orr.w	r2, r3, #32
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e000      	b.n	8008284 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800828c:	b084      	sub	sp, #16
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	f107 0014 	add.w	r0, r7, #20
 800829a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	b004      	add	sp, #16
 80082ac:	4770      	bx	lr

080082ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082be:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80082c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80082e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	43db      	mvns	r3, r3
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	4013      	ands	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800832c:	b084      	sub	sp, #16
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	f107 0014 	add.w	r0, r7, #20
 800833a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	b004      	add	sp, #16
 800836c:	4770      	bx	lr
	...

08008370 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008370:	b480      	push	{r7}
 8008372:	b09d      	sub	sp, #116	; 0x74
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008396:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	78db      	ldrb	r3, [r3, #3]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d81f      	bhi.n	80083e2 <USB_ActivateEndpoint+0x72>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <USB_ActivateEndpoint+0x38>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083eb 	.word	0x080083eb
 80083b4:	080083c7 	.word	0x080083c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80083b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80083c4:	e012      	b.n	80083ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80083c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80083ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80083d2:	e00b      	b.n	80083ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80083d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80083e0:	e004      	b.n	80083ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80083e8:	e000      	b.n	80083ec <USB_ActivateEndpoint+0x7c>
      break;
 80083ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840a:	b29b      	uxth	r3, r3
 800840c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	b21b      	sxth	r3, r3
 800841e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008426:	b21a      	sxth	r2, r3
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b21b      	sxth	r3, r3
 800842e:	4313      	orrs	r3, r2
 8008430:	b21b      	sxth	r3, r3
 8008432:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	441a      	add	r2, r3
 8008440:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008454:	b29b      	uxth	r3, r3
 8008456:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	7b1b      	ldrb	r3, [r3, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f040 8178 	bne.w	8008752 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 8084 	beq.w	8008574 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	61bb      	str	r3, [r7, #24]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	4413      	add	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	00da      	lsls	r2, r3, #3
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	88db      	ldrh	r3, [r3, #6]
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	b29b      	uxth	r3, r3
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	827b      	strh	r3, [r7, #18]
 80084ae:	8a7b      	ldrh	r3, [r7, #18]
 80084b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01b      	beq.n	80084f0 <USB_ActivateEndpoint+0x180>
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	823b      	strh	r3, [r7, #16]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	8a3b      	ldrh	r3, [r7, #16]
 80084dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	78db      	ldrb	r3, [r3, #3]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d020      	beq.n	800853a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850e:	81bb      	strh	r3, [r7, #12]
 8008510:	89bb      	ldrh	r3, [r7, #12]
 8008512:	f083 0320 	eor.w	r3, r3, #32
 8008516:	81bb      	strh	r3, [r7, #12]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	441a      	add	r2, r3
 8008522:	89bb      	ldrh	r3, [r7, #12]
 8008524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800852c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008534:	b29b      	uxth	r3, r3
 8008536:	8013      	strh	r3, [r2, #0]
 8008538:	e2d5      	b.n	8008ae6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008550:	81fb      	strh	r3, [r7, #14]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	89fb      	ldrh	r3, [r7, #14]
 800855e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
 8008572:	e2b8      	b.n	8008ae6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	633b      	str	r3, [r7, #48]	; 0x30
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857e:	b29b      	uxth	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	4413      	add	r3, r2
 8008586:	633b      	str	r3, [r7, #48]	; 0x30
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	00da      	lsls	r2, r3, #3
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	4413      	add	r3, r2
 8008592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	88db      	ldrh	r3, [r3, #6]
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	b29b      	uxth	r3, r3
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	4413      	add	r3, r2
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	00da      	lsls	r2, r3, #3
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	4413      	add	r3, r2
 80085c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b3e      	cmp	r3, #62	; 0x3e
 80085e2:	d91d      	bls.n	8008620 <USB_ActivateEndpoint+0x2b0>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	095b      	lsrs	r3, r3, #5
 80085ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f003 031f 	and.w	r3, r3, #31
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <USB_ActivateEndpoint+0x28e>
 80085f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085fa:	3b01      	subs	r3, #1
 80085fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29a      	uxth	r2, r3
 8008604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008606:	b29b      	uxth	r3, r3
 8008608:	029b      	lsls	r3, r3, #10
 800860a:	b29b      	uxth	r3, r3
 800860c:	4313      	orrs	r3, r2
 800860e:	b29b      	uxth	r3, r3
 8008610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008618:	b29a      	uxth	r2, r3
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	e026      	b.n	800866e <USB_ActivateEndpoint+0x2fe>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <USB_ActivateEndpoint+0x2ce>
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008636:	b29a      	uxth	r2, r3
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	e017      	b.n	800866e <USB_ActivateEndpoint+0x2fe>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	66bb      	str	r3, [r7, #104]	; 0x68
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <USB_ActivateEndpoint+0x2e8>
 8008652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008654:	3301      	adds	r3, #1
 8008656:	66bb      	str	r3, [r7, #104]	; 0x68
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29a      	uxth	r2, r3
 800865e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008660:	b29b      	uxth	r3, r3
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	b29b      	uxth	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b29a      	uxth	r2, r3
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	847b      	strh	r3, [r7, #34]	; 0x22
 800867c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800867e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01b      	beq.n	80086be <USB_ActivateEndpoint+0x34e>
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869c:	843b      	strh	r3, [r7, #32]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	8c3b      	ldrh	r3, [r7, #32]
 80086aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d124      	bne.n	8008710 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086dc:	83bb      	strh	r3, [r7, #28]
 80086de:	8bbb      	ldrh	r3, [r7, #28]
 80086e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086e4:	83bb      	strh	r3, [r7, #28]
 80086e6:	8bbb      	ldrh	r3, [r7, #28]
 80086e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086ec:	83bb      	strh	r3, [r7, #28]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	441a      	add	r2, r3
 80086f8:	8bbb      	ldrh	r3, [r7, #28]
 80086fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870a:	b29b      	uxth	r3, r3
 800870c:	8013      	strh	r3, [r2, #0]
 800870e:	e1ea      	b.n	8008ae6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29b      	uxth	r3, r3
 800871e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	83fb      	strh	r3, [r7, #30]
 8008728:	8bfb      	ldrh	r3, [r7, #30]
 800872a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800872e:	83fb      	strh	r3, [r7, #30]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	8bfb      	ldrh	r3, [r7, #30]
 800873c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	b29b      	uxth	r3, r3
 800874e:	8013      	strh	r3, [r2, #0]
 8008750:	e1c9      	b.n	8008ae6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	78db      	ldrb	r3, [r3, #3]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d11e      	bne.n	8008798 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008770:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800878a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800878e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008792:	b29b      	uxth	r3, r3
 8008794:	8013      	strh	r3, [r2, #0]
 8008796:	e01d      	b.n	80087d4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	441a      	add	r2, r3
 80087bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80087c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087de:	b29b      	uxth	r3, r3
 80087e0:	461a      	mov	r2, r3
 80087e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e4:	4413      	add	r3, r2
 80087e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	00da      	lsls	r2, r3, #3
 80087ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	891b      	ldrh	r3, [r3, #8]
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	b29b      	uxth	r3, r3
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	657b      	str	r3, [r7, #84]	; 0x54
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008812:	b29b      	uxth	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008818:	4413      	add	r3, r2
 800881a:	657b      	str	r3, [r7, #84]	; 0x54
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	00da      	lsls	r2, r3, #3
 8008822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008824:	4413      	add	r3, r2
 8008826:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800882a:	653b      	str	r3, [r7, #80]	; 0x50
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	895b      	ldrh	r3, [r3, #10]
 8008830:	085b      	lsrs	r3, r3, #1
 8008832:	b29b      	uxth	r3, r3
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800883a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8093 	bne.w	800896c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008856:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800885a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01b      	beq.n	800889a <USB_ActivateEndpoint+0x52a>
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008878:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800888a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008896:	b29b      	uxth	r3, r3
 8008898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80088a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01b      	beq.n	80088ea <USB_ActivateEndpoint+0x57a>
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	441a      	add	r2, r3
 80088d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80088d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008900:	873b      	strh	r3, [r7, #56]	; 0x38
 8008902:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008904:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008908:	873b      	strh	r3, [r7, #56]	; 0x38
 800890a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800890c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008910:	873b      	strh	r3, [r7, #56]	; 0x38
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	441a      	add	r2, r3
 800891c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800891e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800892a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892e:	b29b      	uxth	r3, r3
 8008930:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008948:	86fb      	strh	r3, [r7, #54]	; 0x36
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
 800896a:	e0bc      	b.n	8008ae6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800897c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01d      	beq.n	80089c4 <USB_ActivateEndpoint+0x654>
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80089b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80089d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01d      	beq.n	8008a1c <USB_ActivateEndpoint+0x6ac>
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	441a      	add	r2, r3
 8008a04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	78db      	ldrb	r3, [r3, #3]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d024      	beq.n	8008a6e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008a3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008a42:	f083 0320 	eor.w	r3, r3, #32
 8008a46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	441a      	add	r2, r3
 8008a54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]
 8008a6c:	e01d      	b.n	8008aaa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	441a      	add	r2, r3
 8008a92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	441a      	add	r2, r3
 8008ace:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008ae6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3774      	adds	r7, #116	; 0x74
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b08d      	sub	sp, #52	; 0x34
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	7b1b      	ldrb	r3, [r3, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 808e 	bne.w	8008c28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d044      	beq.n	8008b9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	81bb      	strh	r3, [r7, #12]
 8008b22:	89bb      	ldrh	r3, [r7, #12]
 8008b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01b      	beq.n	8008b64 <USB_DeactivateEndpoint+0x6c>
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	817b      	strh	r3, [r7, #10]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	441a      	add	r2, r3
 8008b4e:	897b      	ldrh	r3, [r7, #10]
 8008b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b7a:	813b      	strh	r3, [r7, #8]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	893b      	ldrh	r3, [r7, #8]
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
 8008b9c:	e192      	b.n	8008ec4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	827b      	strh	r3, [r7, #18]
 8008bac:	8a7b      	ldrh	r3, [r7, #18]
 8008bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01b      	beq.n	8008bee <USB_DeactivateEndpoint+0xf6>
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bcc:	823b      	strh	r3, [r7, #16]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	441a      	add	r2, r3
 8008bd8:	8a3b      	ldrh	r3, [r7, #16]
 8008bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c04:	81fb      	strh	r3, [r7, #14]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	441a      	add	r2, r3
 8008c10:	89fb      	ldrh	r3, [r7, #14]
 8008c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8013      	strh	r3, [r2, #0]
 8008c26:	e14d      	b.n	8008ec4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f040 80a5 	bne.w	8008d7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	843b      	strh	r3, [r7, #32]
 8008c40:	8c3b      	ldrh	r3, [r7, #32]
 8008c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01b      	beq.n	8008c82 <USB_DeactivateEndpoint+0x18a>
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c60:	83fb      	strh	r3, [r7, #30]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	8bfb      	ldrh	r3, [r7, #30]
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	83bb      	strh	r3, [r7, #28]
 8008c90:	8bbb      	ldrh	r3, [r7, #28]
 8008c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01b      	beq.n	8008cd2 <USB_DeactivateEndpoint+0x1da>
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb0:	837b      	strh	r3, [r7, #26]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	8b7b      	ldrh	r3, [r7, #26]
 8008cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce8:	833b      	strh	r3, [r7, #24]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	441a      	add	r2, r3
 8008cf4:	8b3b      	ldrh	r3, [r7, #24]
 8008cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d20:	82fb      	strh	r3, [r7, #22]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	441a      	add	r2, r3
 8008d2c:	8afb      	ldrh	r3, [r7, #22]
 8008d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d58:	82bb      	strh	r3, [r7, #20]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	441a      	add	r2, r3
 8008d64:	8abb      	ldrh	r3, [r7, #20]
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]
 8008d7a:	e0a3      	b.n	8008ec4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008d8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01b      	beq.n	8008dcc <USB_DeactivateEndpoint+0x2d4>
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	441a      	add	r2, r3
 8008db6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008dda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01b      	beq.n	8008e1c <USB_DeactivateEndpoint+0x324>
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfa:	853b      	strh	r3, [r7, #40]	; 0x28
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	441a      	add	r2, r3
 8008e06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	441a      	add	r2, r3
 8008e3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	441a      	add	r2, r3
 8008e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	441a      	add	r2, r3
 8008eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3734      	adds	r7, #52	; 0x34
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b0c2      	sub	sp, #264	; 0x108
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ee0:	6018      	str	r0, [r3, #0]
 8008ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	f040 86b7 	bne.w	8009c6c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d908      	bls.n	8008f2c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f2a:	e007      	b.n	8008f3c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	7b1b      	ldrb	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d13a      	bne.n	8008fc2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6959      	ldr	r1, [r3, #20]
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	88da      	ldrh	r2, [r3, #6]
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f72:	6800      	ldr	r0, [r0, #0]
 8008f74:	f001 fcb9 	bl	800a8ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	613b      	str	r3, [r7, #16]
 8008f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	461a      	mov	r2, r3
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	00da      	lsls	r2, r3, #3
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	4413      	add	r3, r2
 8008fae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	f000 be1f 	b.w	8009c00 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	78db      	ldrb	r3, [r3, #3]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f040 8462 	bne.w	8009898 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6a1a      	ldr	r2, [r3, #32]
 8008fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	f240 83df 	bls.w	80097b0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009018:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800901c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	441a      	add	r2, r3
 8009036:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800903a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800903e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009042:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904a:	b29b      	uxth	r3, r3
 800904c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6a1a      	ldr	r2, [r3, #32]
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800906c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 81c7 	beq.w	8009422 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	633b      	str	r3, [r7, #48]	; 0x30
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d177      	bne.n	80091a0 <USB_EPStartXfer+0x2ce>
 80090b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	4413      	add	r3, r2
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80090d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	00da      	lsls	r2, r3, #3
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	4413      	add	r3, r2
 80090e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009100:	2b3e      	cmp	r3, #62	; 0x3e
 8009102:	d921      	bls.n	8009148 <USB_EPStartXfer+0x276>
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800910e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009112:	f003 031f 	and.w	r3, r3, #31
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <USB_EPStartXfer+0x252>
 800911a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800911e:	3b01      	subs	r3, #1
 8009120:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29a      	uxth	r2, r3
 800912a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29b      	uxth	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009140:	b29a      	uxth	r2, r3
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e050      	b.n	80091ea <USB_EPStartXfer+0x318>
 8009148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <USB_EPStartXfer+0x294>
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915e:	b29a      	uxth	r2, r3
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e041      	b.n	80091ea <USB_EPStartXfer+0x318>
 8009166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916a:	085b      	lsrs	r3, r3, #1
 800916c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <USB_EPStartXfer+0x2b4>
 800917c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009180:	3301      	adds	r3, #1
 8009182:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29a      	uxth	r2, r3
 800918c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009190:	b29b      	uxth	r3, r3
 8009192:	029b      	lsls	r3, r3, #10
 8009194:	b29b      	uxth	r3, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	801a      	strh	r2, [r3, #0]
 800919e:	e024      	b.n	80091ea <USB_EPStartXfer+0x318>
 80091a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d11c      	bne.n	80091ea <USB_EPStartXfer+0x318>
 80091b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	4413      	add	r3, r2
 80091c6:	633b      	str	r3, [r7, #48]	; 0x30
 80091c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	00da      	lsls	r2, r3, #3
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	4413      	add	r3, r2
 80091da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	895b      	ldrh	r3, [r3, #10]
 80091f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920a:	b29b      	uxth	r3, r3
 800920c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009210:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009214:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009218:	6800      	ldr	r0, [r0, #0]
 800921a:	f001 fb66 	bl	800a8ea <USB_WritePMA>
            ep->xfer_buff += len;
 800921e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695a      	ldr	r2, [r3, #20]
 800922a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922e:	441a      	add	r2, r3
 8009230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800923c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6a1a      	ldr	r2, [r3, #32]
 8009248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	d90f      	bls.n	8009278 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6a1a      	ldr	r2, [r3, #32]
 8009264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009268:	1ad2      	subs	r2, r2, r3
 800926a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	621a      	str	r2, [r3, #32]
 8009276:	e00e      	b.n	8009296 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800928c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d177      	bne.n	8009396 <USB_EPStartXfer+0x4c4>
 80092a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	461a      	mov	r2, r3
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	4413      	add	r3, r2
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	00da      	lsls	r2, r3, #3
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	4413      	add	r3, r2
 80092dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	2b3e      	cmp	r3, #62	; 0x3e
 80092f8:	d921      	bls.n	800933e <USB_EPStartXfer+0x46c>
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <USB_EPStartXfer+0x448>
 8009310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009314:	3b01      	subs	r3, #1
 8009316:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29a      	uxth	r2, r3
 8009320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009324:	b29b      	uxth	r3, r3
 8009326:	029b      	lsls	r3, r3, #10
 8009328:	b29b      	uxth	r3, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	b29b      	uxth	r3, r3
 800932e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009336:	b29a      	uxth	r2, r3
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	801a      	strh	r2, [r3, #0]
 800933c:	e056      	b.n	80093ec <USB_EPStartXfer+0x51a>
 800933e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <USB_EPStartXfer+0x48a>
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009354:	b29a      	uxth	r2, r3
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	e047      	b.n	80093ec <USB_EPStartXfer+0x51a>
 800935c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <USB_EPStartXfer+0x4aa>
 8009372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009376:	3301      	adds	r3, #1
 8009378:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29a      	uxth	r2, r3
 8009382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009386:	b29b      	uxth	r3, r3
 8009388:	029b      	lsls	r3, r3, #10
 800938a:	b29b      	uxth	r3, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	b29a      	uxth	r2, r3
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e02a      	b.n	80093ec <USB_EPStartXfer+0x51a>
 8009396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	785b      	ldrb	r3, [r3, #1]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d122      	bne.n	80093ec <USB_EPStartXfer+0x51a>
 80093a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	623b      	str	r3, [r7, #32]
 80093b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	4413      	add	r3, r2
 80093c8:	623b      	str	r3, [r7, #32]
 80093ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	00da      	lsls	r2, r3, #3
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	4413      	add	r3, r2
 80093dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093e0:	61fb      	str	r3, [r7, #28]
 80093e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	891b      	ldrh	r3, [r3, #8]
 80093f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6959      	ldr	r1, [r3, #20]
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940c:	b29b      	uxth	r3, r3
 800940e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009412:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009416:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	f001 fa65 	bl	800a8ea <USB_WritePMA>
 8009420:	e3ee      	b.n	8009c00 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d177      	bne.n	8009522 <USB_EPStartXfer+0x650>
 8009432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	64bb      	str	r3, [r7, #72]	; 0x48
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800944c:	b29b      	uxth	r3, r3
 800944e:	461a      	mov	r2, r3
 8009450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009452:	4413      	add	r3, r2
 8009454:	64bb      	str	r3, [r7, #72]	; 0x48
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	00da      	lsls	r2, r3, #3
 8009464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009466:	4413      	add	r3, r2
 8009468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800946c:	647b      	str	r3, [r7, #68]	; 0x44
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b29b      	uxth	r3, r3
 8009474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009478:	b29a      	uxth	r2, r3
 800947a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947c:	801a      	strh	r2, [r3, #0]
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009482:	2b3e      	cmp	r3, #62	; 0x3e
 8009484:	d921      	bls.n	80094ca <USB_EPStartXfer+0x5f8>
 8009486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009494:	f003 031f 	and.w	r3, r3, #31
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <USB_EPStartXfer+0x5d4>
 800949c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094a0:	3b01      	subs	r3, #1
 80094a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80094a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	e056      	b.n	8009578 <USB_EPStartXfer+0x6a6>
 80094ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <USB_EPStartXfer+0x616>
 80094d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	e047      	b.n	8009578 <USB_EPStartXfer+0x6a6>
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80094f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <USB_EPStartXfer+0x636>
 80094fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009502:	3301      	adds	r3, #1
 8009504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29a      	uxth	r2, r3
 800950e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009512:	b29b      	uxth	r3, r3
 8009514:	029b      	lsls	r3, r3, #10
 8009516:	b29b      	uxth	r3, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	b29a      	uxth	r2, r3
 800951c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	e02a      	b.n	8009578 <USB_EPStartXfer+0x6a6>
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d122      	bne.n	8009578 <USB_EPStartXfer+0x6a6>
 8009532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	653b      	str	r3, [r7, #80]	; 0x50
 800953e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800954c:	b29b      	uxth	r3, r3
 800954e:	461a      	mov	r2, r3
 8009550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009552:	4413      	add	r3, r2
 8009554:	653b      	str	r3, [r7, #80]	; 0x50
 8009556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	00da      	lsls	r2, r3, #3
 8009564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009566:	4413      	add	r3, r2
 8009568:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800956c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800956e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009572:	b29a      	uxth	r2, r3
 8009574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009576:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	891b      	ldrh	r3, [r3, #8]
 8009584:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6959      	ldr	r1, [r3, #20]
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009598:	b29b      	uxth	r3, r3
 800959a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800959e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80095a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80095a6:	6800      	ldr	r0, [r0, #0]
 80095a8:	f001 f99f 	bl	800a8ea <USB_WritePMA>
            ep->xfer_buff += len;
 80095ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	695a      	ldr	r2, [r3, #20]
 80095b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095bc:	441a      	add	r2, r3
 80095be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6a1a      	ldr	r2, [r3, #32]
 80095d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d90f      	bls.n	8009606 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80095e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a1a      	ldr	r2, [r3, #32]
 80095f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f6:	1ad2      	subs	r2, r2, r3
 80095f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	621a      	str	r2, [r3, #32]
 8009604:	e00e      	b.n	8009624 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2200      	movs	r2, #0
 8009622:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	643b      	str	r3, [r7, #64]	; 0x40
 8009630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	785b      	ldrb	r3, [r3, #1]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d177      	bne.n	8009730 <USB_EPStartXfer+0x85e>
 8009640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	63bb      	str	r3, [r7, #56]	; 0x38
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965a:	b29b      	uxth	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	4413      	add	r3, r2
 8009662:	63bb      	str	r3, [r7, #56]	; 0x38
 8009664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	00da      	lsls	r2, r3, #3
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	4413      	add	r3, r2
 8009676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009686:	b29a      	uxth	r2, r3
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	801a      	strh	r2, [r3, #0]
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009690:	2b3e      	cmp	r3, #62	; 0x3e
 8009692:	d921      	bls.n	80096d8 <USB_EPStartXfer+0x806>
 8009694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009698:	095b      	lsrs	r3, r3, #5
 800969a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a2:	f003 031f 	and.w	r3, r3, #31
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <USB_EPStartXfer+0x7e2>
 80096aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ae:	3b01      	subs	r3, #1
 80096b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096be:	b29b      	uxth	r3, r3
 80096c0:	029b      	lsls	r3, r3, #10
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	4313      	orrs	r3, r2
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	e050      	b.n	800977a <USB_EPStartXfer+0x8a8>
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <USB_EPStartXfer+0x824>
 80096e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	e041      	b.n	800977a <USB_EPStartXfer+0x8a8>
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <USB_EPStartXfer+0x844>
 800970c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009710:	3301      	adds	r3, #1
 8009712:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29a      	uxth	r2, r3
 800971c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009720:	b29b      	uxth	r3, r3
 8009722:	029b      	lsls	r3, r3, #10
 8009724:	b29b      	uxth	r3, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	e024      	b.n	800977a <USB_EPStartXfer+0x8a8>
 8009730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d11c      	bne.n	800977a <USB_EPStartXfer+0x8a8>
 8009740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009744:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974e:	b29b      	uxth	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009754:	4413      	add	r3, r2
 8009756:	643b      	str	r3, [r7, #64]	; 0x40
 8009758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	00da      	lsls	r2, r3, #3
 8009766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009768:	4413      	add	r3, r2
 800976a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009774:	b29a      	uxth	r2, r3
 8009776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009778:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800977a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	895b      	ldrh	r3, [r3, #10]
 8009786:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800978a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6959      	ldr	r1, [r3, #20]
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979a:	b29b      	uxth	r3, r3
 800979c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80097a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80097a8:	6800      	ldr	r0, [r0, #0]
 80097aa:	f001 f89e 	bl	800a8ea <USB_WritePMA>
 80097ae:	e227      	b.n	8009c00 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80097b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80097c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80097e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	441a      	add	r2, r3
 8009804:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800980c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009818:	b29b      	uxth	r3, r3
 800981a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800981c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009836:	b29b      	uxth	r3, r3
 8009838:	461a      	mov	r2, r3
 800983a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800983c:	4413      	add	r3, r2
 800983e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	00da      	lsls	r2, r3, #3
 800984e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009850:	4413      	add	r3, r2
 8009852:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009856:	65bb      	str	r3, [r7, #88]	; 0x58
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985c:	b29a      	uxth	r2, r3
 800985e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009860:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	891b      	ldrh	r3, [r3, #8]
 800986e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6959      	ldr	r1, [r3, #20]
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009882:	b29b      	uxth	r3, r3
 8009884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009888:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800988c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009890:	6800      	ldr	r0, [r0, #0]
 8009892:	f001 f82a 	bl	800a8ea <USB_WritePMA>
 8009896:	e1b3      	b.n	8009c00 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6a1a      	ldr	r2, [r3, #32]
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a8:	1ad2      	subs	r2, r2, r3
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80c6 	beq.w	8009a6a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	673b      	str	r3, [r7, #112]	; 0x70
 80098ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d177      	bne.n	80099ea <USB_EPStartXfer+0xb18>
 80098fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	66bb      	str	r3, [r7, #104]	; 0x68
 8009906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009914:	b29b      	uxth	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800991a:	4413      	add	r3, r2
 800991c:	66bb      	str	r3, [r7, #104]	; 0x68
 800991e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	00da      	lsls	r2, r3, #3
 800992c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800992e:	4413      	add	r3, r2
 8009930:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009934:	667b      	str	r3, [r7, #100]	; 0x64
 8009936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009940:	b29a      	uxth	r2, r3
 8009942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009944:	801a      	strh	r2, [r3, #0]
 8009946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994a:	2b3e      	cmp	r3, #62	; 0x3e
 800994c:	d921      	bls.n	8009992 <USB_EPStartXfer+0xac0>
 800994e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	2b00      	cmp	r3, #0
 8009962:	d104      	bne.n	800996e <USB_EPStartXfer+0xa9c>
 8009964:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009968:	3b01      	subs	r3, #1
 800996a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800996e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b29a      	uxth	r2, r3
 8009974:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009978:	b29b      	uxth	r3, r3
 800997a:	029b      	lsls	r3, r3, #10
 800997c:	b29b      	uxth	r3, r3
 800997e:	4313      	orrs	r3, r2
 8009980:	b29b      	uxth	r3, r3
 8009982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998a:	b29a      	uxth	r2, r3
 800998c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800998e:	801a      	strh	r2, [r3, #0]
 8009990:	e050      	b.n	8009a34 <USB_EPStartXfer+0xb62>
 8009992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <USB_EPStartXfer+0xade>
 800999a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ac:	801a      	strh	r2, [r3, #0]
 80099ae:	e041      	b.n	8009a34 <USB_EPStartXfer+0xb62>
 80099b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80099ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <USB_EPStartXfer+0xafe>
 80099c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80099ca:	3301      	adds	r3, #1
 80099cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80099d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80099da:	b29b      	uxth	r3, r3
 80099dc:	029b      	lsls	r3, r3, #10
 80099de:	b29b      	uxth	r3, r3
 80099e0:	4313      	orrs	r3, r2
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	e024      	b.n	8009a34 <USB_EPStartXfer+0xb62>
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d11c      	bne.n	8009a34 <USB_EPStartXfer+0xb62>
 80099fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a0e:	4413      	add	r3, r2
 8009a10:	673b      	str	r3, [r7, #112]	; 0x70
 8009a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	00da      	lsls	r2, r3, #3
 8009a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a22:	4413      	add	r3, r2
 8009a24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	895b      	ldrh	r3, [r3, #10]
 8009a40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6959      	ldr	r1, [r3, #20]
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a62:	6800      	ldr	r0, [r0, #0]
 8009a64:	f000 ff41 	bl	800a8ea <USB_WritePMA>
 8009a68:	e0ca      	b.n	8009c00 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d177      	bne.n	8009b6a <USB_EPStartXfer+0xc98>
 8009a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a9a:	4413      	add	r3, r2
 8009a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	00da      	lsls	r2, r3, #3
 8009aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009aae:	4413      	add	r3, r2
 8009ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aca:	2b3e      	cmp	r3, #62	; 0x3e
 8009acc:	d921      	bls.n	8009b12 <USB_EPStartXfer+0xc40>
 8009ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <USB_EPStartXfer+0xc1c>
 8009ae4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	029b      	lsls	r3, r3, #10
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	4313      	orrs	r3, r2
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	e05c      	b.n	8009bcc <USB_EPStartXfer+0xcfa>
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <USB_EPStartXfer+0xc5e>
 8009b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b2c:	801a      	strh	r2, [r3, #0]
 8009b2e:	e04d      	b.n	8009bcc <USB_EPStartXfer+0xcfa>
 8009b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b34:	085b      	lsrs	r3, r3, #1
 8009b36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d004      	beq.n	8009b50 <USB_EPStartXfer+0xc7e>
 8009b46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	029b      	lsls	r3, r3, #10
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	4313      	orrs	r3, r2
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b66:	801a      	strh	r2, [r3, #0]
 8009b68:	e030      	b.n	8009bcc <USB_EPStartXfer+0xcfa>
 8009b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d128      	bne.n	8009bcc <USB_EPStartXfer+0xcfa>
 8009b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	891b      	ldrh	r3, [r3, #8]
 8009bd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6959      	ldr	r1, [r3, #20]
 8009be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009bf2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009bf6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bfa:	6800      	ldr	r0, [r0, #0]
 8009bfc:	f000 fe75 	bl	800a8ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c26:	817b      	strh	r3, [r7, #10]
 8009c28:	897b      	ldrh	r3, [r7, #10]
 8009c2a:	f083 0310 	eor.w	r3, r3, #16
 8009c2e:	817b      	strh	r3, [r7, #10]
 8009c30:	897b      	ldrh	r3, [r7, #10]
 8009c32:	f083 0320 	eor.w	r3, r3, #32
 8009c36:	817b      	strh	r3, [r7, #10]
 8009c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	441a      	add	r2, r3
 8009c52:	897b      	ldrh	r3, [r7, #10]
 8009c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	8013      	strh	r3, [r2, #0]
 8009c68:	f000 bcde 	b.w	800a628 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	7b1b      	ldrb	r3, [r3, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f040 80bb 	bne.w	8009df4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699a      	ldr	r2, [r3, #24]
 8009c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d917      	bls.n	8009cca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cba:	1ad2      	subs	r2, r2, r3
 8009cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	619a      	str	r2, [r3, #24]
 8009cc8:	e00e      	b.n	8009ce8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	00da      	lsls	r2, r3, #3
 8009d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d24:	4413      	add	r3, r2
 8009d26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d46:	2b3e      	cmp	r3, #62	; 0x3e
 8009d48:	d924      	bls.n	8009d94 <USB_EPStartXfer+0xec2>
 8009d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d58:	f003 031f 	and.w	r3, r3, #31
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d104      	bne.n	8009d6a <USB_EPStartXfer+0xe98>
 8009d60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d64:	3b01      	subs	r3, #1
 8009d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d6e:	881b      	ldrh	r3, [r3, #0]
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	029b      	lsls	r3, r3, #10
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d8e:	801a      	strh	r2, [r3, #0]
 8009d90:	f000 bc10 	b.w	800a5b4 <USB_EPStartXfer+0x16e2>
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10c      	bne.n	8009db6 <USB_EPStartXfer+0xee4>
 8009d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	e3fe      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
 8009db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d004      	beq.n	8009dd6 <USB_EPStartXfer+0xf04>
 8009dcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	029b      	lsls	r3, r3, #10
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	4313      	orrs	r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	e3df      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	78db      	ldrb	r3, [r3, #3]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f040 8218 	bne.w	800a236 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f040 809d 	bne.w	8009f52 <USB_EPStartXfer+0x1080>
 8009e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	00da      	lsls	r2, r3, #3
 8009e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e54:	4413      	add	r3, r2
 8009e56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009e80:	d92b      	bls.n	8009eda <USB_EPStartXfer+0x1008>
 8009e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	095b      	lsrs	r3, r3, #5
 8009e90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 031f 	and.w	r3, r3, #31
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d104      	bne.n	8009eb2 <USB_EPStartXfer+0xfe0>
 8009ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eac:	3b01      	subs	r3, #1
 8009eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	029b      	lsls	r3, r3, #10
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	e070      	b.n	8009fbc <USB_EPStartXfer+0x10ea>
 8009eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10c      	bne.n	8009f04 <USB_EPStartXfer+0x1032>
 8009eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	e05b      	b.n	8009fbc <USB_EPStartXfer+0x10ea>
 8009f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	085b      	lsrs	r3, r3, #1
 8009f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d004      	beq.n	8009f34 <USB_EPStartXfer+0x1062>
 8009f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	029b      	lsls	r3, r3, #10
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	4313      	orrs	r3, r2
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f4e:	801a      	strh	r2, [r3, #0]
 8009f50:	e034      	b.n	8009fbc <USB_EPStartXfer+0x10ea>
 8009f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d12c      	bne.n	8009fbc <USB_EPStartXfer+0x10ea>
 8009f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	461a      	mov	r2, r3
 8009f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f86:	4413      	add	r3, r2
 8009f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	00da      	lsls	r2, r3, #3
 8009f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fba:	801a      	strh	r2, [r3, #0]
 8009fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f040 809d 	bne.w	800a116 <USB_EPStartXfer+0x1244>
 8009fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a000:	4413      	add	r3, r2
 800a002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	00da      	lsls	r2, r3, #3
 800a014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a018:	4413      	add	r3, r2
 800a01a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a01e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a02e:	b29a      	uxth	r2, r3
 800a030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b3e      	cmp	r3, #62	; 0x3e
 800a044:	d92b      	bls.n	800a09e <USB_EPStartXfer+0x11cc>
 800a046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	f003 031f 	and.w	r3, r3, #31
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d104      	bne.n	800a076 <USB_EPStartXfer+0x11a4>
 800a06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a070:	3b01      	subs	r3, #1
 800a072:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a076:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a082:	b29b      	uxth	r3, r3
 800a084:	029b      	lsls	r3, r3, #10
 800a086:	b29b      	uxth	r3, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a094:	b29a      	uxth	r2, r3
 800a096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a09a:	801a      	strh	r2, [r3, #0]
 800a09c:	e069      	b.n	800a172 <USB_EPStartXfer+0x12a0>
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10c      	bne.n	800a0c8 <USB_EPStartXfer+0x11f6>
 800a0ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0c4:	801a      	strh	r2, [r3, #0]
 800a0c6:	e054      	b.n	800a172 <USB_EPStartXfer+0x12a0>
 800a0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	085b      	lsrs	r3, r3, #1
 800a0d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d004      	beq.n	800a0f8 <USB_EPStartXfer+0x1226>
 800a0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a104:	b29b      	uxth	r3, r3
 800a106:	029b      	lsls	r3, r3, #10
 800a108:	b29b      	uxth	r3, r3
 800a10a:	4313      	orrs	r3, r2
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	e02d      	b.n	800a172 <USB_EPStartXfer+0x12a0>
 800a116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	785b      	ldrb	r3, [r3, #1]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d125      	bne.n	800a172 <USB_EPStartXfer+0x12a0>
 800a126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a134:	b29b      	uxth	r3, r3
 800a136:	461a      	mov	r2, r3
 800a138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a13c:	4413      	add	r3, r2
 800a13e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	00da      	lsls	r2, r3, #3
 800a150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a154:	4413      	add	r3, r2
 800a156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a15a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a170:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 8218 	beq.w	800a5b4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <USB_EPStartXfer+0x12ea>
 800a1b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10d      	bne.n	800a1d8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f040 81f5 	bne.w	800a5b4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f040 81ee 	bne.w	800a5b4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fe:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	441a      	add	r2, r3
 800a21c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a22c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a230:	b29b      	uxth	r3, r3
 800a232:	8013      	strh	r3, [r2, #0]
 800a234:	e1be      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	78db      	ldrb	r3, [r3, #3]
 800a242:	2b01      	cmp	r3, #1
 800a244:	f040 81b4 	bne.w	800a5b0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	699a      	ldr	r2, [r3, #24]
 800a254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	429a      	cmp	r2, r3
 800a262:	d917      	bls.n	800a294 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	699a      	ldr	r2, [r3, #24]
 800a280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a284:	1ad2      	subs	r2, r2, r3
 800a286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	619a      	str	r2, [r3, #24]
 800a292:	e00e      	b.n	800a2b2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 8085 	bne.w	800a3ce <USB_EPStartXfer+0x14fc>
 800a2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	00da      	lsls	r2, r3, #3
 800a2fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a300:	4413      	add	r3, r2
 800a302:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a30a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a316:	b29a      	uxth	r2, r3
 800a318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a31c:	801a      	strh	r2, [r3, #0]
 800a31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a322:	2b3e      	cmp	r3, #62	; 0x3e
 800a324:	d923      	bls.n	800a36e <USB_EPStartXfer+0x149c>
 800a326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a334:	f003 031f 	and.w	r3, r3, #31
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d104      	bne.n	800a346 <USB_EPStartXfer+0x1474>
 800a33c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a340:	3b01      	subs	r3, #1
 800a342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a352:	b29b      	uxth	r3, r3
 800a354:	029b      	lsls	r3, r3, #10
 800a356:	b29b      	uxth	r3, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a364:	b29a      	uxth	r2, r3
 800a366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a36a:	801a      	strh	r2, [r3, #0]
 800a36c:	e060      	b.n	800a430 <USB_EPStartXfer+0x155e>
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10c      	bne.n	800a390 <USB_EPStartXfer+0x14be>
 800a376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a386:	b29a      	uxth	r2, r3
 800a388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a38c:	801a      	strh	r2, [r3, #0]
 800a38e:	e04f      	b.n	800a430 <USB_EPStartXfer+0x155e>
 800a390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a394:	085b      	lsrs	r3, r3, #1
 800a396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <USB_EPStartXfer+0x14de>
 800a3a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	029b      	lsls	r3, r3, #10
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3ca:	801a      	strh	r2, [r3, #0]
 800a3cc:	e030      	b.n	800a430 <USB_EPStartXfer+0x155e>
 800a3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	785b      	ldrb	r3, [r3, #1]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d128      	bne.n	800a430 <USB_EPStartXfer+0x155e>
 800a3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a402:	4413      	add	r3, r2
 800a404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	00da      	lsls	r2, r3, #3
 800a416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a41a:	4413      	add	r3, r2
 800a41c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a428:	b29a      	uxth	r2, r3
 800a42a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a42e:	801a      	strh	r2, [r3, #0]
 800a430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 8085 	bne.w	800a55a <USB_EPStartXfer+0x1688>
 800a450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	461a      	mov	r2, r3
 800a470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a474:	4413      	add	r3, r2
 800a476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	00da      	lsls	r2, r3, #3
 800a488:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a48c:	4413      	add	r3, r2
 800a48e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4a8:	801a      	strh	r2, [r3, #0]
 800a4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a4b0:	d923      	bls.n	800a4fa <USB_EPStartXfer+0x1628>
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b6:	095b      	lsrs	r3, r3, #5
 800a4b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c0:	f003 031f 	and.w	r3, r3, #31
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d104      	bne.n	800a4d2 <USB_EPStartXfer+0x1600>
 800a4c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	029b      	lsls	r3, r3, #10
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4f6:	801a      	strh	r2, [r3, #0]
 800a4f8:	e05c      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10c      	bne.n	800a51c <USB_EPStartXfer+0x164a>
 800a502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a50e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a512:	b29a      	uxth	r2, r3
 800a514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a518:	801a      	strh	r2, [r3, #0]
 800a51a:	e04b      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a520:	085b      	lsrs	r3, r3, #1
 800a522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d004      	beq.n	800a53c <USB_EPStartXfer+0x166a>
 800a532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a536:	3301      	adds	r3, #1
 800a538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a53c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	b29a      	uxth	r2, r3
 800a544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a548:	b29b      	uxth	r3, r3
 800a54a:	029b      	lsls	r3, r3, #10
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4313      	orrs	r3, r2
 800a550:	b29a      	uxth	r2, r3
 800a552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a556:	801a      	strh	r2, [r3, #0]
 800a558:	e02c      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
 800a55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	785b      	ldrb	r3, [r3, #1]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d124      	bne.n	800a5b4 <USB_EPStartXfer+0x16e2>
 800a56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a578:	b29b      	uxth	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a580:	4413      	add	r3, r2
 800a582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	00da      	lsls	r2, r3, #3
 800a594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a598:	4413      	add	r3, r2
 800a59a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a59e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	e001      	b.n	800a5b4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e03a      	b.n	800a62a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a5de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a5e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a5ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a5ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	441a      	add	r2, r3
 800a610:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a61c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a624:	b29b      	uxth	r3, r3
 800a626:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	785b      	ldrb	r3, [r3, #1]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d020      	beq.n	800a688 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	b29b      	uxth	r3, r3
 800a654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a65c:	81bb      	strh	r3, [r7, #12]
 800a65e:	89bb      	ldrh	r3, [r7, #12]
 800a660:	f083 0310 	eor.w	r3, r3, #16
 800a664:	81bb      	strh	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	441a      	add	r2, r3
 800a670:	89bb      	ldrh	r3, [r7, #12]
 800a672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a67a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	b29b      	uxth	r3, r3
 800a684:	8013      	strh	r3, [r2, #0]
 800a686:	e01f      	b.n	800a6c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	b29b      	uxth	r3, r3
 800a696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69e:	81fb      	strh	r3, [r7, #14]
 800a6a0:	89fb      	ldrh	r3, [r7, #14]
 800a6a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6a6:	81fb      	strh	r3, [r7, #14]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	441a      	add	r2, r3
 800a6b2:	89fb      	ldrh	r3, [r7, #14]
 800a6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b087      	sub	sp, #28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	7b1b      	ldrb	r3, [r3, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 809d 	bne.w	800a824 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	785b      	ldrb	r3, [r3, #1]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d04c      	beq.n	800a78c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	823b      	strh	r3, [r7, #16]
 800a700:	8a3b      	ldrh	r3, [r7, #16]
 800a702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d01b      	beq.n	800a742 <USB_EPClearStall+0x6c>
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	b29b      	uxth	r3, r3
 800a718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a71c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a720:	81fb      	strh	r3, [r7, #14]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	441a      	add	r2, r3
 800a72c:	89fb      	ldrh	r3, [r7, #14]
 800a72e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a73a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a73e:	b29b      	uxth	r3, r3
 800a740:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	78db      	ldrb	r3, [r3, #3]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d06c      	beq.n	800a824 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a760:	81bb      	strh	r3, [r7, #12]
 800a762:	89bb      	ldrh	r3, [r7, #12]
 800a764:	f083 0320 	eor.w	r3, r3, #32
 800a768:	81bb      	strh	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	441a      	add	r2, r3
 800a774:	89bb      	ldrh	r3, [r7, #12]
 800a776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a77a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a77e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a786:	b29b      	uxth	r3, r3
 800a788:	8013      	strh	r3, [r2, #0]
 800a78a:	e04b      	b.n	800a824 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	82fb      	strh	r3, [r7, #22]
 800a79a:	8afb      	ldrh	r3, [r7, #22]
 800a79c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01b      	beq.n	800a7dc <USB_EPClearStall+0x106>
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ba:	82bb      	strh	r3, [r7, #20]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	441a      	add	r2, r3
 800a7c6:	8abb      	ldrh	r3, [r7, #20]
 800a7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f2:	827b      	strh	r3, [r7, #18]
 800a7f4:	8a7b      	ldrh	r3, [r7, #18]
 800a7f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a7fa:	827b      	strh	r3, [r7, #18]
 800a7fc:	8a7b      	ldrh	r3, [r7, #18]
 800a7fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a802:	827b      	strh	r3, [r7, #18]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	441a      	add	r2, r3
 800a80e:	8a7b      	ldrh	r3, [r7, #18]
 800a810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a820:	b29b      	uxth	r3, r3
 800a822:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	460b      	mov	r3, r1
 800a83c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a83e:	78fb      	ldrb	r3, [r7, #3]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d103      	bne.n	800a84c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2280      	movs	r2, #128	; 0x80
 800a848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a868:	b29b      	uxth	r3, r3
 800a86a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a896:	b29b      	uxth	r3, r3
 800a898:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b08b      	sub	sp, #44	; 0x2c
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	80fb      	strh	r3, [r7, #6]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a900:	88bb      	ldrh	r3, [r7, #4]
 800a902:	3301      	adds	r3, #1
 800a904:	085b      	lsrs	r3, r3, #1
 800a906:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a910:	88fa      	ldrh	r2, [r7, #6]
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a91a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
 800a920:	e01b      	b.n	800a95a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	3301      	adds	r3, #1
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	b21a      	sxth	r2, r3
 800a932:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a936:	4313      	orrs	r3, r2
 800a938:	b21b      	sxth	r3, r3
 800a93a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	8a7a      	ldrh	r2, [r7, #18]
 800a940:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	3302      	adds	r3, #2
 800a946:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	3301      	adds	r3, #1
 800a94c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	3301      	adds	r3, #1
 800a952:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	3b01      	subs	r3, #1
 800a958:	627b      	str	r3, [r7, #36]	; 0x24
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e0      	bne.n	800a922 <USB_WritePMA+0x38>
  }
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	372c      	adds	r7, #44	; 0x2c
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a96e:	b480      	push	{r7}
 800a970:	b08b      	sub	sp, #44	; 0x2c
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	4611      	mov	r1, r2
 800a97a:	461a      	mov	r2, r3
 800a97c:	460b      	mov	r3, r1
 800a97e:	80fb      	strh	r3, [r7, #6]
 800a980:	4613      	mov	r3, r2
 800a982:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a984:	88bb      	ldrh	r3, [r7, #4]
 800a986:	085b      	lsrs	r3, r3, #1
 800a988:	b29b      	uxth	r3, r3
 800a98a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a994:	88fa      	ldrh	r2, [r7, #6]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a99e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a4:	e018      	b.n	800a9d8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	3302      	adds	r3, #2
 800a9b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	0a1b      	lsrs	r3, r3, #8
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e3      	bne.n	800a9a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a9de:	88bb      	ldrh	r3, [r7, #4]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d007      	beq.n	800a9fa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	701a      	strb	r2, [r3, #0]
  }
}
 800a9fa:	bf00      	nop
 800a9fc:	372c      	adds	r7, #44	; 0x2c
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
	...

0800aa08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aa18:	f002 fd0c 	bl	800d434 <USBD_static_malloc>
 800aa1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d109      	bne.n	800aa38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	32b0      	adds	r2, #176	; 0xb0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa34:	2302      	movs	r3, #2
 800aa36:	e0d4      	b.n	800abe2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa38:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f003 fb92 	bl	800e168 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	32b0      	adds	r2, #176	; 0xb0
 800aa4e:	68f9      	ldr	r1, [r7, #12]
 800aa50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32b0      	adds	r2, #176	; 0xb0
 800aa5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7c1b      	ldrb	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d138      	bne.n	800aae2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa70:	4b5e      	ldr	r3, [pc, #376]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aa72:	7819      	ldrb	r1, [r3, #0]
 800aa74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa78:	2202      	movs	r2, #2
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f002 fadc 	bl	800d038 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa80:	4b5a      	ldr	r3, [pc, #360]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	f003 020f 	and.w	r2, r3, #15
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	440b      	add	r3, r1
 800aa94:	3324      	adds	r3, #36	; 0x24
 800aa96:	2201      	movs	r2, #1
 800aa98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa9a:	4b55      	ldr	r3, [pc, #340]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800aa9c:	7819      	ldrb	r1, [r3, #0]
 800aa9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 fac7 	bl	800d038 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aaaa:	4b51      	ldr	r3, [pc, #324]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	f003 020f 	and.w	r2, r3, #15
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aac2:	2201      	movs	r2, #1
 800aac4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aac6:	4b4b      	ldr	r3, [pc, #300]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 020f 	and.w	r2, r3, #15
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	440b      	add	r3, r1
 800aada:	3326      	adds	r3, #38	; 0x26
 800aadc:	2210      	movs	r2, #16
 800aade:	801a      	strh	r2, [r3, #0]
 800aae0:	e035      	b.n	800ab4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aae2:	4b42      	ldr	r3, [pc, #264]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aae4:	7819      	ldrb	r1, [r3, #0]
 800aae6:	2340      	movs	r3, #64	; 0x40
 800aae8:	2202      	movs	r2, #2
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f002 faa4 	bl	800d038 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaf0:	4b3e      	ldr	r3, [pc, #248]	; (800abec <USBD_CDC_Init+0x1e4>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 020f 	and.w	r2, r3, #15
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	3324      	adds	r3, #36	; 0x24
 800ab06:	2201      	movs	r2, #1
 800ab08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab0a:	4b39      	ldr	r3, [pc, #228]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800ab0c:	7819      	ldrb	r1, [r3, #0]
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	2202      	movs	r2, #2
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f002 fa90 	bl	800d038 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab18:	4b35      	ldr	r3, [pc, #212]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab30:	2201      	movs	r2, #1
 800ab32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab34:	4b2f      	ldr	r3, [pc, #188]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 020f 	and.w	r2, r3, #15
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	3326      	adds	r3, #38	; 0x26
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab4e:	4b29      	ldr	r3, [pc, #164]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	2308      	movs	r3, #8
 800ab54:	2203      	movs	r2, #3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f002 fa6e 	bl	800d038 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab5c:	4b25      	ldr	r3, [pc, #148]	; (800abf4 <USBD_CDC_Init+0x1ec>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 020f 	and.w	r2, r3, #15
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	440b      	add	r3, r1
 800ab70:	3324      	adds	r3, #36	; 0x24
 800ab72:	2201      	movs	r2, #1
 800ab74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	33b0      	adds	r3, #176	; 0xb0
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800abac:	2302      	movs	r3, #2
 800abae:	e018      	b.n	800abe2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	7c1b      	ldrb	r3, [r3, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abb8:	4b0d      	ldr	r3, [pc, #52]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800abba:	7819      	ldrb	r1, [r3, #0]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f002 fbb2 	bl	800d330 <USBD_LL_PrepareReceive>
 800abcc:	e008      	b.n	800abe0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abce:	4b08      	ldr	r3, [pc, #32]	; (800abf0 <USBD_CDC_Init+0x1e8>)
 800abd0:	7819      	ldrb	r1, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f002 fba8 	bl	800d330 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20000093 	.word	0x20000093
 800abf0:	20000094 	.word	0x20000094
 800abf4:	20000095 	.word	0x20000095

0800abf8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac04:	4b3a      	ldr	r3, [pc, #232]	; (800acf0 <USBD_CDC_DeInit+0xf8>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f002 fa52 	bl	800d0b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac10:	4b37      	ldr	r3, [pc, #220]	; (800acf0 <USBD_CDC_DeInit+0xf8>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 020f 	and.w	r2, r3, #15
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	440b      	add	r3, r1
 800ac24:	3324      	adds	r3, #36	; 0x24
 800ac26:	2200      	movs	r2, #0
 800ac28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac2a:	4b32      	ldr	r3, [pc, #200]	; (800acf4 <USBD_CDC_DeInit+0xfc>)
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f002 fa3f 	bl	800d0b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac36:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <USBD_CDC_DeInit+0xfc>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	f003 020f 	and.w	r2, r3, #15
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	440b      	add	r3, r1
 800ac4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac4e:	2200      	movs	r2, #0
 800ac50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac52:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <USBD_CDC_DeInit+0x100>)
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f002 fa2b 	bl	800d0b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac5e:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <USBD_CDC_DeInit+0x100>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f003 020f 	and.w	r2, r3, #15
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	440b      	add	r3, r1
 800ac72:	3324      	adds	r3, #36	; 0x24
 800ac74:	2200      	movs	r2, #0
 800ac76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <USBD_CDC_DeInit+0x100>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 020f 	and.w	r2, r3, #15
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3326      	adds	r3, #38	; 0x26
 800ac8e:	2200      	movs	r2, #0
 800ac90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	32b0      	adds	r2, #176	; 0xb0
 800ac9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01f      	beq.n	800ace4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	33b0      	adds	r3, #176	; 0xb0
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	32b0      	adds	r2, #176	; 0xb0
 800acc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f002 fbc2 	bl	800d450 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32b0      	adds	r2, #176	; 0xb0
 800acd6:	2100      	movs	r1, #0
 800acd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20000093 	.word	0x20000093
 800acf4:	20000094 	.word	0x20000094
 800acf8:	20000095 	.word	0x20000095

0800acfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	32b0      	adds	r2, #176	; 0xb0
 800ad10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e0bf      	b.n	800aeac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d050      	beq.n	800adda <USBD_CDC_Setup+0xde>
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	f040 80af 	bne.w	800ae9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	88db      	ldrh	r3, [r3, #6]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d03a      	beq.n	800adbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	b25b      	sxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	da1b      	bge.n	800ad88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	33b0      	adds	r3, #176	; 0xb0
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	88d2      	ldrh	r2, [r2, #6]
 800ad6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	88db      	ldrh	r3, [r3, #6]
 800ad72:	2b07      	cmp	r3, #7
 800ad74:	bf28      	it	cs
 800ad76:	2307      	movcs	r3, #7
 800ad78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	89fa      	ldrh	r2, [r7, #14]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 fd21 	bl	800c7c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad86:	e090      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	785a      	ldrb	r2, [r3, #1]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	88db      	ldrh	r3, [r3, #6]
 800ad96:	2b3f      	cmp	r3, #63	; 0x3f
 800ad98:	d803      	bhi.n	800ada2 <USBD_CDC_Setup+0xa6>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	88db      	ldrh	r3, [r3, #6]
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	e000      	b.n	800ada4 <USBD_CDC_Setup+0xa8>
 800ada2:	2240      	movs	r2, #64	; 0x40
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800adaa:	6939      	ldr	r1, [r7, #16]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800adb2:	461a      	mov	r2, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 fd33 	bl	800c820 <USBD_CtlPrepareRx>
      break;
 800adba:	e076      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	33b0      	adds	r3, #176	; 0xb0
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	7850      	ldrb	r0, [r2, #1]
 800add2:	2200      	movs	r2, #0
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	4798      	blx	r3
      break;
 800add8:	e067      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b0b      	cmp	r3, #11
 800ade0:	d851      	bhi.n	800ae86 <USBD_CDC_Setup+0x18a>
 800ade2:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <USBD_CDC_Setup+0xec>)
 800ade4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade8:	0800ae19 	.word	0x0800ae19
 800adec:	0800ae95 	.word	0x0800ae95
 800adf0:	0800ae87 	.word	0x0800ae87
 800adf4:	0800ae87 	.word	0x0800ae87
 800adf8:	0800ae87 	.word	0x0800ae87
 800adfc:	0800ae87 	.word	0x0800ae87
 800ae00:	0800ae87 	.word	0x0800ae87
 800ae04:	0800ae87 	.word	0x0800ae87
 800ae08:	0800ae87 	.word	0x0800ae87
 800ae0c:	0800ae87 	.word	0x0800ae87
 800ae10:	0800ae43 	.word	0x0800ae43
 800ae14:	0800ae6d 	.word	0x0800ae6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d107      	bne.n	800ae34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae24:	f107 030a 	add.w	r3, r7, #10
 800ae28:	2202      	movs	r2, #2
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f001 fccb 	bl	800c7c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae32:	e032      	b.n	800ae9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fc55 	bl	800c6e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	75fb      	strb	r3, [r7, #23]
          break;
 800ae40:	e02b      	b.n	800ae9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d107      	bne.n	800ae5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae4e:	f107 030d 	add.w	r3, r7, #13
 800ae52:	2201      	movs	r2, #1
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f001 fcb6 	bl	800c7c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae5c:	e01d      	b.n	800ae9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f001 fc40 	bl	800c6e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae66:	2303      	movs	r3, #3
 800ae68:	75fb      	strb	r3, [r7, #23]
          break;
 800ae6a:	e016      	b.n	800ae9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d00f      	beq.n	800ae98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f001 fc33 	bl	800c6e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae80:	2303      	movs	r3, #3
 800ae82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae84:	e008      	b.n	800ae98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 fc2c 	bl	800c6e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	75fb      	strb	r3, [r7, #23]
          break;
 800ae92:	e002      	b.n	800ae9a <USBD_CDC_Setup+0x19e>
          break;
 800ae94:	bf00      	nop
 800ae96:	e008      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>
          break;
 800ae98:	bf00      	nop
      }
      break;
 800ae9a:	e006      	b.n	800aeaa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f001 fc21 	bl	800c6e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800aea4:	2303      	movs	r3, #3
 800aea6:	75fb      	strb	r3, [r7, #23]
      break;
 800aea8:	bf00      	nop
  }

  return (uint8_t)ret;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aec6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	32b0      	adds	r2, #176	; 0xb0
 800aed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e065      	b.n	800afaa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	32b0      	adds	r2, #176	; 0xb0
 800aee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aeee:	78fb      	ldrb	r3, [r7, #3]
 800aef0:	f003 020f 	and.w	r2, r3, #15
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	440b      	add	r3, r1
 800af00:	3318      	adds	r3, #24
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d02f      	beq.n	800af68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	f003 020f 	and.w	r2, r3, #15
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	3318      	adds	r3, #24
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	f003 010f 	and.w	r1, r3, #15
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	460b      	mov	r3, r1
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	440b      	add	r3, r1
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	4403      	add	r3, r0
 800af30:	3338      	adds	r3, #56	; 0x38
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	fbb2 f1f3 	udiv	r1, r2, r3
 800af38:	fb01 f303 	mul.w	r3, r1, r3
 800af3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d112      	bne.n	800af68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af42:	78fb      	ldrb	r3, [r7, #3]
 800af44:	f003 020f 	and.w	r2, r3, #15
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	440b      	add	r3, r1
 800af54:	3318      	adds	r3, #24
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af5a:	78f9      	ldrb	r1, [r7, #3]
 800af5c:	2300      	movs	r3, #0
 800af5e:	2200      	movs	r2, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f002 f9ad 	bl	800d2c0 <USBD_LL_Transmit>
 800af66:	e01f      	b.n	800afa8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	33b0      	adds	r3, #176	; 0xb0
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d010      	beq.n	800afa8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	33b0      	adds	r3, #176	; 0xb0
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	460b      	mov	r3, r1
 800afbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	32b0      	adds	r2, #176	; 0xb0
 800afc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	32b0      	adds	r2, #176	; 0xb0
 800afd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e01a      	b.n	800b01a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f002 f9d9 	bl	800d3a0 <USBD_LL_GetRxDataSize>
 800afee:	4602      	mov	r2, r0
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	33b0      	adds	r3, #176	; 0xb0
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b014:	4611      	mov	r1, r2
 800b016:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	32b0      	adds	r2, #176	; 0xb0
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b040:	2303      	movs	r3, #3
 800b042:	e025      	b.n	800b090 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	33b0      	adds	r3, #176	; 0xb0
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d01a      	beq.n	800b08e <USBD_CDC_EP0_RxReady+0x6c>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d015      	beq.n	800b08e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	33b0      	adds	r3, #176	; 0xb0
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b07a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b082:	b292      	uxth	r2, r2
 800b084:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	22ff      	movs	r2, #255	; 0xff
 800b08a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0a0:	2182      	movs	r1, #130	; 0x82
 800b0a2:	4818      	ldr	r0, [pc, #96]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0a4:	f000 fcbd 	bl	800ba22 <USBD_GetEpDesc>
 800b0a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	4815      	ldr	r0, [pc, #84]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0ae:	f000 fcb8 	bl	800ba22 <USBD_GetEpDesc>
 800b0b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0b4:	2181      	movs	r1, #129	; 0x81
 800b0b6:	4813      	ldr	r0, [pc, #76]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0b8:	f000 fcb3 	bl	800ba22 <USBD_GetEpDesc>
 800b0bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2210      	movs	r2, #16
 800b0c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d006      	beq.n	800b0de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0d8:	711a      	strb	r2, [r3, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d006      	beq.n	800b0f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0ec:	711a      	strb	r2, [r3, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2243      	movs	r2, #67	; 0x43
 800b0f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0f8:	4b02      	ldr	r3, [pc, #8]	; (800b104 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000050 	.word	0x20000050

0800b108 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b110:	2182      	movs	r1, #130	; 0x82
 800b112:	4818      	ldr	r0, [pc, #96]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b114:	f000 fc85 	bl	800ba22 <USBD_GetEpDesc>
 800b118:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b11a:	2101      	movs	r1, #1
 800b11c:	4815      	ldr	r0, [pc, #84]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b11e:	f000 fc80 	bl	800ba22 <USBD_GetEpDesc>
 800b122:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b124:	2181      	movs	r1, #129	; 0x81
 800b126:	4813      	ldr	r0, [pc, #76]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b128:	f000 fc7b 	bl	800ba22 <USBD_GetEpDesc>
 800b12c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2210      	movs	r2, #16
 800b138:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2200      	movs	r2, #0
 800b144:	711a      	strb	r2, [r3, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f042 0202 	orr.w	r2, r2, #2
 800b14c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d006      	beq.n	800b162 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	711a      	strb	r2, [r3, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f042 0202 	orr.w	r2, r2, #2
 800b160:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2243      	movs	r2, #67	; 0x43
 800b166:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000050 	.word	0x20000050

0800b178 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b180:	2182      	movs	r1, #130	; 0x82
 800b182:	4818      	ldr	r0, [pc, #96]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b184:	f000 fc4d 	bl	800ba22 <USBD_GetEpDesc>
 800b188:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b18a:	2101      	movs	r1, #1
 800b18c:	4815      	ldr	r0, [pc, #84]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b18e:	f000 fc48 	bl	800ba22 <USBD_GetEpDesc>
 800b192:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b194:	2181      	movs	r1, #129	; 0x81
 800b196:	4813      	ldr	r0, [pc, #76]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b198:	f000 fc43 	bl	800ba22 <USBD_GetEpDesc>
 800b19c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2210      	movs	r2, #16
 800b1a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b8:	711a      	strb	r2, [r3, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d006      	beq.n	800b1d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1cc:	711a      	strb	r2, [r3, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2243      	movs	r2, #67	; 0x43
 800b1d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1d8:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000050 	.word	0x20000050

0800b1e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	220a      	movs	r2, #10
 800b1f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	; (800b204 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	2000000c 	.word	0x2000000c

0800b208 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	e009      	b.n	800b230 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	33b0      	adds	r3, #176	; 0xb0
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b087      	sub	sp, #28
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	32b0      	adds	r2, #176	; 0xb0
 800b252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b256:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b25e:	2303      	movs	r3, #3
 800b260:	e008      	b.n	800b274 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	32b0      	adds	r2, #176	; 0xb0
 800b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b298:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e004      	b.n	800b2ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
	...

0800b2bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	32b0      	adds	r2, #176	; 0xb0
 800b2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e025      	b.n	800b32e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d11f      	bne.n	800b32c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b2f4:	4b10      	ldr	r3, [pc, #64]	; (800b338 <USBD_CDC_TransmitPacket+0x7c>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4403      	add	r3, r0
 800b30e:	3318      	adds	r3, #24
 800b310:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b312:	4b09      	ldr	r3, [pc, #36]	; (800b338 <USBD_CDC_TransmitPacket+0x7c>)
 800b314:	7819      	ldrb	r1, [r3, #0]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 ffcc 	bl	800d2c0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20000093 	.word	0x20000093

0800b33c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	32b0      	adds	r2, #176	; 0xb0
 800b34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b352:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	32b0      	adds	r2, #176	; 0xb0
 800b35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b366:	2303      	movs	r3, #3
 800b368:	e018      	b.n	800b39c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	7c1b      	ldrb	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10a      	bne.n	800b388 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b372:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <USBD_CDC_ReceivePacket+0x68>)
 800b374:	7819      	ldrb	r1, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b37c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 ffd5 	bl	800d330 <USBD_LL_PrepareReceive>
 800b386:	e008      	b.n	800b39a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b388:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <USBD_CDC_ReceivePacket+0x68>)
 800b38a:	7819      	ldrb	r1, [r3, #0]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b392:	2340      	movs	r3, #64	; 0x40
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 ffcb 	bl	800d330 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20000094 	.word	0x20000094

0800b3a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	e01f      	b.n	800b400 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d003      	beq.n	800b3e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	79fa      	ldrb	r2, [r7, #7]
 800b3f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f001 fd8b 	bl	800cf10 <USBD_LL_Init>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e025      	b.n	800b46c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32ae      	adds	r2, #174	; 0xae
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00f      	beq.n	800b45c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32ae      	adds	r2, #174	; 0xae
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	f107 020e 	add.w	r2, r7, #14
 800b450:	4610      	mov	r0, r2
 800b452:	4798      	blx	r3
 800b454:	4602      	mov	r2, r0
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f001 fda9 	bl	800cfd4 <USBD_LL_Start>
 800b482:	4603      	mov	r3, r0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b494:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b496:	4618      	mov	r0, r3
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d009      	beq.n	800b4d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	78fa      	ldrb	r2, [r7, #3]
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	4798      	blx	r3
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	4798      	blx	r3
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b500:	2303      	movs	r3, #3
 800b502:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f001 f8a6 	bl	800c672 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b534:	461a      	mov	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b542:	f003 031f 	and.w	r3, r3, #31
 800b546:	2b02      	cmp	r3, #2
 800b548:	d01a      	beq.n	800b580 <USBD_LL_SetupStage+0x72>
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d822      	bhi.n	800b594 <USBD_LL_SetupStage+0x86>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <USBD_LL_SetupStage+0x4a>
 800b552:	2b01      	cmp	r3, #1
 800b554:	d00a      	beq.n	800b56c <USBD_LL_SetupStage+0x5e>
 800b556:	e01d      	b.n	800b594 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fad3 	bl	800bb0c <USBD_StdDevReq>
 800b566:	4603      	mov	r3, r0
 800b568:	73fb      	strb	r3, [r7, #15]
      break;
 800b56a:	e020      	b.n	800b5ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fb3b 	bl	800bbf0 <USBD_StdItfReq>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73fb      	strb	r3, [r7, #15]
      break;
 800b57e:	e016      	b.n	800b5ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fb9d 	bl	800bcc8 <USBD_StdEPReq>
 800b58e:	4603      	mov	r3, r0
 800b590:	73fb      	strb	r3, [r7, #15]
      break;
 800b592:	e00c      	b.n	800b5ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b59a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 fdbc 	bl	800d120 <USBD_LL_StallEP>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ac:	bf00      	nop
  }

  return ret;
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d16e      	bne.n	800b6ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b5d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	f040 8098 	bne.w	800b714 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d913      	bls.n	800b618 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	689a      	ldr	r2, [r3, #8]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	1ad2      	subs	r2, r2, r3
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	4293      	cmp	r3, r2
 800b608:	bf28      	it	cs
 800b60a:	4613      	movcs	r3, r2
 800b60c:	461a      	mov	r2, r3
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f001 f922 	bl	800c85a <USBD_CtlContinueRx>
 800b616:	e07d      	b.n	800b714 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b61e:	f003 031f 	and.w	r3, r3, #31
 800b622:	2b02      	cmp	r3, #2
 800b624:	d014      	beq.n	800b650 <USBD_LL_DataOutStage+0x98>
 800b626:	2b02      	cmp	r3, #2
 800b628:	d81d      	bhi.n	800b666 <USBD_LL_DataOutStage+0xae>
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <USBD_LL_DataOutStage+0x7c>
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d003      	beq.n	800b63a <USBD_LL_DataOutStage+0x82>
 800b632:	e018      	b.n	800b666 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	75bb      	strb	r3, [r7, #22]
            break;
 800b638:	e018      	b.n	800b66c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b640:	b2db      	uxtb	r3, r3
 800b642:	4619      	mov	r1, r3
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 f9d2 	bl	800b9ee <USBD_CoreFindIF>
 800b64a:	4603      	mov	r3, r0
 800b64c:	75bb      	strb	r3, [r7, #22]
            break;
 800b64e:	e00d      	b.n	800b66c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 f9d4 	bl	800ba08 <USBD_CoreFindEP>
 800b660:	4603      	mov	r3, r0
 800b662:	75bb      	strb	r3, [r7, #22]
            break;
 800b664:	e002      	b.n	800b66c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b666:	2300      	movs	r3, #0
 800b668:	75bb      	strb	r3, [r7, #22]
            break;
 800b66a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b66c:	7dbb      	ldrb	r3, [r7, #22]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d119      	bne.n	800b6a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d113      	bne.n	800b6a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b67e:	7dba      	ldrb	r2, [r7, #22]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	32ae      	adds	r2, #174	; 0xae
 800b684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00b      	beq.n	800b6a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b68e:	7dba      	ldrb	r2, [r7, #22]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b696:	7dba      	ldrb	r2, [r7, #22]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	32ae      	adds	r2, #174	; 0xae
 800b69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f001 f8e8 	bl	800c87c <USBD_CtlSendStatus>
 800b6ac:	e032      	b.n	800b714 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f000 f9a5 	bl	800ba08 <USBD_CoreFindEP>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6c2:	7dbb      	ldrb	r3, [r7, #22]
 800b6c4:	2bff      	cmp	r3, #255	; 0xff
 800b6c6:	d025      	beq.n	800b714 <USBD_LL_DataOutStage+0x15c>
 800b6c8:	7dbb      	ldrb	r3, [r7, #22]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d122      	bne.n	800b714 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	d117      	bne.n	800b70a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b6da:	7dba      	ldrb	r2, [r7, #22]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	32ae      	adds	r2, #174	; 0xae
 800b6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b6ea:	7dba      	ldrb	r2, [r7, #22]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b6f2:	7dba      	ldrb	r2, [r7, #22]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	32ae      	adds	r2, #174	; 0xae
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	7afa      	ldrb	r2, [r7, #11]
 800b700:	4611      	mov	r1, r2
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	4798      	blx	r3
 800b706:	4603      	mov	r3, r0
 800b708:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	e000      	b.n	800b716 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	460b      	mov	r3, r1
 800b728:	607a      	str	r2, [r7, #4]
 800b72a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b72c:	7afb      	ldrb	r3, [r7, #11]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d16f      	bne.n	800b812 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3314      	adds	r3, #20
 800b736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d15a      	bne.n	800b7f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d914      	bls.n	800b778 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	1ad2      	subs	r2, r2, r3
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	461a      	mov	r2, r3
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f001 f84a 	bl	800c7fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b76a:	2300      	movs	r3, #0
 800b76c:	2200      	movs	r2, #0
 800b76e:	2100      	movs	r1, #0
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f001 fddd 	bl	800d330 <USBD_LL_PrepareReceive>
 800b776:	e03f      	b.n	800b7f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	68da      	ldr	r2, [r3, #12]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	429a      	cmp	r2, r3
 800b782:	d11c      	bne.n	800b7be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d316      	bcc.n	800b7be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d20f      	bcs.n	800b7be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f001 f82b 	bl	800c7fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f001 fdba 	bl	800d330 <USBD_LL_PrepareReceive>
 800b7bc:	e01c      	b.n	800b7f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d10f      	bne.n	800b7ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7ea:	2180      	movs	r1, #128	; 0x80
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f001 fc97 	bl	800d120 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f001 f855 	bl	800c8a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d03a      	beq.n	800b878 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7ff fe42 	bl	800b48c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b810:	e032      	b.n	800b878 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b812:	7afb      	ldrb	r3, [r7, #11]
 800b814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	4619      	mov	r1, r3
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 f8f3 	bl	800ba08 <USBD_CoreFindEP>
 800b822:	4603      	mov	r3, r0
 800b824:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	2bff      	cmp	r3, #255	; 0xff
 800b82a:	d025      	beq.n	800b878 <USBD_LL_DataInStage+0x15a>
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d122      	bne.n	800b878 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d11c      	bne.n	800b878 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b83e:	7dfa      	ldrb	r2, [r7, #23]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	32ae      	adds	r2, #174	; 0xae
 800b844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d014      	beq.n	800b878 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b84e:	7dfa      	ldrb	r2, [r7, #23]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b856:	7dfa      	ldrb	r2, [r7, #23]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	32ae      	adds	r2, #174	; 0xae
 800b85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	7afa      	ldrb	r2, [r7, #11]
 800b864:	4611      	mov	r1, r2
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	4798      	blx	r3
 800b86a:	4603      	mov	r3, r0
 800b86c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b86e:	7dbb      	ldrb	r3, [r7, #22]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b874:	7dbb      	ldrb	r3, [r7, #22]
 800b876:	e000      	b.n	800b87a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d014      	beq.n	800b8e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00e      	beq.n	800b8e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	6852      	ldr	r2, [r2, #4]
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	4611      	mov	r1, r2
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8e8:	2340      	movs	r3, #64	; 0x40
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 fba2 	bl	800d038 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2240      	movs	r2, #64	; 0x40
 800b900:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b904:	2340      	movs	r3, #64	; 0x40
 800b906:	2200      	movs	r2, #0
 800b908:	2180      	movs	r1, #128	; 0x80
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 fb94 	bl	800d038 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2240      	movs	r2, #64	; 0x40
 800b91a:	621a      	str	r2, [r3, #32]

  return ret;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	460b      	mov	r3, r1
 800b930:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	78fa      	ldrb	r2, [r7, #3]
 800b936:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b04      	cmp	r3, #4
 800b958:	d006      	beq.n	800b968 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b960:	b2da      	uxtb	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2204      	movs	r2, #4
 800b96c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d106      	bne.n	800b9a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d110      	bne.n	800b9e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d2:	69db      	ldr	r3, [r3, #28]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d005      	beq.n	800b9e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9de:	69db      	ldr	r3, [r3, #28]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b086      	sub	sp, #24
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	885b      	ldrh	r3, [r3, #2]
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d920      	bls.n	800ba8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ba52:	e013      	b.n	800ba7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba54:	f107 030a 	add.w	r3, r7, #10
 800ba58:	4619      	mov	r1, r3
 800ba5a:	6978      	ldr	r0, [r7, #20]
 800ba5c:	f000 f81b 	bl	800ba96 <USBD_GetNextDesc>
 800ba60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	2b05      	cmp	r3, #5
 800ba68:	d108      	bne.n	800ba7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	789b      	ldrb	r3, [r3, #2]
 800ba72:	78fa      	ldrb	r2, [r7, #3]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d008      	beq.n	800ba8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	897b      	ldrh	r3, [r7, #10]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d8e5      	bhi.n	800ba54 <USBD_GetEpDesc+0x32>
 800ba88:	e000      	b.n	800ba8c <USBD_GetEpDesc+0x6a>
          break;
 800ba8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ba8c:	693b      	ldr	r3, [r7, #16]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b085      	sub	sp, #20
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	881a      	ldrh	r2, [r3, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	b29b      	uxth	r3, r3
 800baae:	4413      	add	r3, r2
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bac2:	68fb      	ldr	r3, [r7, #12]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	3301      	adds	r3, #1
 800bae6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800baee:	8a3b      	ldrh	r3, [r7, #16]
 800baf0:	021b      	lsls	r3, r3, #8
 800baf2:	b21a      	sxth	r2, r3
 800baf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	b21b      	sxth	r3, r3
 800bafc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bafe:	89fb      	ldrh	r3, [r7, #14]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	371c      	adds	r7, #28
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb22:	2b40      	cmp	r3, #64	; 0x40
 800bb24:	d005      	beq.n	800bb32 <USBD_StdDevReq+0x26>
 800bb26:	2b40      	cmp	r3, #64	; 0x40
 800bb28:	d857      	bhi.n	800bbda <USBD_StdDevReq+0xce>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00f      	beq.n	800bb4e <USBD_StdDevReq+0x42>
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d153      	bne.n	800bbda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	32ae      	adds	r2, #174	; 0xae
 800bb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4c:	e04a      	b.n	800bbe4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	785b      	ldrb	r3, [r3, #1]
 800bb52:	2b09      	cmp	r3, #9
 800bb54:	d83b      	bhi.n	800bbce <USBD_StdDevReq+0xc2>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <USBD_StdDevReq+0x50>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bbb1 	.word	0x0800bbb1
 800bb60:	0800bbc5 	.word	0x0800bbc5
 800bb64:	0800bbcf 	.word	0x0800bbcf
 800bb68:	0800bbbb 	.word	0x0800bbbb
 800bb6c:	0800bbcf 	.word	0x0800bbcf
 800bb70:	0800bb8f 	.word	0x0800bb8f
 800bb74:	0800bb85 	.word	0x0800bb85
 800bb78:	0800bbcf 	.word	0x0800bbcf
 800bb7c:	0800bba7 	.word	0x0800bba7
 800bb80:	0800bb99 	.word	0x0800bb99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fa3c 	bl	800c004 <USBD_GetDescriptor>
          break;
 800bb8c:	e024      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fbcb 	bl	800c32c <USBD_SetAddress>
          break;
 800bb96:	e01f      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb98:	6839      	ldr	r1, [r7, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fc0a 	bl	800c3b4 <USBD_SetConfig>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73fb      	strb	r3, [r7, #15]
          break;
 800bba4:	e018      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fcad 	bl	800c508 <USBD_GetConfig>
          break;
 800bbae:	e013      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fcde 	bl	800c574 <USBD_GetStatus>
          break;
 800bbb8:	e00e      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fd0d 	bl	800c5dc <USBD_SetFeature>
          break;
 800bbc2:	e009      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fd31 	bl	800c62e <USBD_ClrFeature>
          break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fd88 	bl	800c6e6 <USBD_CtlError>
          break;
 800bbd6:	bf00      	nop
      }
      break;
 800bbd8:	e004      	b.n	800bbe4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fd82 	bl	800c6e6 <USBD_CtlError>
      break;
 800bbe2:	bf00      	nop
  }

  return ret;
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop

0800bbf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc06:	2b40      	cmp	r3, #64	; 0x40
 800bc08:	d005      	beq.n	800bc16 <USBD_StdItfReq+0x26>
 800bc0a:	2b40      	cmp	r3, #64	; 0x40
 800bc0c:	d852      	bhi.n	800bcb4 <USBD_StdItfReq+0xc4>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <USBD_StdItfReq+0x26>
 800bc12:	2b20      	cmp	r3, #32
 800bc14:	d14e      	bne.n	800bcb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d840      	bhi.n	800bca6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	889b      	ldrh	r3, [r3, #4]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d836      	bhi.n	800bc9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	889b      	ldrh	r3, [r3, #4]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7ff fed9 	bl	800b9ee <USBD_CoreFindIF>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	2bff      	cmp	r3, #255	; 0xff
 800bc44:	d01d      	beq.n	800bc82 <USBD_StdItfReq+0x92>
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d11a      	bne.n	800bc82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bc4c:	7bba      	ldrb	r2, [r7, #14]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	32ae      	adds	r2, #174	; 0xae
 800bc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00f      	beq.n	800bc7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc5c:	7bba      	ldrb	r2, [r7, #14]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc64:	7bba      	ldrb	r2, [r7, #14]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	32ae      	adds	r2, #174	; 0xae
 800bc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	4798      	blx	r3
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc7a:	e004      	b.n	800bc86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc80:	e001      	b.n	800bc86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bc82:	2303      	movs	r3, #3
 800bc84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	88db      	ldrh	r3, [r3, #6]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d110      	bne.n	800bcb0 <USBD_StdItfReq+0xc0>
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10d      	bne.n	800bcb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fdf1 	bl	800c87c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc9a:	e009      	b.n	800bcb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fd21 	bl	800c6e6 <USBD_CtlError>
          break;
 800bca4:	e004      	b.n	800bcb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fd1c 	bl	800c6e6 <USBD_CtlError>
          break;
 800bcae:	e000      	b.n	800bcb2 <USBD_StdItfReq+0xc2>
          break;
 800bcb0:	bf00      	nop
      }
      break;
 800bcb2:	e004      	b.n	800bcbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fd15 	bl	800c6e6 <USBD_CtlError>
      break;
 800bcbc:	bf00      	nop
  }

  return ret;
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	889b      	ldrh	r3, [r3, #4]
 800bcda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bce4:	2b40      	cmp	r3, #64	; 0x40
 800bce6:	d007      	beq.n	800bcf8 <USBD_StdEPReq+0x30>
 800bce8:	2b40      	cmp	r3, #64	; 0x40
 800bcea:	f200 817f 	bhi.w	800bfec <USBD_StdEPReq+0x324>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d02a      	beq.n	800bd48 <USBD_StdEPReq+0x80>
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	f040 817a 	bne.w	800bfec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff fe83 	bl	800ba08 <USBD_CoreFindEP>
 800bd02:	4603      	mov	r3, r0
 800bd04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd06:	7b7b      	ldrb	r3, [r7, #13]
 800bd08:	2bff      	cmp	r3, #255	; 0xff
 800bd0a:	f000 8174 	beq.w	800bff6 <USBD_StdEPReq+0x32e>
 800bd0e:	7b7b      	ldrb	r3, [r7, #13]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f040 8170 	bne.w	800bff6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bd16:	7b7a      	ldrb	r2, [r7, #13]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bd1e:	7b7a      	ldrb	r2, [r7, #13]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	32ae      	adds	r2, #174	; 0xae
 800bd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 8163 	beq.w	800bff6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd30:	7b7a      	ldrb	r2, [r7, #13]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	32ae      	adds	r2, #174	; 0xae
 800bd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	4798      	blx	r3
 800bd42:	4603      	mov	r3, r0
 800bd44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd46:	e156      	b.n	800bff6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	785b      	ldrb	r3, [r3, #1]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d008      	beq.n	800bd62 <USBD_StdEPReq+0x9a>
 800bd50:	2b03      	cmp	r3, #3
 800bd52:	f300 8145 	bgt.w	800bfe0 <USBD_StdEPReq+0x318>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 809b 	beq.w	800be92 <USBD_StdEPReq+0x1ca>
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d03c      	beq.n	800bdda <USBD_StdEPReq+0x112>
 800bd60:	e13e      	b.n	800bfe0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d002      	beq.n	800bd74 <USBD_StdEPReq+0xac>
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d016      	beq.n	800bda0 <USBD_StdEPReq+0xd8>
 800bd72:	e02c      	b.n	800bdce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00d      	beq.n	800bd96 <USBD_StdEPReq+0xce>
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
 800bd7c:	2b80      	cmp	r3, #128	; 0x80
 800bd7e:	d00a      	beq.n	800bd96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd80:	7bbb      	ldrb	r3, [r7, #14]
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f001 f9cb 	bl	800d120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd8a:	2180      	movs	r1, #128	; 0x80
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f001 f9c7 	bl	800d120 <USBD_LL_StallEP>
 800bd92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd94:	e020      	b.n	800bdd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fca4 	bl	800c6e6 <USBD_CtlError>
              break;
 800bd9e:	e01b      	b.n	800bdd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	885b      	ldrh	r3, [r3, #2]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10e      	bne.n	800bdc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00b      	beq.n	800bdc6 <USBD_StdEPReq+0xfe>
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b80      	cmp	r3, #128	; 0x80
 800bdb2:	d008      	beq.n	800bdc6 <USBD_StdEPReq+0xfe>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	88db      	ldrh	r3, [r3, #6]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d104      	bne.n	800bdc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 f9ad 	bl	800d120 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fd58 	bl	800c87c <USBD_CtlSendStatus>

              break;
 800bdcc:	e004      	b.n	800bdd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fc88 	bl	800c6e6 <USBD_CtlError>
              break;
 800bdd6:	bf00      	nop
          }
          break;
 800bdd8:	e107      	b.n	800bfea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d002      	beq.n	800bdec <USBD_StdEPReq+0x124>
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d016      	beq.n	800be18 <USBD_StdEPReq+0x150>
 800bdea:	e04b      	b.n	800be84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00d      	beq.n	800be0e <USBD_StdEPReq+0x146>
 800bdf2:	7bbb      	ldrb	r3, [r7, #14]
 800bdf4:	2b80      	cmp	r3, #128	; 0x80
 800bdf6:	d00a      	beq.n	800be0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 f98f 	bl	800d120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be02:	2180      	movs	r1, #128	; 0x80
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 f98b 	bl	800d120 <USBD_LL_StallEP>
 800be0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be0c:	e040      	b.n	800be90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fc68 	bl	800c6e6 <USBD_CtlError>
              break;
 800be16:	e03b      	b.n	800be90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	885b      	ldrh	r3, [r3, #2]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d136      	bne.n	800be8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be20:	7bbb      	ldrb	r3, [r7, #14]
 800be22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 f9ac 	bl	800d18c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fd21 	bl	800c87c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be3a:	7bbb      	ldrb	r3, [r7, #14]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff fde2 	bl	800ba08 <USBD_CoreFindEP>
 800be44:	4603      	mov	r3, r0
 800be46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be48:	7b7b      	ldrb	r3, [r7, #13]
 800be4a:	2bff      	cmp	r3, #255	; 0xff
 800be4c:	d01f      	beq.n	800be8e <USBD_StdEPReq+0x1c6>
 800be4e:	7b7b      	ldrb	r3, [r7, #13]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d11c      	bne.n	800be8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800be54:	7b7a      	ldrb	r2, [r7, #13]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be5c:	7b7a      	ldrb	r2, [r7, #13]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	32ae      	adds	r2, #174	; 0xae
 800be62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d010      	beq.n	800be8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be6c:	7b7a      	ldrb	r2, [r7, #13]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	32ae      	adds	r2, #174	; 0xae
 800be72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	4798      	blx	r3
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800be82:	e004      	b.n	800be8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fc2d 	bl	800c6e6 <USBD_CtlError>
              break;
 800be8c:	e000      	b.n	800be90 <USBD_StdEPReq+0x1c8>
              break;
 800be8e:	bf00      	nop
          }
          break;
 800be90:	e0ab      	b.n	800bfea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d002      	beq.n	800bea4 <USBD_StdEPReq+0x1dc>
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d032      	beq.n	800bf08 <USBD_StdEPReq+0x240>
 800bea2:	e097      	b.n	800bfd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bea4:	7bbb      	ldrb	r3, [r7, #14]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d007      	beq.n	800beba <USBD_StdEPReq+0x1f2>
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	2b80      	cmp	r3, #128	; 0x80
 800beae:	d004      	beq.n	800beba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fc17 	bl	800c6e6 <USBD_CtlError>
                break;
 800beb8:	e091      	b.n	800bfde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da0b      	bge.n	800beda <USBD_StdEPReq+0x212>
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	3310      	adds	r3, #16
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	4413      	add	r3, r2
 800bed6:	3304      	adds	r3, #4
 800bed8:	e00b      	b.n	800bef2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800beda:	7bbb      	ldrb	r3, [r7, #14]
 800bedc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	3304      	adds	r3, #4
 800bef2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2200      	movs	r2, #0
 800bef8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2202      	movs	r2, #2
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fc61 	bl	800c7c8 <USBD_CtlSendData>
              break;
 800bf06:	e06a      	b.n	800bfde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	da11      	bge.n	800bf34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	f003 020f 	and.w	r2, r3, #15
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	3324      	adds	r3, #36	; 0x24
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d117      	bne.n	800bf5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fbda 	bl	800c6e6 <USBD_CtlError>
                  break;
 800bf32:	e054      	b.n	800bfde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	f003 020f 	and.w	r2, r3, #15
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fbc7 	bl	800c6e6 <USBD_CtlError>
                  break;
 800bf58:	e041      	b.n	800bfde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	da0b      	bge.n	800bf7a <USBD_StdEPReq+0x2b2>
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	3310      	adds	r3, #16
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4413      	add	r3, r2
 800bf76:	3304      	adds	r3, #4
 800bf78:	e00b      	b.n	800bf92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4413      	add	r3, r2
 800bf90:	3304      	adds	r3, #4
 800bf92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <USBD_StdEPReq+0x2d8>
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	2b80      	cmp	r3, #128	; 0x80
 800bf9e:	d103      	bne.n	800bfa8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
 800bfa6:	e00e      	b.n	800bfc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bfa8:	7bbb      	ldrb	r3, [r7, #14]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f001 f923 	bl	800d1f8 <USBD_LL_IsStallEP>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	e002      	b.n	800bfc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2202      	movs	r2, #2
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fbfb 	bl	800c7c8 <USBD_CtlSendData>
              break;
 800bfd2:	e004      	b.n	800bfde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fb85 	bl	800c6e6 <USBD_CtlError>
              break;
 800bfdc:	bf00      	nop
          }
          break;
 800bfde:	e004      	b.n	800bfea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fb7f 	bl	800c6e6 <USBD_CtlError>
          break;
 800bfe8:	bf00      	nop
      }
      break;
 800bfea:	e005      	b.n	800bff8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fb79 	bl	800c6e6 <USBD_CtlError>
      break;
 800bff4:	e000      	b.n	800bff8 <USBD_StdEPReq+0x330>
      break;
 800bff6:	bf00      	nop
  }

  return ret;
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c00e:	2300      	movs	r3, #0
 800c010:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c016:	2300      	movs	r3, #0
 800c018:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	885b      	ldrh	r3, [r3, #2]
 800c01e:	0a1b      	lsrs	r3, r3, #8
 800c020:	b29b      	uxth	r3, r3
 800c022:	3b01      	subs	r3, #1
 800c024:	2b0e      	cmp	r3, #14
 800c026:	f200 8152 	bhi.w	800c2ce <USBD_GetDescriptor+0x2ca>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <USBD_GetDescriptor+0x2c>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c0a1 	.word	0x0800c0a1
 800c034:	0800c0b9 	.word	0x0800c0b9
 800c038:	0800c0f9 	.word	0x0800c0f9
 800c03c:	0800c2cf 	.word	0x0800c2cf
 800c040:	0800c2cf 	.word	0x0800c2cf
 800c044:	0800c26f 	.word	0x0800c26f
 800c048:	0800c29b 	.word	0x0800c29b
 800c04c:	0800c2cf 	.word	0x0800c2cf
 800c050:	0800c2cf 	.word	0x0800c2cf
 800c054:	0800c2cf 	.word	0x0800c2cf
 800c058:	0800c2cf 	.word	0x0800c2cf
 800c05c:	0800c2cf 	.word	0x0800c2cf
 800c060:	0800c2cf 	.word	0x0800c2cf
 800c064:	0800c2cf 	.word	0x0800c2cf
 800c068:	0800c06d 	.word	0x0800c06d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	7c12      	ldrb	r2, [r2, #16]
 800c084:	f107 0108 	add.w	r1, r7, #8
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c08e:	e126      	b.n	800c2de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fb27 	bl	800c6e6 <USBD_CtlError>
        err++;
 800c098:	7afb      	ldrb	r3, [r7, #11]
 800c09a:	3301      	adds	r3, #1
 800c09c:	72fb      	strb	r3, [r7, #11]
      break;
 800c09e:	e11e      	b.n	800c2de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	7c12      	ldrb	r2, [r2, #16]
 800c0ac:	f107 0108 	add.w	r1, r7, #8
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	4798      	blx	r3
 800c0b4:	60f8      	str	r0, [r7, #12]
      break;
 800c0b6:	e112      	b.n	800c2de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7c1b      	ldrb	r3, [r3, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10d      	bne.n	800c0dc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c8:	f107 0208 	add.w	r2, r7, #8
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	4798      	blx	r3
 800c0d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0da:	e100      	b.n	800c2de <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	f107 0208 	add.w	r2, r7, #8
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	4798      	blx	r3
 800c0ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	701a      	strb	r2, [r3, #0]
      break;
 800c0f6:	e0f2      	b.n	800c2de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	885b      	ldrh	r3, [r3, #2]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b05      	cmp	r3, #5
 800c100:	f200 80ac 	bhi.w	800c25c <USBD_GetDescriptor+0x258>
 800c104:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <USBD_GetDescriptor+0x108>)
 800c106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10a:	bf00      	nop
 800c10c:	0800c125 	.word	0x0800c125
 800c110:	0800c159 	.word	0x0800c159
 800c114:	0800c18d 	.word	0x0800c18d
 800c118:	0800c1c1 	.word	0x0800c1c1
 800c11c:	0800c1f5 	.word	0x0800c1f5
 800c120:	0800c229 	.word	0x0800c229
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	7c12      	ldrb	r2, [r2, #16]
 800c13c:	f107 0108 	add.w	r1, r7, #8
 800c140:	4610      	mov	r0, r2
 800c142:	4798      	blx	r3
 800c144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c146:	e091      	b.n	800c26c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 facb 	bl	800c6e6 <USBD_CtlError>
            err++;
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	3301      	adds	r3, #1
 800c154:	72fb      	strb	r3, [r7, #11]
          break;
 800c156:	e089      	b.n	800c26c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00b      	beq.n	800c17c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	7c12      	ldrb	r2, [r2, #16]
 800c170:	f107 0108 	add.w	r1, r7, #8
 800c174:	4610      	mov	r0, r2
 800c176:	4798      	blx	r3
 800c178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c17a:	e077      	b.n	800c26c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c17c:	6839      	ldr	r1, [r7, #0]
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fab1 	bl	800c6e6 <USBD_CtlError>
            err++;
 800c184:	7afb      	ldrb	r3, [r7, #11]
 800c186:	3301      	adds	r3, #1
 800c188:	72fb      	strb	r3, [r7, #11]
          break;
 800c18a:	e06f      	b.n	800c26c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00b      	beq.n	800c1b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	7c12      	ldrb	r2, [r2, #16]
 800c1a4:	f107 0108 	add.w	r1, r7, #8
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	4798      	blx	r3
 800c1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ae:	e05d      	b.n	800c26c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fa97 	bl	800c6e6 <USBD_CtlError>
            err++;
 800c1b8:	7afb      	ldrb	r3, [r7, #11]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1be:	e055      	b.n	800c26c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00b      	beq.n	800c1e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	7c12      	ldrb	r2, [r2, #16]
 800c1d8:	f107 0108 	add.w	r1, r7, #8
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4798      	blx	r3
 800c1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1e2:	e043      	b.n	800c26c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 fa7d 	bl	800c6e6 <USBD_CtlError>
            err++;
 800c1ec:	7afb      	ldrb	r3, [r7, #11]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1f2:	e03b      	b.n	800c26c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7c12      	ldrb	r2, [r2, #16]
 800c20c:	f107 0108 	add.w	r1, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c216:	e029      	b.n	800c26c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fa63 	bl	800c6e6 <USBD_CtlError>
            err++;
 800c220:	7afb      	ldrb	r3, [r7, #11]
 800c222:	3301      	adds	r3, #1
 800c224:	72fb      	strb	r3, [r7, #11]
          break;
 800c226:	e021      	b.n	800c26c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	7c12      	ldrb	r2, [r2, #16]
 800c240:	f107 0108 	add.w	r1, r7, #8
 800c244:	4610      	mov	r0, r2
 800c246:	4798      	blx	r3
 800c248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24a:	e00f      	b.n	800c26c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fa49 	bl	800c6e6 <USBD_CtlError>
            err++;
 800c254:	7afb      	ldrb	r3, [r7, #11]
 800c256:	3301      	adds	r3, #1
 800c258:	72fb      	strb	r3, [r7, #11]
          break;
 800c25a:	e007      	b.n	800c26c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fa41 	bl	800c6e6 <USBD_CtlError>
          err++;
 800c264:	7afb      	ldrb	r3, [r7, #11]
 800c266:	3301      	adds	r3, #1
 800c268:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c26a:	bf00      	nop
      }
      break;
 800c26c:	e037      	b.n	800c2de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	7c1b      	ldrb	r3, [r3, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d109      	bne.n	800c28a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c27e:	f107 0208 	add.w	r2, r7, #8
 800c282:	4610      	mov	r0, r2
 800c284:	4798      	blx	r3
 800c286:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c288:	e029      	b.n	800c2de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fa2a 	bl	800c6e6 <USBD_CtlError>
        err++;
 800c292:	7afb      	ldrb	r3, [r7, #11]
 800c294:	3301      	adds	r3, #1
 800c296:	72fb      	strb	r3, [r7, #11]
      break;
 800c298:	e021      	b.n	800c2de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	7c1b      	ldrb	r3, [r3, #16]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10d      	bne.n	800c2be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2aa:	f107 0208 	add.w	r2, r7, #8
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	4798      	blx	r3
 800c2b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	2207      	movs	r2, #7
 800c2ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2bc:	e00f      	b.n	800c2de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fa10 	bl	800c6e6 <USBD_CtlError>
        err++;
 800c2c6:	7afb      	ldrb	r3, [r7, #11]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	72fb      	strb	r3, [r7, #11]
      break;
 800c2cc:	e007      	b.n	800c2de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fa08 	bl	800c6e6 <USBD_CtlError>
      err++;
 800c2d6:	7afb      	ldrb	r3, [r7, #11]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	72fb      	strb	r3, [r7, #11]
      break;
 800c2dc:	bf00      	nop
  }

  if (err != 0U)
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d11e      	bne.n	800c322 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	88db      	ldrh	r3, [r3, #6]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d016      	beq.n	800c31a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c2ec:	893b      	ldrh	r3, [r7, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00e      	beq.n	800c310 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	88da      	ldrh	r2, [r3, #6]
 800c2f6:	893b      	ldrh	r3, [r7, #8]
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	bf28      	it	cs
 800c2fc:	4613      	movcs	r3, r2
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c302:	893b      	ldrh	r3, [r7, #8]
 800c304:	461a      	mov	r2, r3
 800c306:	68f9      	ldr	r1, [r7, #12]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fa5d 	bl	800c7c8 <USBD_CtlSendData>
 800c30e:	e009      	b.n	800c324 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f9e7 	bl	800c6e6 <USBD_CtlError>
 800c318:	e004      	b.n	800c324 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 faae 	bl	800c87c <USBD_CtlSendStatus>
 800c320:	e000      	b.n	800c324 <USBD_GetDescriptor+0x320>
    return;
 800c322:	bf00      	nop
  }
}
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop

0800c32c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	889b      	ldrh	r3, [r3, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d131      	bne.n	800c3a2 <USBD_SetAddress+0x76>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	88db      	ldrh	r3, [r3, #6]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d12d      	bne.n	800c3a2 <USBD_SetAddress+0x76>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	885b      	ldrh	r3, [r3, #2]
 800c34a:	2b7f      	cmp	r3, #127	; 0x7f
 800c34c:	d829      	bhi.n	800c3a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	885b      	ldrh	r3, [r3, #2]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b03      	cmp	r3, #3
 800c364:	d104      	bne.n	800c370 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f9bc 	bl	800c6e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c36e:	e01d      	b.n	800c3ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7bfa      	ldrb	r2, [r7, #15]
 800c374:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 ff69 	bl	800d254 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fa7a 	bl	800c87c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d004      	beq.n	800c398 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2202      	movs	r2, #2
 800c392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c396:	e009      	b.n	800c3ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3a0:	e004      	b.n	800c3ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f99e 	bl	800c6e6 <USBD_CtlError>
  }
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	885b      	ldrh	r3, [r3, #2]
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	4b4e      	ldr	r3, [pc, #312]	; (800c504 <USBD_SetConfig+0x150>)
 800c3ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3cc:	4b4d      	ldr	r3, [pc, #308]	; (800c504 <USBD_SetConfig+0x150>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d905      	bls.n	800c3e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f985 	bl	800c6e6 <USBD_CtlError>
    return USBD_FAIL;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e08c      	b.n	800c4fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d002      	beq.n	800c3f2 <USBD_SetConfig+0x3e>
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d029      	beq.n	800c444 <USBD_SetConfig+0x90>
 800c3f0:	e075      	b.n	800c4de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3f2:	4b44      	ldr	r3, [pc, #272]	; (800c504 <USBD_SetConfig+0x150>)
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d020      	beq.n	800c43c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3fa:	4b42      	ldr	r3, [pc, #264]	; (800c504 <USBD_SetConfig+0x150>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c404:	4b3f      	ldr	r3, [pc, #252]	; (800c504 <USBD_SetConfig+0x150>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7ff f849 	bl	800b4a2 <USBD_SetClassConfig>
 800c410:	4603      	mov	r3, r0
 800c412:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d008      	beq.n	800c42c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f962 	bl	800c6e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2202      	movs	r2, #2
 800c426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c42a:	e065      	b.n	800c4f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fa25 	bl	800c87c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2203      	movs	r2, #3
 800c436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c43a:	e05d      	b.n	800c4f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fa1d 	bl	800c87c <USBD_CtlSendStatus>
      break;
 800c442:	e059      	b.n	800c4f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c444:	4b2f      	ldr	r3, [pc, #188]	; (800c504 <USBD_SetConfig+0x150>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d112      	bne.n	800c472 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2202      	movs	r2, #2
 800c450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c454:	4b2b      	ldr	r3, [pc, #172]	; (800c504 <USBD_SetConfig+0x150>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	461a      	mov	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c45e:	4b29      	ldr	r3, [pc, #164]	; (800c504 <USBD_SetConfig+0x150>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff f838 	bl	800b4da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fa06 	bl	800c87c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c470:	e042      	b.n	800c4f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c472:	4b24      	ldr	r3, [pc, #144]	; (800c504 <USBD_SetConfig+0x150>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d02a      	beq.n	800c4d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	b2db      	uxtb	r3, r3
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff f826 	bl	800b4da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c48e:	4b1d      	ldr	r3, [pc, #116]	; (800c504 <USBD_SetConfig+0x150>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c498:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <USBD_SetConfig+0x150>)
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fe ffff 	bl	800b4a2 <USBD_SetClassConfig>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00f      	beq.n	800c4ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f918 	bl	800c6e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7ff f80b 	bl	800b4da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4cc:	e014      	b.n	800c4f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f9d4 	bl	800c87c <USBD_CtlSendStatus>
      break;
 800c4d4:	e010      	b.n	800c4f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f9d0 	bl	800c87c <USBD_CtlSendStatus>
      break;
 800c4dc:	e00c      	b.n	800c4f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f900 	bl	800c6e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4e6:	4b07      	ldr	r3, [pc, #28]	; (800c504 <USBD_SetConfig+0x150>)
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7fe fff4 	bl	800b4da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4f6:	bf00      	nop
  }

  return ret;
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20000404 	.word	0x20000404

0800c508 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	88db      	ldrh	r3, [r3, #6]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d004      	beq.n	800c524 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f8e2 	bl	800c6e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c522:	e023      	b.n	800c56c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	dc02      	bgt.n	800c536 <USBD_GetConfig+0x2e>
 800c530:	2b00      	cmp	r3, #0
 800c532:	dc03      	bgt.n	800c53c <USBD_GetConfig+0x34>
 800c534:	e015      	b.n	800c562 <USBD_GetConfig+0x5a>
 800c536:	2b03      	cmp	r3, #3
 800c538:	d00b      	beq.n	800c552 <USBD_GetConfig+0x4a>
 800c53a:	e012      	b.n	800c562 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3308      	adds	r3, #8
 800c546:	2201      	movs	r2, #1
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f93c 	bl	800c7c8 <USBD_CtlSendData>
        break;
 800c550:	e00c      	b.n	800c56c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3304      	adds	r3, #4
 800c556:	2201      	movs	r2, #1
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f934 	bl	800c7c8 <USBD_CtlSendData>
        break;
 800c560:	e004      	b.n	800c56c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f8be 	bl	800c6e6 <USBD_CtlError>
        break;
 800c56a:	bf00      	nop
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	3b01      	subs	r3, #1
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d81e      	bhi.n	800c5ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	88db      	ldrh	r3, [r3, #6]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d004      	beq.n	800c59e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f8a5 	bl	800c6e6 <USBD_CtlError>
        break;
 800c59c:	e01a      	b.n	800c5d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d005      	beq.n	800c5ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	f043 0202 	orr.w	r2, r3, #2
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	330c      	adds	r3, #12
 800c5be:	2202      	movs	r2, #2
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f900 	bl	800c7c8 <USBD_CtlSendData>
      break;
 800c5c8:	e004      	b.n	800c5d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f88a 	bl	800c6e6 <USBD_CtlError>
      break;
 800c5d2:	bf00      	nop
  }
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	885b      	ldrh	r3, [r3, #2]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d107      	bne.n	800c5fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f940 	bl	800c87c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c5fc:	e013      	b.n	800c626 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d10b      	bne.n	800c61e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	889b      	ldrh	r3, [r3, #4]
 800c60a:	0a1b      	lsrs	r3, r3, #8
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f930 	bl	800c87c <USBD_CtlSendStatus>
}
 800c61c:	e003      	b.n	800c626 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f860 	bl	800c6e6 <USBD_CtlError>
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b082      	sub	sp, #8
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	3b01      	subs	r3, #1
 800c642:	2b02      	cmp	r3, #2
 800c644:	d80b      	bhi.n	800c65e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	885b      	ldrh	r3, [r3, #2]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d10c      	bne.n	800c668 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f910 	bl	800c87c <USBD_CtlSendStatus>
      }
      break;
 800c65c:	e004      	b.n	800c668 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f840 	bl	800c6e6 <USBD_CtlError>
      break;
 800c666:	e000      	b.n	800c66a <USBD_ClrFeature+0x3c>
      break;
 800c668:	bf00      	nop
  }
}
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	781a      	ldrb	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3301      	adds	r3, #1
 800c68c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	781a      	ldrb	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3301      	adds	r3, #1
 800c69a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7ff fa17 	bl	800bad0 <SWAPBYTE>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7ff fa0a 	bl	800bad0 <SWAPBYTE>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f7ff f9fd 	bl	800bad0 <SWAPBYTE>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	461a      	mov	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	80da      	strh	r2, [r3, #6]
}
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6f0:	2180      	movs	r1, #128	; 0x80
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fd14 	bl	800d120 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fd10 	bl	800d120 <USBD_LL_StallEP>
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d036      	beq.n	800c78c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c722:	6938      	ldr	r0, [r7, #16]
 800c724:	f000 f836 	bl	800c794 <USBD_GetLen>
 800c728:	4603      	mov	r3, r0
 800c72a:	3301      	adds	r3, #1
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	005b      	lsls	r3, r3, #1
 800c730:	b29a      	uxth	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	4413      	add	r3, r2
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	7812      	ldrb	r2, [r2, #0]
 800c740:	701a      	strb	r2, [r3, #0]
  idx++;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	3301      	adds	r3, #1
 800c746:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	4413      	add	r3, r2
 800c74e:	2203      	movs	r2, #3
 800c750:	701a      	strb	r2, [r3, #0]
  idx++;
 800c752:	7dfb      	ldrb	r3, [r7, #23]
 800c754:	3301      	adds	r3, #1
 800c756:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c758:	e013      	b.n	800c782 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	4413      	add	r3, r2
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	7812      	ldrb	r2, [r2, #0]
 800c764:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	3301      	adds	r3, #1
 800c76a:	613b      	str	r3, [r7, #16]
    idx++;
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
 800c76e:	3301      	adds	r3, #1
 800c770:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	4413      	add	r3, r2
 800c778:	2200      	movs	r2, #0
 800c77a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
 800c77e:	3301      	adds	r3, #1
 800c780:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e7      	bne.n	800c75a <USBD_GetString+0x52>
 800c78a:	e000      	b.n	800c78e <USBD_GetString+0x86>
    return;
 800c78c:	bf00      	nop
  }
}
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c7a4:	e005      	b.n	800c7b2 <USBD_GetLen+0x1e>
  {
    len++;
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1f5      	bne.n	800c7a6 <USBD_GetLen+0x12>
  }

  return len;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 fd66 	bl	800d2c0 <USBD_LL_Transmit>

  return USBD_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	2100      	movs	r1, #0
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f000 fd55 	bl	800d2c0 <USBD_LL_Transmit>

  return USBD_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2203      	movs	r2, #3
 800c830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	2100      	movs	r1, #0
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f000 fd70 	bl	800d330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	60b9      	str	r1, [r7, #8]
 800c864:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	2100      	movs	r1, #0
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 fd5f 	bl	800d330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2204      	movs	r2, #4
 800c888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c88c:	2300      	movs	r3, #0
 800c88e:	2200      	movs	r2, #0
 800c890:	2100      	movs	r1, #0
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fd14 	bl	800d2c0 <USBD_LL_Transmit>

  return USBD_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2205      	movs	r2, #5
 800c8ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fd39 	bl	800d330 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	4912      	ldr	r1, [pc, #72]	; (800c918 <MX_USB_DEVICE_Init+0x50>)
 800c8d0:	4812      	ldr	r0, [pc, #72]	; (800c91c <MX_USB_DEVICE_Init+0x54>)
 800c8d2:	f7fe fd69 	bl	800b3a8 <USBD_Init>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c8dc:	f7f5 fb44 	bl	8001f68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c8e0:	490f      	ldr	r1, [pc, #60]	; (800c920 <MX_USB_DEVICE_Init+0x58>)
 800c8e2:	480e      	ldr	r0, [pc, #56]	; (800c91c <MX_USB_DEVICE_Init+0x54>)
 800c8e4:	f7fe fd90 	bl	800b408 <USBD_RegisterClass>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c8ee:	f7f5 fb3b 	bl	8001f68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8f2:	490c      	ldr	r1, [pc, #48]	; (800c924 <MX_USB_DEVICE_Init+0x5c>)
 800c8f4:	4809      	ldr	r0, [pc, #36]	; (800c91c <MX_USB_DEVICE_Init+0x54>)
 800c8f6:	f7fe fc87 	bl	800b208 <USBD_CDC_RegisterInterface>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c900:	f7f5 fb32 	bl	8001f68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c904:	4805      	ldr	r0, [pc, #20]	; (800c91c <MX_USB_DEVICE_Init+0x54>)
 800c906:	f7fe fdb5 	bl	800b474 <USBD_Start>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c910:	f7f5 fb2a 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c914:	bf00      	nop
 800c916:	bd80      	pop	{r7, pc}
 800c918:	200000ac 	.word	0x200000ac
 800c91c:	20000408 	.word	0x20000408
 800c920:	20000018 	.word	0x20000018
 800c924:	20000098 	.word	0x20000098

0800c928 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c92c:	2200      	movs	r2, #0
 800c92e:	4905      	ldr	r1, [pc, #20]	; (800c944 <CDC_Init_FS+0x1c>)
 800c930:	4805      	ldr	r0, [pc, #20]	; (800c948 <CDC_Init_FS+0x20>)
 800c932:	f7fe fc83 	bl	800b23c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c936:	4905      	ldr	r1, [pc, #20]	; (800c94c <CDC_Init_FS+0x24>)
 800c938:	4803      	ldr	r0, [pc, #12]	; (800c948 <CDC_Init_FS+0x20>)
 800c93a:	f7fe fca1 	bl	800b280 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c93e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c940:	4618      	mov	r0, r3
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20000ae4 	.word	0x20000ae4
 800c948:	20000408 	.word	0x20000408
 800c94c:	200006e4 	.word	0x200006e4

0800c950 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c950:	b480      	push	{r7}
 800c952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c954:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c956:	4618      	mov	r0, r3
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	6039      	str	r1, [r7, #0]
 800c96a:	71fb      	strb	r3, [r7, #7]
 800c96c:	4613      	mov	r3, r2
 800c96e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	2b23      	cmp	r3, #35	; 0x23
 800c974:	d84a      	bhi.n	800ca0c <CDC_Control_FS+0xac>
 800c976:	a201      	add	r2, pc, #4	; (adr r2, 800c97c <CDC_Control_FS+0x1c>)
 800c978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97c:	0800ca0d 	.word	0x0800ca0d
 800c980:	0800ca0d 	.word	0x0800ca0d
 800c984:	0800ca0d 	.word	0x0800ca0d
 800c988:	0800ca0d 	.word	0x0800ca0d
 800c98c:	0800ca0d 	.word	0x0800ca0d
 800c990:	0800ca0d 	.word	0x0800ca0d
 800c994:	0800ca0d 	.word	0x0800ca0d
 800c998:	0800ca0d 	.word	0x0800ca0d
 800c99c:	0800ca0d 	.word	0x0800ca0d
 800c9a0:	0800ca0d 	.word	0x0800ca0d
 800c9a4:	0800ca0d 	.word	0x0800ca0d
 800c9a8:	0800ca0d 	.word	0x0800ca0d
 800c9ac:	0800ca0d 	.word	0x0800ca0d
 800c9b0:	0800ca0d 	.word	0x0800ca0d
 800c9b4:	0800ca0d 	.word	0x0800ca0d
 800c9b8:	0800ca0d 	.word	0x0800ca0d
 800c9bc:	0800ca0d 	.word	0x0800ca0d
 800c9c0:	0800ca0d 	.word	0x0800ca0d
 800c9c4:	0800ca0d 	.word	0x0800ca0d
 800c9c8:	0800ca0d 	.word	0x0800ca0d
 800c9cc:	0800ca0d 	.word	0x0800ca0d
 800c9d0:	0800ca0d 	.word	0x0800ca0d
 800c9d4:	0800ca0d 	.word	0x0800ca0d
 800c9d8:	0800ca0d 	.word	0x0800ca0d
 800c9dc:	0800ca0d 	.word	0x0800ca0d
 800c9e0:	0800ca0d 	.word	0x0800ca0d
 800c9e4:	0800ca0d 	.word	0x0800ca0d
 800c9e8:	0800ca0d 	.word	0x0800ca0d
 800c9ec:	0800ca0d 	.word	0x0800ca0d
 800c9f0:	0800ca0d 	.word	0x0800ca0d
 800c9f4:	0800ca0d 	.word	0x0800ca0d
 800c9f8:	0800ca0d 	.word	0x0800ca0d
 800c9fc:	0800ca0d 	.word	0x0800ca0d
 800ca00:	0800ca0d 	.word	0x0800ca0d
 800ca04:	0800ca0d 	.word	0x0800ca0d
 800ca08:	0800ca0d 	.word	0x0800ca0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca0c:	bf00      	nop
  }

  return (USBD_OK);
 800ca0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca26:	6879      	ldr	r1, [r7, #4]
 800ca28:	4805      	ldr	r0, [pc, #20]	; (800ca40 <CDC_Receive_FS+0x24>)
 800ca2a:	f7fe fc29 	bl	800b280 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ca2e:	4804      	ldr	r0, [pc, #16]	; (800ca40 <CDC_Receive_FS+0x24>)
 800ca30:	f7fe fc84 	bl	800b33c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ca34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20000408 	.word	0x20000408

0800ca44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca54:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <CDC_Transmit_FS+0x48>)
 800ca56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e00b      	b.n	800ca82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca6a:	887b      	ldrh	r3, [r7, #2]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	4806      	ldr	r0, [pc, #24]	; (800ca8c <CDC_Transmit_FS+0x48>)
 800ca72:	f7fe fbe3 	bl	800b23c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca76:	4805      	ldr	r0, [pc, #20]	; (800ca8c <CDC_Transmit_FS+0x48>)
 800ca78:	f7fe fc20 	bl	800b2bc <USBD_CDC_TransmitPacket>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000408 	.word	0x20000408

0800ca90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800caa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	371c      	adds	r7, #28
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	6039      	str	r1, [r7, #0]
 800cabe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2212      	movs	r2, #18
 800cac4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cac6:	4b03      	ldr	r3, [pc, #12]	; (800cad4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cac8:	4618      	mov	r0, r3
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	200000cc 	.word	0x200000cc

0800cad8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	6039      	str	r1, [r7, #0]
 800cae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2204      	movs	r2, #4
 800cae8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800caea:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	200000ec 	.word	0x200000ec

0800cafc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	6039      	str	r1, [r7, #0]
 800cb06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb08:	79fb      	ldrb	r3, [r7, #7]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	4907      	ldr	r1, [pc, #28]	; (800cb30 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb12:	4808      	ldr	r0, [pc, #32]	; (800cb34 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb14:	f7ff fdf8 	bl	800c708 <USBD_GetString>
 800cb18:	e004      	b.n	800cb24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	4904      	ldr	r1, [pc, #16]	; (800cb30 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb1e:	4805      	ldr	r0, [pc, #20]	; (800cb34 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb20:	f7ff fdf2 	bl	800c708 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb24:	4b02      	ldr	r3, [pc, #8]	; (800cb30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	20000ee4 	.word	0x20000ee4
 800cb34:	080105cc 	.word	0x080105cc

0800cb38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	6039      	str	r1, [r7, #0]
 800cb42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	4904      	ldr	r1, [pc, #16]	; (800cb58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb48:	4804      	ldr	r0, [pc, #16]	; (800cb5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb4a:	f7ff fddd 	bl	800c708 <USBD_GetString>
  return USBD_StrDesc;
 800cb4e:	4b02      	ldr	r3, [pc, #8]	; (800cb58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	20000ee4 	.word	0x20000ee4
 800cb5c:	080105e4 	.word	0x080105e4

0800cb60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	221a      	movs	r2, #26
 800cb70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb72:	f000 f855 	bl	800cc20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb76:	4b02      	ldr	r3, [pc, #8]	; (800cb80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	200000f0 	.word	0x200000f0

0800cb84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d105      	bne.n	800cba2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	4907      	ldr	r1, [pc, #28]	; (800cbb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb9a:	4808      	ldr	r0, [pc, #32]	; (800cbbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb9c:	f7ff fdb4 	bl	800c708 <USBD_GetString>
 800cba0:	e004      	b.n	800cbac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	4904      	ldr	r1, [pc, #16]	; (800cbb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cba6:	4805      	ldr	r0, [pc, #20]	; (800cbbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cba8:	f7ff fdae 	bl	800c708 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbac:	4b02      	ldr	r3, [pc, #8]	; (800cbb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20000ee4 	.word	0x20000ee4
 800cbbc:	080105f8 	.word	0x080105f8

0800cbc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	6039      	str	r1, [r7, #0]
 800cbca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d105      	bne.n	800cbde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	4907      	ldr	r1, [pc, #28]	; (800cbf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbd6:	4808      	ldr	r0, [pc, #32]	; (800cbf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbd8:	f7ff fd96 	bl	800c708 <USBD_GetString>
 800cbdc:	e004      	b.n	800cbe8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	4904      	ldr	r1, [pc, #16]	; (800cbf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbe2:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbe4:	f7ff fd90 	bl	800c708 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20000ee4 	.word	0x20000ee4
 800cbf8:	08010604 	.word	0x08010604

0800cbfc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	220c      	movs	r2, #12
 800cc0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cc0e:	4b03      	ldr	r3, [pc, #12]	; (800cc1c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	200000e0 	.word	0x200000e0

0800cc20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc26:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <Get_SerialNum+0x44>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc2c:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <Get_SerialNum+0x48>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc32:	4b0e      	ldr	r3, [pc, #56]	; (800cc6c <Get_SerialNum+0x4c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d009      	beq.n	800cc5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc46:	2208      	movs	r2, #8
 800cc48:	4909      	ldr	r1, [pc, #36]	; (800cc70 <Get_SerialNum+0x50>)
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f000 f814 	bl	800cc78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc50:	2204      	movs	r2, #4
 800cc52:	4908      	ldr	r1, [pc, #32]	; (800cc74 <Get_SerialNum+0x54>)
 800cc54:	68b8      	ldr	r0, [r7, #8]
 800cc56:	f000 f80f 	bl	800cc78 <IntToUnicode>
  }
}
 800cc5a:	bf00      	nop
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	1fff7590 	.word	0x1fff7590
 800cc68:	1fff7594 	.word	0x1fff7594
 800cc6c:	1fff7598 	.word	0x1fff7598
 800cc70:	200000f2 	.word	0x200000f2
 800cc74:	20000102 	.word	0x20000102

0800cc78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	75fb      	strb	r3, [r7, #23]
 800cc8e:	e027      	b.n	800cce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	0f1b      	lsrs	r3, r3, #28
 800cc94:	2b09      	cmp	r3, #9
 800cc96:	d80b      	bhi.n	800ccb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	0f1b      	lsrs	r3, r3, #28
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	4619      	mov	r1, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	440b      	add	r3, r1
 800cca8:	3230      	adds	r2, #48	; 0x30
 800ccaa:	b2d2      	uxtb	r2, r2
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	e00a      	b.n	800ccc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	0f1b      	lsrs	r3, r3, #28
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	4619      	mov	r1, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	440b      	add	r3, r1
 800ccc0:	3237      	adds	r2, #55	; 0x37
 800ccc2:	b2d2      	uxtb	r2, r2
 800ccc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	011b      	lsls	r3, r3, #4
 800ccca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	75fb      	strb	r3, [r7, #23]
 800cce0:	7dfa      	ldrb	r2, [r7, #23]
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d3d3      	bcc.n	800cc90 <IntToUnicode+0x18>
  }
}
 800cce8:	bf00      	nop
 800ccea:	bf00      	nop
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b096      	sub	sp, #88	; 0x58
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	605a      	str	r2, [r3, #4]
 800cd0a:	609a      	str	r2, [r3, #8]
 800cd0c:	60da      	str	r2, [r3, #12]
 800cd0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cd10:	f107 0310 	add.w	r3, r7, #16
 800cd14:	2234      	movs	r2, #52	; 0x34
 800cd16:	2100      	movs	r1, #0
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f001 fa25 	bl	800e168 <memset>
  if(pcdHandle->Instance==USB)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a24      	ldr	r2, [pc, #144]	; (800cdb4 <HAL_PCD_MspInit+0xbc>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d141      	bne.n	800cdac <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cd28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800cd2e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800cd32:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cd34:	f107 0310 	add.w	r3, r7, #16
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7f9 feb3 	bl	8006aa4 <HAL_RCCEx_PeriphCLKConfig>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800cd44:	f7f5 f910 	bl	8001f68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd48:	4b1b      	ldr	r3, [pc, #108]	; (800cdb8 <HAL_PCD_MspInit+0xc0>)
 800cd4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd4c:	4a1a      	ldr	r2, [pc, #104]	; (800cdb8 <HAL_PCD_MspInit+0xc0>)
 800cd4e:	f043 0301 	orr.w	r3, r3, #1
 800cd52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cd54:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <HAL_PCD_MspInit+0xc0>)
 800cd56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cd64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd66:	2302      	movs	r3, #2
 800cd68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800cd72:	230a      	movs	r3, #10
 800cd74:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cd80:	f7f6 fb74 	bl	800346c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cd84:	4b0c      	ldr	r3, [pc, #48]	; (800cdb8 <HAL_PCD_MspInit+0xc0>)
 800cd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd88:	4a0b      	ldr	r2, [pc, #44]	; (800cdb8 <HAL_PCD_MspInit+0xc0>)
 800cd8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd8e:	6593      	str	r3, [r2, #88]	; 0x58
 800cd90:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <HAL_PCD_MspInit+0xc0>)
 800cd92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd98:	60bb      	str	r3, [r7, #8]
 800cd9a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	2100      	movs	r1, #0
 800cda0:	2043      	movs	r0, #67	; 0x43
 800cda2:	f7f6 fb2c 	bl	80033fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cda6:	2043      	movs	r0, #67	; 0x43
 800cda8:	f7f6 fb45 	bl	8003436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cdac:	bf00      	nop
 800cdae:	3758      	adds	r7, #88	; 0x58
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	40006800 	.word	0x40006800
 800cdb8:	40021000 	.word	0x40021000

0800cdbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	f7fe fb9b 	bl	800b50e <USBD_LL_SetupStage>
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cdf2:	78fa      	ldrb	r2, [r7, #3]
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	440b      	add	r3, r1
 800ce00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f7fe fbd5 	bl	800b5b8 <USBD_LL_DataOutStage>
}
 800ce0e:	bf00      	nop
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	460b      	mov	r3, r1
 800ce20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800ce28:	78fa      	ldrb	r2, [r7, #3]
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	440b      	add	r3, r1
 800ce36:	333c      	adds	r3, #60	; 0x3c
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	78fb      	ldrb	r3, [r7, #3]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	f7fe fc6e 	bl	800b71e <USBD_LL_DataInStage>
}
 800ce42:	bf00      	nop
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe fda8 	bl	800b9ae <USBD_LL_SOF>
}
 800ce5e:	bf00      	nop
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d001      	beq.n	800ce7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ce7a:	f7f5 f875 	bl	8001f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ce84:	7bfa      	ldrb	r2, [r7, #15]
 800ce86:	4611      	mov	r1, r2
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe fd4c 	bl	800b926 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fcf4 	bl	800b882 <USBD_LL_Reset>
}
 800ce9a:	bf00      	nop
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fd47 	bl	800b946 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	699b      	ldr	r3, [r3, #24]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cec0:	4b04      	ldr	r3, [pc, #16]	; (800ced4 <HAL_PCD_SuspendCallback+0x30>)
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	4a03      	ldr	r2, [pc, #12]	; (800ced4 <HAL_PCD_SuspendCallback+0x30>)
 800cec6:	f043 0306 	orr.w	r3, r3, #6
 800ceca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	e000ed00 	.word	0xe000ed00

0800ced8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	699b      	ldr	r3, [r3, #24]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d007      	beq.n	800cef8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cee8:	4b08      	ldr	r3, [pc, #32]	; (800cf0c <HAL_PCD_ResumeCallback+0x34>)
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	4a07      	ldr	r2, [pc, #28]	; (800cf0c <HAL_PCD_ResumeCallback+0x34>)
 800ceee:	f023 0306 	bic.w	r3, r3, #6
 800cef2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cef4:	f000 fab6 	bl	800d464 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fe fd3d 	bl	800b97e <USBD_LL_Resume>
}
 800cf04:	bf00      	nop
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	e000ed00 	.word	0xe000ed00

0800cf10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800cf18:	f7f8 faf6 	bl	8005508 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf1c:	4a2b      	ldr	r2, [pc, #172]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a29      	ldr	r2, [pc, #164]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf28:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800cf2c:	4b27      	ldr	r3, [pc, #156]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf2e:	4a28      	ldr	r2, [pc, #160]	; (800cfd0 <USBD_LL_Init+0xc0>)
 800cf30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf32:	4b26      	ldr	r3, [pc, #152]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf34:	2208      	movs	r2, #8
 800cf36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf38:	4b24      	ldr	r3, [pc, #144]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf3e:	4b23      	ldr	r3, [pc, #140]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf40:	2202      	movs	r2, #2
 800cf42:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cf44:	4b21      	ldr	r3, [pc, #132]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf4a:	4b20      	ldr	r3, [pc, #128]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cf50:	4b1e      	ldr	r3, [pc, #120]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cf56:	4b1d      	ldr	r3, [pc, #116]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cf5c:	481b      	ldr	r0, [pc, #108]	; (800cfcc <USBD_LL_Init+0xbc>)
 800cf5e:	f7f6 fce1 	bl	8003924 <HAL_PCD_Init>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cf68:	f7f4 fffe 	bl	8001f68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cf72:	2318      	movs	r3, #24
 800cf74:	2200      	movs	r2, #0
 800cf76:	2100      	movs	r1, #0
 800cf78:	f7f8 f9e5 	bl	8005346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cf82:	2358      	movs	r3, #88	; 0x58
 800cf84:	2200      	movs	r2, #0
 800cf86:	2180      	movs	r1, #128	; 0x80
 800cf88:	f7f8 f9dd 	bl	8005346 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cf92:	23c0      	movs	r3, #192	; 0xc0
 800cf94:	2200      	movs	r2, #0
 800cf96:	2181      	movs	r1, #129	; 0x81
 800cf98:	f7f8 f9d5 	bl	8005346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfa2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	f7f8 f9cc 	bl	8005346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2182      	movs	r1, #130	; 0x82
 800cfbc:	f7f8 f9c3 	bl	8005346 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	200010e4 	.word	0x200010e4
 800cfd0:	40006800 	.word	0x40006800

0800cfd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f6 fda0 	bl	8003b30 <HAL_PCD_Start>
 800cff0:	4603      	mov	r3, r0
 800cff2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d816      	bhi.n	800d028 <USBD_LL_Start+0x54>
 800cffa:	a201      	add	r2, pc, #4	; (adr r2, 800d000 <USBD_LL_Start+0x2c>)
 800cffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d000:	0800d011 	.word	0x0800d011
 800d004:	0800d017 	.word	0x0800d017
 800d008:	0800d01d 	.word	0x0800d01d
 800d00c:	0800d023 	.word	0x0800d023
    case HAL_OK :
      usb_status = USBD_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	73fb      	strb	r3, [r7, #15]
    break;
 800d014:	e00b      	b.n	800d02e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d016:	2303      	movs	r3, #3
 800d018:	73fb      	strb	r3, [r7, #15]
    break;
 800d01a:	e008      	b.n	800d02e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d01c:	2301      	movs	r3, #1
 800d01e:	73fb      	strb	r3, [r7, #15]
    break;
 800d020:	e005      	b.n	800d02e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d022:	2303      	movs	r3, #3
 800d024:	73fb      	strb	r3, [r7, #15]
    break;
 800d026:	e002      	b.n	800d02e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d028:	2303      	movs	r3, #3
 800d02a:	73fb      	strb	r3, [r7, #15]
    break;
 800d02c:	bf00      	nop
  }
  return usb_status;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	4608      	mov	r0, r1
 800d042:	4611      	mov	r1, r2
 800d044:	461a      	mov	r2, r3
 800d046:	4603      	mov	r3, r0
 800d048:	70fb      	strb	r3, [r7, #3]
 800d04a:	460b      	mov	r3, r1
 800d04c:	70bb      	strb	r3, [r7, #2]
 800d04e:	4613      	mov	r3, r2
 800d050:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d060:	78bb      	ldrb	r3, [r7, #2]
 800d062:	883a      	ldrh	r2, [r7, #0]
 800d064:	78f9      	ldrb	r1, [r7, #3]
 800d066:	f7f6 fed1 	bl	8003e0c <HAL_PCD_EP_Open>
 800d06a:	4603      	mov	r3, r0
 800d06c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
 800d070:	2b03      	cmp	r3, #3
 800d072:	d817      	bhi.n	800d0a4 <USBD_LL_OpenEP+0x6c>
 800d074:	a201      	add	r2, pc, #4	; (adr r2, 800d07c <USBD_LL_OpenEP+0x44>)
 800d076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07a:	bf00      	nop
 800d07c:	0800d08d 	.word	0x0800d08d
 800d080:	0800d093 	.word	0x0800d093
 800d084:	0800d099 	.word	0x0800d099
 800d088:	0800d09f 	.word	0x0800d09f
    case HAL_OK :
      usb_status = USBD_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	73fb      	strb	r3, [r7, #15]
    break;
 800d090:	e00b      	b.n	800d0aa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d092:	2303      	movs	r3, #3
 800d094:	73fb      	strb	r3, [r7, #15]
    break;
 800d096:	e008      	b.n	800d0aa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d098:	2301      	movs	r3, #1
 800d09a:	73fb      	strb	r3, [r7, #15]
    break;
 800d09c:	e005      	b.n	800d0aa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a2:	e002      	b.n	800d0aa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a8:	bf00      	nop
  }
  return usb_status;
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7f6 fef7 	bl	8003ec6 <HAL_PCD_EP_Close>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d0dc:	7bbb      	ldrb	r3, [r7, #14]
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d816      	bhi.n	800d110 <USBD_LL_CloseEP+0x5c>
 800d0e2:	a201      	add	r2, pc, #4	; (adr r2, 800d0e8 <USBD_LL_CloseEP+0x34>)
 800d0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e8:	0800d0f9 	.word	0x0800d0f9
 800d0ec:	0800d0ff 	.word	0x0800d0ff
 800d0f0:	0800d105 	.word	0x0800d105
 800d0f4:	0800d10b 	.word	0x0800d10b
    case HAL_OK :
      usb_status = USBD_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0fc:	e00b      	b.n	800d116 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0fe:	2303      	movs	r3, #3
 800d100:	73fb      	strb	r3, [r7, #15]
    break;
 800d102:	e008      	b.n	800d116 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d104:	2301      	movs	r3, #1
 800d106:	73fb      	strb	r3, [r7, #15]
    break;
 800d108:	e005      	b.n	800d116 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d10a:	2303      	movs	r3, #3
 800d10c:	73fb      	strb	r3, [r7, #15]
    break;
 800d10e:	e002      	b.n	800d116 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d110:	2303      	movs	r3, #3
 800d112:	73fb      	strb	r3, [r7, #15]
    break;
 800d114:	bf00      	nop
  }
  return usb_status;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	460b      	mov	r3, r1
 800d12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d13a:	78fa      	ldrb	r2, [r7, #3]
 800d13c:	4611      	mov	r1, r2
 800d13e:	4618      	mov	r0, r3
 800d140:	f7f6 ff89 	bl	8004056 <HAL_PCD_EP_SetStall>
 800d144:	4603      	mov	r3, r0
 800d146:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d148:	7bbb      	ldrb	r3, [r7, #14]
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d816      	bhi.n	800d17c <USBD_LL_StallEP+0x5c>
 800d14e:	a201      	add	r2, pc, #4	; (adr r2, 800d154 <USBD_LL_StallEP+0x34>)
 800d150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d154:	0800d165 	.word	0x0800d165
 800d158:	0800d16b 	.word	0x0800d16b
 800d15c:	0800d171 	.word	0x0800d171
 800d160:	0800d177 	.word	0x0800d177
    case HAL_OK :
      usb_status = USBD_OK;
 800d164:	2300      	movs	r3, #0
 800d166:	73fb      	strb	r3, [r7, #15]
    break;
 800d168:	e00b      	b.n	800d182 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d16a:	2303      	movs	r3, #3
 800d16c:	73fb      	strb	r3, [r7, #15]
    break;
 800d16e:	e008      	b.n	800d182 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d170:	2301      	movs	r3, #1
 800d172:	73fb      	strb	r3, [r7, #15]
    break;
 800d174:	e005      	b.n	800d182 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d176:	2303      	movs	r3, #3
 800d178:	73fb      	strb	r3, [r7, #15]
    break;
 800d17a:	e002      	b.n	800d182 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d17c:	2303      	movs	r3, #3
 800d17e:	73fb      	strb	r3, [r7, #15]
    break;
 800d180:	bf00      	nop
  }
  return usb_status;
 800d182:	7bfb      	ldrb	r3, [r7, #15]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	460b      	mov	r3, r1
 800d196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1a6:	78fa      	ldrb	r2, [r7, #3]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7f6 ffb3 	bl	8004116 <HAL_PCD_EP_ClrStall>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d816      	bhi.n	800d1e8 <USBD_LL_ClearStallEP+0x5c>
 800d1ba:	a201      	add	r2, pc, #4	; (adr r2, 800d1c0 <USBD_LL_ClearStallEP+0x34>)
 800d1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c0:	0800d1d1 	.word	0x0800d1d1
 800d1c4:	0800d1d7 	.word	0x0800d1d7
 800d1c8:	0800d1dd 	.word	0x0800d1dd
 800d1cc:	0800d1e3 	.word	0x0800d1e3
    case HAL_OK :
      usb_status = USBD_OK;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d4:	e00b      	b.n	800d1ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1da:	e008      	b.n	800d1ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e0:	e005      	b.n	800d1ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e6:	e002      	b.n	800d1ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ec:	bf00      	nop
  }
  return usb_status;
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d20a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d20c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d210:	2b00      	cmp	r3, #0
 800d212:	da0c      	bge.n	800d22e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d214:	78fb      	ldrb	r3, [r7, #3]
 800d216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21a:	68f9      	ldr	r1, [r7, #12]
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	4613      	mov	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4413      	add	r3, r2
 800d224:	00db      	lsls	r3, r3, #3
 800d226:	440b      	add	r3, r1
 800d228:	3302      	adds	r3, #2
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	e00b      	b.n	800d246 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d22e:	78fb      	ldrb	r3, [r7, #3]
 800d230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d234:	68f9      	ldr	r1, [r7, #12]
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	00db      	lsls	r3, r3, #3
 800d23e:	440b      	add	r3, r1
 800d240:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d244:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
	...

0800d254 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f7f6 fda5 	bl	8003dc2 <HAL_PCD_SetAddress>
 800d278:	4603      	mov	r3, r0
 800d27a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d816      	bhi.n	800d2b0 <USBD_LL_SetUSBAddress+0x5c>
 800d282:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <USBD_LL_SetUSBAddress+0x34>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d299 	.word	0x0800d299
 800d28c:	0800d29f 	.word	0x0800d29f
 800d290:	0800d2a5 	.word	0x0800d2a5
 800d294:	0800d2ab 	.word	0x0800d2ab
    case HAL_OK :
      usb_status = USBD_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
    break;
 800d29c:	e00b      	b.n	800d2b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a2:	e008      	b.n	800d2b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a8:	e005      	b.n	800d2b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ae:	e002      	b.n	800d2b6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b4:	bf00      	nop
  }
  return usb_status;
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	607a      	str	r2, [r7, #4]
 800d2ca:	603b      	str	r3, [r7, #0]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2de:	7af9      	ldrb	r1, [r7, #11]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	f7f6 fe80 	bl	8003fe8 <HAL_PCD_EP_Transmit>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d2ec:	7dbb      	ldrb	r3, [r7, #22]
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	d816      	bhi.n	800d320 <USBD_LL_Transmit+0x60>
 800d2f2:	a201      	add	r2, pc, #4	; (adr r2, 800d2f8 <USBD_LL_Transmit+0x38>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d309 	.word	0x0800d309
 800d2fc:	0800d30f 	.word	0x0800d30f
 800d300:	0800d315 	.word	0x0800d315
 800d304:	0800d31b 	.word	0x0800d31b
    case HAL_OK :
      usb_status = USBD_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	75fb      	strb	r3, [r7, #23]
    break;
 800d30c:	e00b      	b.n	800d326 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d30e:	2303      	movs	r3, #3
 800d310:	75fb      	strb	r3, [r7, #23]
    break;
 800d312:	e008      	b.n	800d326 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d314:	2301      	movs	r3, #1
 800d316:	75fb      	strb	r3, [r7, #23]
    break;
 800d318:	e005      	b.n	800d326 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d31a:	2303      	movs	r3, #3
 800d31c:	75fb      	strb	r3, [r7, #23]
    break;
 800d31e:	e002      	b.n	800d326 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d320:	2303      	movs	r3, #3
 800d322:	75fb      	strb	r3, [r7, #23]
    break;
 800d324:	bf00      	nop
  }
  return usb_status;
 800d326:	7dfb      	ldrb	r3, [r7, #23]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	607a      	str	r2, [r7, #4]
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	460b      	mov	r3, r1
 800d33e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d34e:	7af9      	ldrb	r1, [r7, #11]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	f7f6 fdff 	bl	8003f56 <HAL_PCD_EP_Receive>
 800d358:	4603      	mov	r3, r0
 800d35a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d35c:	7dbb      	ldrb	r3, [r7, #22]
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d816      	bhi.n	800d390 <USBD_LL_PrepareReceive+0x60>
 800d362:	a201      	add	r2, pc, #4	; (adr r2, 800d368 <USBD_LL_PrepareReceive+0x38>)
 800d364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d368:	0800d379 	.word	0x0800d379
 800d36c:	0800d37f 	.word	0x0800d37f
 800d370:	0800d385 	.word	0x0800d385
 800d374:	0800d38b 	.word	0x0800d38b
    case HAL_OK :
      usb_status = USBD_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	75fb      	strb	r3, [r7, #23]
    break;
 800d37c:	e00b      	b.n	800d396 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d37e:	2303      	movs	r3, #3
 800d380:	75fb      	strb	r3, [r7, #23]
    break;
 800d382:	e008      	b.n	800d396 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d384:	2301      	movs	r3, #1
 800d386:	75fb      	strb	r3, [r7, #23]
    break;
 800d388:	e005      	b.n	800d396 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d38a:	2303      	movs	r3, #3
 800d38c:	75fb      	strb	r3, [r7, #23]
    break;
 800d38e:	e002      	b.n	800d396 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d390:	2303      	movs	r3, #3
 800d392:	75fb      	strb	r3, [r7, #23]
    break;
 800d394:	bf00      	nop
  }
  return usb_status;
 800d396:	7dfb      	ldrb	r3, [r7, #23]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3718      	adds	r7, #24
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3b2:	78fa      	ldrb	r2, [r7, #3]
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7f6 fdfe 	bl	8003fb8 <HAL_PCD_EP_GetRxCount>
 800d3bc:	4603      	mov	r3, r0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <HAL_PCDEx_LPM_Callback+0x18>
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d013      	beq.n	800d406 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d3de:	e023      	b.n	800d428 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d007      	beq.n	800d3f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d3e8:	f000 f83c 	bl	800d464 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3ec:	4b10      	ldr	r3, [pc, #64]	; (800d430 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	4a0f      	ldr	r2, [pc, #60]	; (800d430 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3f2:	f023 0306 	bic.w	r3, r3, #6
 800d3f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fabd 	bl	800b97e <USBD_LL_Resume>
    break;
 800d404:	e010      	b.n	800d428 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe fa9a 	bl	800b946 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d005      	beq.n	800d426 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <HAL_PCDEx_LPM_Callback+0x68>)
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	4a04      	ldr	r2, [pc, #16]	; (800d430 <HAL_PCDEx_LPM_Callback+0x68>)
 800d420:	f043 0306 	orr.w	r3, r3, #6
 800d424:	6113      	str	r3, [r2, #16]
    break;
 800d426:	bf00      	nop
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	e000ed00 	.word	0xe000ed00

0800d434 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d43c:	4b03      	ldr	r3, [pc, #12]	; (800d44c <USBD_static_malloc+0x18>)
}
 800d43e:	4618      	mov	r0, r3
 800d440:	370c      	adds	r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	200013dc 	.word	0x200013dc

0800d450 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

}
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d468:	f7f4 fcfa 	bl	8001e60 <SystemClock_Config>
}
 800d46c:	bf00      	nop
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <__cvt>:
 800d470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d474:	ec55 4b10 	vmov	r4, r5, d0
 800d478:	2d00      	cmp	r5, #0
 800d47a:	460e      	mov	r6, r1
 800d47c:	4619      	mov	r1, r3
 800d47e:	462b      	mov	r3, r5
 800d480:	bfbb      	ittet	lt
 800d482:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d486:	461d      	movlt	r5, r3
 800d488:	2300      	movge	r3, #0
 800d48a:	232d      	movlt	r3, #45	; 0x2d
 800d48c:	700b      	strb	r3, [r1, #0]
 800d48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d490:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d494:	4691      	mov	r9, r2
 800d496:	f023 0820 	bic.w	r8, r3, #32
 800d49a:	bfbc      	itt	lt
 800d49c:	4622      	movlt	r2, r4
 800d49e:	4614      	movlt	r4, r2
 800d4a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4a4:	d005      	beq.n	800d4b2 <__cvt+0x42>
 800d4a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d4aa:	d100      	bne.n	800d4ae <__cvt+0x3e>
 800d4ac:	3601      	adds	r6, #1
 800d4ae:	2102      	movs	r1, #2
 800d4b0:	e000      	b.n	800d4b4 <__cvt+0x44>
 800d4b2:	2103      	movs	r1, #3
 800d4b4:	ab03      	add	r3, sp, #12
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	ab02      	add	r3, sp, #8
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	ec45 4b10 	vmov	d0, r4, r5
 800d4c0:	4653      	mov	r3, sl
 800d4c2:	4632      	mov	r2, r6
 800d4c4:	f000 ff64 	bl	800e390 <_dtoa_r>
 800d4c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d4cc:	4607      	mov	r7, r0
 800d4ce:	d102      	bne.n	800d4d6 <__cvt+0x66>
 800d4d0:	f019 0f01 	tst.w	r9, #1
 800d4d4:	d022      	beq.n	800d51c <__cvt+0xac>
 800d4d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4da:	eb07 0906 	add.w	r9, r7, r6
 800d4de:	d110      	bne.n	800d502 <__cvt+0x92>
 800d4e0:	783b      	ldrb	r3, [r7, #0]
 800d4e2:	2b30      	cmp	r3, #48	; 0x30
 800d4e4:	d10a      	bne.n	800d4fc <__cvt+0x8c>
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	f7f3 faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4f2:	b918      	cbnz	r0, 800d4fc <__cvt+0x8c>
 800d4f4:	f1c6 0601 	rsb	r6, r6, #1
 800d4f8:	f8ca 6000 	str.w	r6, [sl]
 800d4fc:	f8da 3000 	ldr.w	r3, [sl]
 800d500:	4499      	add	r9, r3
 800d502:	2200      	movs	r2, #0
 800d504:	2300      	movs	r3, #0
 800d506:	4620      	mov	r0, r4
 800d508:	4629      	mov	r1, r5
 800d50a:	f7f3 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d50e:	b108      	cbz	r0, 800d514 <__cvt+0xa4>
 800d510:	f8cd 900c 	str.w	r9, [sp, #12]
 800d514:	2230      	movs	r2, #48	; 0x30
 800d516:	9b03      	ldr	r3, [sp, #12]
 800d518:	454b      	cmp	r3, r9
 800d51a:	d307      	bcc.n	800d52c <__cvt+0xbc>
 800d51c:	9b03      	ldr	r3, [sp, #12]
 800d51e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d520:	1bdb      	subs	r3, r3, r7
 800d522:	4638      	mov	r0, r7
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	b004      	add	sp, #16
 800d528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52c:	1c59      	adds	r1, r3, #1
 800d52e:	9103      	str	r1, [sp, #12]
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	e7f0      	b.n	800d516 <__cvt+0xa6>

0800d534 <__exponent>:
 800d534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d536:	4603      	mov	r3, r0
 800d538:	2900      	cmp	r1, #0
 800d53a:	bfb8      	it	lt
 800d53c:	4249      	neglt	r1, r1
 800d53e:	f803 2b02 	strb.w	r2, [r3], #2
 800d542:	bfb4      	ite	lt
 800d544:	222d      	movlt	r2, #45	; 0x2d
 800d546:	222b      	movge	r2, #43	; 0x2b
 800d548:	2909      	cmp	r1, #9
 800d54a:	7042      	strb	r2, [r0, #1]
 800d54c:	dd2a      	ble.n	800d5a4 <__exponent+0x70>
 800d54e:	f10d 0207 	add.w	r2, sp, #7
 800d552:	4617      	mov	r7, r2
 800d554:	260a      	movs	r6, #10
 800d556:	4694      	mov	ip, r2
 800d558:	fb91 f5f6 	sdiv	r5, r1, r6
 800d55c:	fb06 1415 	mls	r4, r6, r5, r1
 800d560:	3430      	adds	r4, #48	; 0x30
 800d562:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d566:	460c      	mov	r4, r1
 800d568:	2c63      	cmp	r4, #99	; 0x63
 800d56a:	f102 32ff 	add.w	r2, r2, #4294967295
 800d56e:	4629      	mov	r1, r5
 800d570:	dcf1      	bgt.n	800d556 <__exponent+0x22>
 800d572:	3130      	adds	r1, #48	; 0x30
 800d574:	f1ac 0402 	sub.w	r4, ip, #2
 800d578:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d57c:	1c41      	adds	r1, r0, #1
 800d57e:	4622      	mov	r2, r4
 800d580:	42ba      	cmp	r2, r7
 800d582:	d30a      	bcc.n	800d59a <__exponent+0x66>
 800d584:	f10d 0209 	add.w	r2, sp, #9
 800d588:	eba2 020c 	sub.w	r2, r2, ip
 800d58c:	42bc      	cmp	r4, r7
 800d58e:	bf88      	it	hi
 800d590:	2200      	movhi	r2, #0
 800d592:	4413      	add	r3, r2
 800d594:	1a18      	subs	r0, r3, r0
 800d596:	b003      	add	sp, #12
 800d598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d59a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d59e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d5a2:	e7ed      	b.n	800d580 <__exponent+0x4c>
 800d5a4:	2330      	movs	r3, #48	; 0x30
 800d5a6:	3130      	adds	r1, #48	; 0x30
 800d5a8:	7083      	strb	r3, [r0, #2]
 800d5aa:	70c1      	strb	r1, [r0, #3]
 800d5ac:	1d03      	adds	r3, r0, #4
 800d5ae:	e7f1      	b.n	800d594 <__exponent+0x60>

0800d5b0 <_printf_float>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	ed2d 8b02 	vpush	{d8}
 800d5b8:	b08d      	sub	sp, #52	; 0x34
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d5c0:	4616      	mov	r6, r2
 800d5c2:	461f      	mov	r7, r3
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	f000 fdd7 	bl	800e178 <_localeconv_r>
 800d5ca:	f8d0 a000 	ldr.w	sl, [r0]
 800d5ce:	4650      	mov	r0, sl
 800d5d0:	f7f2 fe4e 	bl	8000270 <strlen>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	9305      	str	r3, [sp, #20]
 800d5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d5e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d5e4:	3307      	adds	r3, #7
 800d5e6:	f023 0307 	bic.w	r3, r3, #7
 800d5ea:	f103 0208 	add.w	r2, r3, #8
 800d5ee:	f8c8 2000 	str.w	r2, [r8]
 800d5f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d5fa:	9307      	str	r3, [sp, #28]
 800d5fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800d600:	ee08 0a10 	vmov	s16, r0
 800d604:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d60c:	4b9e      	ldr	r3, [pc, #632]	; (800d888 <_printf_float+0x2d8>)
 800d60e:	f04f 32ff 	mov.w	r2, #4294967295
 800d612:	f7f3 fa8b 	bl	8000b2c <__aeabi_dcmpun>
 800d616:	bb88      	cbnz	r0, 800d67c <_printf_float+0xcc>
 800d618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d61c:	4b9a      	ldr	r3, [pc, #616]	; (800d888 <_printf_float+0x2d8>)
 800d61e:	f04f 32ff 	mov.w	r2, #4294967295
 800d622:	f7f3 fa65 	bl	8000af0 <__aeabi_dcmple>
 800d626:	bb48      	cbnz	r0, 800d67c <_printf_float+0xcc>
 800d628:	2200      	movs	r2, #0
 800d62a:	2300      	movs	r3, #0
 800d62c:	4640      	mov	r0, r8
 800d62e:	4649      	mov	r1, r9
 800d630:	f7f3 fa54 	bl	8000adc <__aeabi_dcmplt>
 800d634:	b110      	cbz	r0, 800d63c <_printf_float+0x8c>
 800d636:	232d      	movs	r3, #45	; 0x2d
 800d638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d63c:	4a93      	ldr	r2, [pc, #588]	; (800d88c <_printf_float+0x2dc>)
 800d63e:	4b94      	ldr	r3, [pc, #592]	; (800d890 <_printf_float+0x2e0>)
 800d640:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d644:	bf94      	ite	ls
 800d646:	4690      	movls	r8, r2
 800d648:	4698      	movhi	r8, r3
 800d64a:	2303      	movs	r3, #3
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	9b05      	ldr	r3, [sp, #20]
 800d650:	f023 0304 	bic.w	r3, r3, #4
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	f04f 0900 	mov.w	r9, #0
 800d65a:	9700      	str	r7, [sp, #0]
 800d65c:	4633      	mov	r3, r6
 800d65e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d660:	4621      	mov	r1, r4
 800d662:	4628      	mov	r0, r5
 800d664:	f000 f9da 	bl	800da1c <_printf_common>
 800d668:	3001      	adds	r0, #1
 800d66a:	f040 8090 	bne.w	800d78e <_printf_float+0x1de>
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295
 800d672:	b00d      	add	sp, #52	; 0x34
 800d674:	ecbd 8b02 	vpop	{d8}
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67c:	4642      	mov	r2, r8
 800d67e:	464b      	mov	r3, r9
 800d680:	4640      	mov	r0, r8
 800d682:	4649      	mov	r1, r9
 800d684:	f7f3 fa52 	bl	8000b2c <__aeabi_dcmpun>
 800d688:	b140      	cbz	r0, 800d69c <_printf_float+0xec>
 800d68a:	464b      	mov	r3, r9
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	bfbc      	itt	lt
 800d690:	232d      	movlt	r3, #45	; 0x2d
 800d692:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d696:	4a7f      	ldr	r2, [pc, #508]	; (800d894 <_printf_float+0x2e4>)
 800d698:	4b7f      	ldr	r3, [pc, #508]	; (800d898 <_printf_float+0x2e8>)
 800d69a:	e7d1      	b.n	800d640 <_printf_float+0x90>
 800d69c:	6863      	ldr	r3, [r4, #4]
 800d69e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d6a2:	9206      	str	r2, [sp, #24]
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	d13f      	bne.n	800d728 <_printf_float+0x178>
 800d6a8:	2306      	movs	r3, #6
 800d6aa:	6063      	str	r3, [r4, #4]
 800d6ac:	9b05      	ldr	r3, [sp, #20]
 800d6ae:	6861      	ldr	r1, [r4, #4]
 800d6b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9303      	str	r3, [sp, #12]
 800d6b8:	ab0a      	add	r3, sp, #40	; 0x28
 800d6ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d6be:	ab09      	add	r3, sp, #36	; 0x24
 800d6c0:	ec49 8b10 	vmov	d0, r8, r9
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	6022      	str	r2, [r4, #0]
 800d6c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f7ff fecf 	bl	800d470 <__cvt>
 800d6d2:	9b06      	ldr	r3, [sp, #24]
 800d6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6d6:	2b47      	cmp	r3, #71	; 0x47
 800d6d8:	4680      	mov	r8, r0
 800d6da:	d108      	bne.n	800d6ee <_printf_float+0x13e>
 800d6dc:	1cc8      	adds	r0, r1, #3
 800d6de:	db02      	blt.n	800d6e6 <_printf_float+0x136>
 800d6e0:	6863      	ldr	r3, [r4, #4]
 800d6e2:	4299      	cmp	r1, r3
 800d6e4:	dd41      	ble.n	800d76a <_printf_float+0x1ba>
 800d6e6:	f1ab 0302 	sub.w	r3, fp, #2
 800d6ea:	fa5f fb83 	uxtb.w	fp, r3
 800d6ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d6f2:	d820      	bhi.n	800d736 <_printf_float+0x186>
 800d6f4:	3901      	subs	r1, #1
 800d6f6:	465a      	mov	r2, fp
 800d6f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d6fc:	9109      	str	r1, [sp, #36]	; 0x24
 800d6fe:	f7ff ff19 	bl	800d534 <__exponent>
 800d702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d704:	1813      	adds	r3, r2, r0
 800d706:	2a01      	cmp	r2, #1
 800d708:	4681      	mov	r9, r0
 800d70a:	6123      	str	r3, [r4, #16]
 800d70c:	dc02      	bgt.n	800d714 <_printf_float+0x164>
 800d70e:	6822      	ldr	r2, [r4, #0]
 800d710:	07d2      	lsls	r2, r2, #31
 800d712:	d501      	bpl.n	800d718 <_printf_float+0x168>
 800d714:	3301      	adds	r3, #1
 800d716:	6123      	str	r3, [r4, #16]
 800d718:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d09c      	beq.n	800d65a <_printf_float+0xaa>
 800d720:	232d      	movs	r3, #45	; 0x2d
 800d722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d726:	e798      	b.n	800d65a <_printf_float+0xaa>
 800d728:	9a06      	ldr	r2, [sp, #24]
 800d72a:	2a47      	cmp	r2, #71	; 0x47
 800d72c:	d1be      	bne.n	800d6ac <_printf_float+0xfc>
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1bc      	bne.n	800d6ac <_printf_float+0xfc>
 800d732:	2301      	movs	r3, #1
 800d734:	e7b9      	b.n	800d6aa <_printf_float+0xfa>
 800d736:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d73a:	d118      	bne.n	800d76e <_printf_float+0x1be>
 800d73c:	2900      	cmp	r1, #0
 800d73e:	6863      	ldr	r3, [r4, #4]
 800d740:	dd0b      	ble.n	800d75a <_printf_float+0x1aa>
 800d742:	6121      	str	r1, [r4, #16]
 800d744:	b913      	cbnz	r3, 800d74c <_printf_float+0x19c>
 800d746:	6822      	ldr	r2, [r4, #0]
 800d748:	07d0      	lsls	r0, r2, #31
 800d74a:	d502      	bpl.n	800d752 <_printf_float+0x1a2>
 800d74c:	3301      	adds	r3, #1
 800d74e:	440b      	add	r3, r1
 800d750:	6123      	str	r3, [r4, #16]
 800d752:	65a1      	str	r1, [r4, #88]	; 0x58
 800d754:	f04f 0900 	mov.w	r9, #0
 800d758:	e7de      	b.n	800d718 <_printf_float+0x168>
 800d75a:	b913      	cbnz	r3, 800d762 <_printf_float+0x1b2>
 800d75c:	6822      	ldr	r2, [r4, #0]
 800d75e:	07d2      	lsls	r2, r2, #31
 800d760:	d501      	bpl.n	800d766 <_printf_float+0x1b6>
 800d762:	3302      	adds	r3, #2
 800d764:	e7f4      	b.n	800d750 <_printf_float+0x1a0>
 800d766:	2301      	movs	r3, #1
 800d768:	e7f2      	b.n	800d750 <_printf_float+0x1a0>
 800d76a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d770:	4299      	cmp	r1, r3
 800d772:	db05      	blt.n	800d780 <_printf_float+0x1d0>
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	6121      	str	r1, [r4, #16]
 800d778:	07d8      	lsls	r0, r3, #31
 800d77a:	d5ea      	bpl.n	800d752 <_printf_float+0x1a2>
 800d77c:	1c4b      	adds	r3, r1, #1
 800d77e:	e7e7      	b.n	800d750 <_printf_float+0x1a0>
 800d780:	2900      	cmp	r1, #0
 800d782:	bfd4      	ite	le
 800d784:	f1c1 0202 	rsble	r2, r1, #2
 800d788:	2201      	movgt	r2, #1
 800d78a:	4413      	add	r3, r2
 800d78c:	e7e0      	b.n	800d750 <_printf_float+0x1a0>
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	055a      	lsls	r2, r3, #21
 800d792:	d407      	bmi.n	800d7a4 <_printf_float+0x1f4>
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	4642      	mov	r2, r8
 800d798:	4631      	mov	r1, r6
 800d79a:	4628      	mov	r0, r5
 800d79c:	47b8      	blx	r7
 800d79e:	3001      	adds	r0, #1
 800d7a0:	d12c      	bne.n	800d7fc <_printf_float+0x24c>
 800d7a2:	e764      	b.n	800d66e <_printf_float+0xbe>
 800d7a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7a8:	f240 80e0 	bls.w	800d96c <_printf_float+0x3bc>
 800d7ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f7f3 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d034      	beq.n	800d826 <_printf_float+0x276>
 800d7bc:	4a37      	ldr	r2, [pc, #220]	; (800d89c <_printf_float+0x2ec>)
 800d7be:	2301      	movs	r3, #1
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	47b8      	blx	r7
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	f43f af51 	beq.w	800d66e <_printf_float+0xbe>
 800d7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	db02      	blt.n	800d7da <_printf_float+0x22a>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	07d8      	lsls	r0, r3, #31
 800d7d8:	d510      	bpl.n	800d7fc <_printf_float+0x24c>
 800d7da:	ee18 3a10 	vmov	r3, s16
 800d7de:	4652      	mov	r2, sl
 800d7e0:	4631      	mov	r1, r6
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	47b8      	blx	r7
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	f43f af41 	beq.w	800d66e <_printf_float+0xbe>
 800d7ec:	f04f 0800 	mov.w	r8, #0
 800d7f0:	f104 091a 	add.w	r9, r4, #26
 800d7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	4543      	cmp	r3, r8
 800d7fa:	dc09      	bgt.n	800d810 <_printf_float+0x260>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	079b      	lsls	r3, r3, #30
 800d800:	f100 8107 	bmi.w	800da12 <_printf_float+0x462>
 800d804:	68e0      	ldr	r0, [r4, #12]
 800d806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d808:	4298      	cmp	r0, r3
 800d80a:	bfb8      	it	lt
 800d80c:	4618      	movlt	r0, r3
 800d80e:	e730      	b.n	800d672 <_printf_float+0xc2>
 800d810:	2301      	movs	r3, #1
 800d812:	464a      	mov	r2, r9
 800d814:	4631      	mov	r1, r6
 800d816:	4628      	mov	r0, r5
 800d818:	47b8      	blx	r7
 800d81a:	3001      	adds	r0, #1
 800d81c:	f43f af27 	beq.w	800d66e <_printf_float+0xbe>
 800d820:	f108 0801 	add.w	r8, r8, #1
 800d824:	e7e6      	b.n	800d7f4 <_printf_float+0x244>
 800d826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dc39      	bgt.n	800d8a0 <_printf_float+0x2f0>
 800d82c:	4a1b      	ldr	r2, [pc, #108]	; (800d89c <_printf_float+0x2ec>)
 800d82e:	2301      	movs	r3, #1
 800d830:	4631      	mov	r1, r6
 800d832:	4628      	mov	r0, r5
 800d834:	47b8      	blx	r7
 800d836:	3001      	adds	r0, #1
 800d838:	f43f af19 	beq.w	800d66e <_printf_float+0xbe>
 800d83c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d840:	4313      	orrs	r3, r2
 800d842:	d102      	bne.n	800d84a <_printf_float+0x29a>
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	07d9      	lsls	r1, r3, #31
 800d848:	d5d8      	bpl.n	800d7fc <_printf_float+0x24c>
 800d84a:	ee18 3a10 	vmov	r3, s16
 800d84e:	4652      	mov	r2, sl
 800d850:	4631      	mov	r1, r6
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	f43f af09 	beq.w	800d66e <_printf_float+0xbe>
 800d85c:	f04f 0900 	mov.w	r9, #0
 800d860:	f104 0a1a 	add.w	sl, r4, #26
 800d864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d866:	425b      	negs	r3, r3
 800d868:	454b      	cmp	r3, r9
 800d86a:	dc01      	bgt.n	800d870 <_printf_float+0x2c0>
 800d86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d86e:	e792      	b.n	800d796 <_printf_float+0x1e6>
 800d870:	2301      	movs	r3, #1
 800d872:	4652      	mov	r2, sl
 800d874:	4631      	mov	r1, r6
 800d876:	4628      	mov	r0, r5
 800d878:	47b8      	blx	r7
 800d87a:	3001      	adds	r0, #1
 800d87c:	f43f aef7 	beq.w	800d66e <_printf_float+0xbe>
 800d880:	f109 0901 	add.w	r9, r9, #1
 800d884:	e7ee      	b.n	800d864 <_printf_float+0x2b4>
 800d886:	bf00      	nop
 800d888:	7fefffff 	.word	0x7fefffff
 800d88c:	0801066c 	.word	0x0801066c
 800d890:	08010670 	.word	0x08010670
 800d894:	08010674 	.word	0x08010674
 800d898:	08010678 	.word	0x08010678
 800d89c:	0801067c 	.word	0x0801067c
 800d8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	bfa8      	it	ge
 800d8a8:	461a      	movge	r2, r3
 800d8aa:	2a00      	cmp	r2, #0
 800d8ac:	4691      	mov	r9, r2
 800d8ae:	dc37      	bgt.n	800d920 <_printf_float+0x370>
 800d8b0:	f04f 0b00 	mov.w	fp, #0
 800d8b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8b8:	f104 021a 	add.w	r2, r4, #26
 800d8bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8be:	9305      	str	r3, [sp, #20]
 800d8c0:	eba3 0309 	sub.w	r3, r3, r9
 800d8c4:	455b      	cmp	r3, fp
 800d8c6:	dc33      	bgt.n	800d930 <_printf_float+0x380>
 800d8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	db3b      	blt.n	800d948 <_printf_float+0x398>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	07da      	lsls	r2, r3, #31
 800d8d4:	d438      	bmi.n	800d948 <_printf_float+0x398>
 800d8d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d8da:	eba2 0903 	sub.w	r9, r2, r3
 800d8de:	9b05      	ldr	r3, [sp, #20]
 800d8e0:	1ad2      	subs	r2, r2, r3
 800d8e2:	4591      	cmp	r9, r2
 800d8e4:	bfa8      	it	ge
 800d8e6:	4691      	movge	r9, r2
 800d8e8:	f1b9 0f00 	cmp.w	r9, #0
 800d8ec:	dc35      	bgt.n	800d95a <_printf_float+0x3aa>
 800d8ee:	f04f 0800 	mov.w	r8, #0
 800d8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8f6:	f104 0a1a 	add.w	sl, r4, #26
 800d8fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	eba3 0309 	sub.w	r3, r3, r9
 800d904:	4543      	cmp	r3, r8
 800d906:	f77f af79 	ble.w	800d7fc <_printf_float+0x24c>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4652      	mov	r2, sl
 800d90e:	4631      	mov	r1, r6
 800d910:	4628      	mov	r0, r5
 800d912:	47b8      	blx	r7
 800d914:	3001      	adds	r0, #1
 800d916:	f43f aeaa 	beq.w	800d66e <_printf_float+0xbe>
 800d91a:	f108 0801 	add.w	r8, r8, #1
 800d91e:	e7ec      	b.n	800d8fa <_printf_float+0x34a>
 800d920:	4613      	mov	r3, r2
 800d922:	4631      	mov	r1, r6
 800d924:	4642      	mov	r2, r8
 800d926:	4628      	mov	r0, r5
 800d928:	47b8      	blx	r7
 800d92a:	3001      	adds	r0, #1
 800d92c:	d1c0      	bne.n	800d8b0 <_printf_float+0x300>
 800d92e:	e69e      	b.n	800d66e <_printf_float+0xbe>
 800d930:	2301      	movs	r3, #1
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	9205      	str	r2, [sp, #20]
 800d938:	47b8      	blx	r7
 800d93a:	3001      	adds	r0, #1
 800d93c:	f43f ae97 	beq.w	800d66e <_printf_float+0xbe>
 800d940:	9a05      	ldr	r2, [sp, #20]
 800d942:	f10b 0b01 	add.w	fp, fp, #1
 800d946:	e7b9      	b.n	800d8bc <_printf_float+0x30c>
 800d948:	ee18 3a10 	vmov	r3, s16
 800d94c:	4652      	mov	r2, sl
 800d94e:	4631      	mov	r1, r6
 800d950:	4628      	mov	r0, r5
 800d952:	47b8      	blx	r7
 800d954:	3001      	adds	r0, #1
 800d956:	d1be      	bne.n	800d8d6 <_printf_float+0x326>
 800d958:	e689      	b.n	800d66e <_printf_float+0xbe>
 800d95a:	9a05      	ldr	r2, [sp, #20]
 800d95c:	464b      	mov	r3, r9
 800d95e:	4442      	add	r2, r8
 800d960:	4631      	mov	r1, r6
 800d962:	4628      	mov	r0, r5
 800d964:	47b8      	blx	r7
 800d966:	3001      	adds	r0, #1
 800d968:	d1c1      	bne.n	800d8ee <_printf_float+0x33e>
 800d96a:	e680      	b.n	800d66e <_printf_float+0xbe>
 800d96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d96e:	2a01      	cmp	r2, #1
 800d970:	dc01      	bgt.n	800d976 <_printf_float+0x3c6>
 800d972:	07db      	lsls	r3, r3, #31
 800d974:	d53a      	bpl.n	800d9ec <_printf_float+0x43c>
 800d976:	2301      	movs	r3, #1
 800d978:	4642      	mov	r2, r8
 800d97a:	4631      	mov	r1, r6
 800d97c:	4628      	mov	r0, r5
 800d97e:	47b8      	blx	r7
 800d980:	3001      	adds	r0, #1
 800d982:	f43f ae74 	beq.w	800d66e <_printf_float+0xbe>
 800d986:	ee18 3a10 	vmov	r3, s16
 800d98a:	4652      	mov	r2, sl
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	47b8      	blx	r7
 800d992:	3001      	adds	r0, #1
 800d994:	f43f ae6b 	beq.w	800d66e <_printf_float+0xbe>
 800d998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d99c:	2200      	movs	r2, #0
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d9a4:	f7f3 f890 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9a8:	b9d8      	cbnz	r0, 800d9e2 <_printf_float+0x432>
 800d9aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d9ae:	f108 0201 	add.w	r2, r8, #1
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	47b8      	blx	r7
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d10e      	bne.n	800d9da <_printf_float+0x42a>
 800d9bc:	e657      	b.n	800d66e <_printf_float+0xbe>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	4652      	mov	r2, sl
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b8      	blx	r7
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f43f ae50 	beq.w	800d66e <_printf_float+0xbe>
 800d9ce:	f108 0801 	add.w	r8, r8, #1
 800d9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	4543      	cmp	r3, r8
 800d9d8:	dcf1      	bgt.n	800d9be <_printf_float+0x40e>
 800d9da:	464b      	mov	r3, r9
 800d9dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9e0:	e6da      	b.n	800d798 <_printf_float+0x1e8>
 800d9e2:	f04f 0800 	mov.w	r8, #0
 800d9e6:	f104 0a1a 	add.w	sl, r4, #26
 800d9ea:	e7f2      	b.n	800d9d2 <_printf_float+0x422>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	4642      	mov	r2, r8
 800d9f0:	e7df      	b.n	800d9b2 <_printf_float+0x402>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	464a      	mov	r2, r9
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	f43f ae36 	beq.w	800d66e <_printf_float+0xbe>
 800da02:	f108 0801 	add.w	r8, r8, #1
 800da06:	68e3      	ldr	r3, [r4, #12]
 800da08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da0a:	1a5b      	subs	r3, r3, r1
 800da0c:	4543      	cmp	r3, r8
 800da0e:	dcf0      	bgt.n	800d9f2 <_printf_float+0x442>
 800da10:	e6f8      	b.n	800d804 <_printf_float+0x254>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 0919 	add.w	r9, r4, #25
 800da1a:	e7f4      	b.n	800da06 <_printf_float+0x456>

0800da1c <_printf_common>:
 800da1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	4616      	mov	r6, r2
 800da22:	4699      	mov	r9, r3
 800da24:	688a      	ldr	r2, [r1, #8]
 800da26:	690b      	ldr	r3, [r1, #16]
 800da28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da2c:	4293      	cmp	r3, r2
 800da2e:	bfb8      	it	lt
 800da30:	4613      	movlt	r3, r2
 800da32:	6033      	str	r3, [r6, #0]
 800da34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da38:	4607      	mov	r7, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	b10a      	cbz	r2, 800da42 <_printf_common+0x26>
 800da3e:	3301      	adds	r3, #1
 800da40:	6033      	str	r3, [r6, #0]
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	0699      	lsls	r1, r3, #26
 800da46:	bf42      	ittt	mi
 800da48:	6833      	ldrmi	r3, [r6, #0]
 800da4a:	3302      	addmi	r3, #2
 800da4c:	6033      	strmi	r3, [r6, #0]
 800da4e:	6825      	ldr	r5, [r4, #0]
 800da50:	f015 0506 	ands.w	r5, r5, #6
 800da54:	d106      	bne.n	800da64 <_printf_common+0x48>
 800da56:	f104 0a19 	add.w	sl, r4, #25
 800da5a:	68e3      	ldr	r3, [r4, #12]
 800da5c:	6832      	ldr	r2, [r6, #0]
 800da5e:	1a9b      	subs	r3, r3, r2
 800da60:	42ab      	cmp	r3, r5
 800da62:	dc26      	bgt.n	800dab2 <_printf_common+0x96>
 800da64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da68:	1e13      	subs	r3, r2, #0
 800da6a:	6822      	ldr	r2, [r4, #0]
 800da6c:	bf18      	it	ne
 800da6e:	2301      	movne	r3, #1
 800da70:	0692      	lsls	r2, r2, #26
 800da72:	d42b      	bmi.n	800dacc <_printf_common+0xb0>
 800da74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da78:	4649      	mov	r1, r9
 800da7a:	4638      	mov	r0, r7
 800da7c:	47c0      	blx	r8
 800da7e:	3001      	adds	r0, #1
 800da80:	d01e      	beq.n	800dac0 <_printf_common+0xa4>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	6922      	ldr	r2, [r4, #16]
 800da86:	f003 0306 	and.w	r3, r3, #6
 800da8a:	2b04      	cmp	r3, #4
 800da8c:	bf02      	ittt	eq
 800da8e:	68e5      	ldreq	r5, [r4, #12]
 800da90:	6833      	ldreq	r3, [r6, #0]
 800da92:	1aed      	subeq	r5, r5, r3
 800da94:	68a3      	ldr	r3, [r4, #8]
 800da96:	bf0c      	ite	eq
 800da98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da9c:	2500      	movne	r5, #0
 800da9e:	4293      	cmp	r3, r2
 800daa0:	bfc4      	itt	gt
 800daa2:	1a9b      	subgt	r3, r3, r2
 800daa4:	18ed      	addgt	r5, r5, r3
 800daa6:	2600      	movs	r6, #0
 800daa8:	341a      	adds	r4, #26
 800daaa:	42b5      	cmp	r5, r6
 800daac:	d11a      	bne.n	800dae4 <_printf_common+0xc8>
 800daae:	2000      	movs	r0, #0
 800dab0:	e008      	b.n	800dac4 <_printf_common+0xa8>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4652      	mov	r2, sl
 800dab6:	4649      	mov	r1, r9
 800dab8:	4638      	mov	r0, r7
 800daba:	47c0      	blx	r8
 800dabc:	3001      	adds	r0, #1
 800dabe:	d103      	bne.n	800dac8 <_printf_common+0xac>
 800dac0:	f04f 30ff 	mov.w	r0, #4294967295
 800dac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac8:	3501      	adds	r5, #1
 800daca:	e7c6      	b.n	800da5a <_printf_common+0x3e>
 800dacc:	18e1      	adds	r1, r4, r3
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	2030      	movs	r0, #48	; 0x30
 800dad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dad6:	4422      	add	r2, r4
 800dad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dadc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dae0:	3302      	adds	r3, #2
 800dae2:	e7c7      	b.n	800da74 <_printf_common+0x58>
 800dae4:	2301      	movs	r3, #1
 800dae6:	4622      	mov	r2, r4
 800dae8:	4649      	mov	r1, r9
 800daea:	4638      	mov	r0, r7
 800daec:	47c0      	blx	r8
 800daee:	3001      	adds	r0, #1
 800daf0:	d0e6      	beq.n	800dac0 <_printf_common+0xa4>
 800daf2:	3601      	adds	r6, #1
 800daf4:	e7d9      	b.n	800daaa <_printf_common+0x8e>
	...

0800daf8 <_printf_i>:
 800daf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dafc:	7e0f      	ldrb	r7, [r1, #24]
 800dafe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db00:	2f78      	cmp	r7, #120	; 0x78
 800db02:	4691      	mov	r9, r2
 800db04:	4680      	mov	r8, r0
 800db06:	460c      	mov	r4, r1
 800db08:	469a      	mov	sl, r3
 800db0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db0e:	d807      	bhi.n	800db20 <_printf_i+0x28>
 800db10:	2f62      	cmp	r7, #98	; 0x62
 800db12:	d80a      	bhi.n	800db2a <_printf_i+0x32>
 800db14:	2f00      	cmp	r7, #0
 800db16:	f000 80d4 	beq.w	800dcc2 <_printf_i+0x1ca>
 800db1a:	2f58      	cmp	r7, #88	; 0x58
 800db1c:	f000 80c0 	beq.w	800dca0 <_printf_i+0x1a8>
 800db20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db28:	e03a      	b.n	800dba0 <_printf_i+0xa8>
 800db2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db2e:	2b15      	cmp	r3, #21
 800db30:	d8f6      	bhi.n	800db20 <_printf_i+0x28>
 800db32:	a101      	add	r1, pc, #4	; (adr r1, 800db38 <_printf_i+0x40>)
 800db34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db38:	0800db91 	.word	0x0800db91
 800db3c:	0800dba5 	.word	0x0800dba5
 800db40:	0800db21 	.word	0x0800db21
 800db44:	0800db21 	.word	0x0800db21
 800db48:	0800db21 	.word	0x0800db21
 800db4c:	0800db21 	.word	0x0800db21
 800db50:	0800dba5 	.word	0x0800dba5
 800db54:	0800db21 	.word	0x0800db21
 800db58:	0800db21 	.word	0x0800db21
 800db5c:	0800db21 	.word	0x0800db21
 800db60:	0800db21 	.word	0x0800db21
 800db64:	0800dca9 	.word	0x0800dca9
 800db68:	0800dbd1 	.word	0x0800dbd1
 800db6c:	0800dc63 	.word	0x0800dc63
 800db70:	0800db21 	.word	0x0800db21
 800db74:	0800db21 	.word	0x0800db21
 800db78:	0800dccb 	.word	0x0800dccb
 800db7c:	0800db21 	.word	0x0800db21
 800db80:	0800dbd1 	.word	0x0800dbd1
 800db84:	0800db21 	.word	0x0800db21
 800db88:	0800db21 	.word	0x0800db21
 800db8c:	0800dc6b 	.word	0x0800dc6b
 800db90:	682b      	ldr	r3, [r5, #0]
 800db92:	1d1a      	adds	r2, r3, #4
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	602a      	str	r2, [r5, #0]
 800db98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dba0:	2301      	movs	r3, #1
 800dba2:	e09f      	b.n	800dce4 <_printf_i+0x1ec>
 800dba4:	6820      	ldr	r0, [r4, #0]
 800dba6:	682b      	ldr	r3, [r5, #0]
 800dba8:	0607      	lsls	r7, r0, #24
 800dbaa:	f103 0104 	add.w	r1, r3, #4
 800dbae:	6029      	str	r1, [r5, #0]
 800dbb0:	d501      	bpl.n	800dbb6 <_printf_i+0xbe>
 800dbb2:	681e      	ldr	r6, [r3, #0]
 800dbb4:	e003      	b.n	800dbbe <_printf_i+0xc6>
 800dbb6:	0646      	lsls	r6, r0, #25
 800dbb8:	d5fb      	bpl.n	800dbb2 <_printf_i+0xba>
 800dbba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dbbe:	2e00      	cmp	r6, #0
 800dbc0:	da03      	bge.n	800dbca <_printf_i+0xd2>
 800dbc2:	232d      	movs	r3, #45	; 0x2d
 800dbc4:	4276      	negs	r6, r6
 800dbc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbca:	485a      	ldr	r0, [pc, #360]	; (800dd34 <_printf_i+0x23c>)
 800dbcc:	230a      	movs	r3, #10
 800dbce:	e012      	b.n	800dbf6 <_printf_i+0xfe>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	6820      	ldr	r0, [r4, #0]
 800dbd4:	1d19      	adds	r1, r3, #4
 800dbd6:	6029      	str	r1, [r5, #0]
 800dbd8:	0605      	lsls	r5, r0, #24
 800dbda:	d501      	bpl.n	800dbe0 <_printf_i+0xe8>
 800dbdc:	681e      	ldr	r6, [r3, #0]
 800dbde:	e002      	b.n	800dbe6 <_printf_i+0xee>
 800dbe0:	0641      	lsls	r1, r0, #25
 800dbe2:	d5fb      	bpl.n	800dbdc <_printf_i+0xe4>
 800dbe4:	881e      	ldrh	r6, [r3, #0]
 800dbe6:	4853      	ldr	r0, [pc, #332]	; (800dd34 <_printf_i+0x23c>)
 800dbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800dbea:	bf0c      	ite	eq
 800dbec:	2308      	moveq	r3, #8
 800dbee:	230a      	movne	r3, #10
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbf6:	6865      	ldr	r5, [r4, #4]
 800dbf8:	60a5      	str	r5, [r4, #8]
 800dbfa:	2d00      	cmp	r5, #0
 800dbfc:	bfa2      	ittt	ge
 800dbfe:	6821      	ldrge	r1, [r4, #0]
 800dc00:	f021 0104 	bicge.w	r1, r1, #4
 800dc04:	6021      	strge	r1, [r4, #0]
 800dc06:	b90e      	cbnz	r6, 800dc0c <_printf_i+0x114>
 800dc08:	2d00      	cmp	r5, #0
 800dc0a:	d04b      	beq.n	800dca4 <_printf_i+0x1ac>
 800dc0c:	4615      	mov	r5, r2
 800dc0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc12:	fb03 6711 	mls	r7, r3, r1, r6
 800dc16:	5dc7      	ldrb	r7, [r0, r7]
 800dc18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc1c:	4637      	mov	r7, r6
 800dc1e:	42bb      	cmp	r3, r7
 800dc20:	460e      	mov	r6, r1
 800dc22:	d9f4      	bls.n	800dc0e <_printf_i+0x116>
 800dc24:	2b08      	cmp	r3, #8
 800dc26:	d10b      	bne.n	800dc40 <_printf_i+0x148>
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	07de      	lsls	r6, r3, #31
 800dc2c:	d508      	bpl.n	800dc40 <_printf_i+0x148>
 800dc2e:	6923      	ldr	r3, [r4, #16]
 800dc30:	6861      	ldr	r1, [r4, #4]
 800dc32:	4299      	cmp	r1, r3
 800dc34:	bfde      	ittt	le
 800dc36:	2330      	movle	r3, #48	; 0x30
 800dc38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc40:	1b52      	subs	r2, r2, r5
 800dc42:	6122      	str	r2, [r4, #16]
 800dc44:	f8cd a000 	str.w	sl, [sp]
 800dc48:	464b      	mov	r3, r9
 800dc4a:	aa03      	add	r2, sp, #12
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	4640      	mov	r0, r8
 800dc50:	f7ff fee4 	bl	800da1c <_printf_common>
 800dc54:	3001      	adds	r0, #1
 800dc56:	d14a      	bne.n	800dcee <_printf_i+0x1f6>
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5c:	b004      	add	sp, #16
 800dc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	f043 0320 	orr.w	r3, r3, #32
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	4833      	ldr	r0, [pc, #204]	; (800dd38 <_printf_i+0x240>)
 800dc6c:	2778      	movs	r7, #120	; 0x78
 800dc6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	6829      	ldr	r1, [r5, #0]
 800dc76:	061f      	lsls	r7, r3, #24
 800dc78:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc7c:	d402      	bmi.n	800dc84 <_printf_i+0x18c>
 800dc7e:	065f      	lsls	r7, r3, #25
 800dc80:	bf48      	it	mi
 800dc82:	b2b6      	uxthmi	r6, r6
 800dc84:	07df      	lsls	r7, r3, #31
 800dc86:	bf48      	it	mi
 800dc88:	f043 0320 	orrmi.w	r3, r3, #32
 800dc8c:	6029      	str	r1, [r5, #0]
 800dc8e:	bf48      	it	mi
 800dc90:	6023      	strmi	r3, [r4, #0]
 800dc92:	b91e      	cbnz	r6, 800dc9c <_printf_i+0x1a4>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	f023 0320 	bic.w	r3, r3, #32
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	2310      	movs	r3, #16
 800dc9e:	e7a7      	b.n	800dbf0 <_printf_i+0xf8>
 800dca0:	4824      	ldr	r0, [pc, #144]	; (800dd34 <_printf_i+0x23c>)
 800dca2:	e7e4      	b.n	800dc6e <_printf_i+0x176>
 800dca4:	4615      	mov	r5, r2
 800dca6:	e7bd      	b.n	800dc24 <_printf_i+0x12c>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	6826      	ldr	r6, [r4, #0]
 800dcac:	6961      	ldr	r1, [r4, #20]
 800dcae:	1d18      	adds	r0, r3, #4
 800dcb0:	6028      	str	r0, [r5, #0]
 800dcb2:	0635      	lsls	r5, r6, #24
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	d501      	bpl.n	800dcbc <_printf_i+0x1c4>
 800dcb8:	6019      	str	r1, [r3, #0]
 800dcba:	e002      	b.n	800dcc2 <_printf_i+0x1ca>
 800dcbc:	0670      	lsls	r0, r6, #25
 800dcbe:	d5fb      	bpl.n	800dcb8 <_printf_i+0x1c0>
 800dcc0:	8019      	strh	r1, [r3, #0]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	6123      	str	r3, [r4, #16]
 800dcc6:	4615      	mov	r5, r2
 800dcc8:	e7bc      	b.n	800dc44 <_printf_i+0x14c>
 800dcca:	682b      	ldr	r3, [r5, #0]
 800dccc:	1d1a      	adds	r2, r3, #4
 800dcce:	602a      	str	r2, [r5, #0]
 800dcd0:	681d      	ldr	r5, [r3, #0]
 800dcd2:	6862      	ldr	r2, [r4, #4]
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f7f2 fa7a 	bl	80001d0 <memchr>
 800dcdc:	b108      	cbz	r0, 800dce2 <_printf_i+0x1ea>
 800dcde:	1b40      	subs	r0, r0, r5
 800dce0:	6060      	str	r0, [r4, #4]
 800dce2:	6863      	ldr	r3, [r4, #4]
 800dce4:	6123      	str	r3, [r4, #16]
 800dce6:	2300      	movs	r3, #0
 800dce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcec:	e7aa      	b.n	800dc44 <_printf_i+0x14c>
 800dcee:	6923      	ldr	r3, [r4, #16]
 800dcf0:	462a      	mov	r2, r5
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	47d0      	blx	sl
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d0ad      	beq.n	800dc58 <_printf_i+0x160>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	079b      	lsls	r3, r3, #30
 800dd00:	d413      	bmi.n	800dd2a <_printf_i+0x232>
 800dd02:	68e0      	ldr	r0, [r4, #12]
 800dd04:	9b03      	ldr	r3, [sp, #12]
 800dd06:	4298      	cmp	r0, r3
 800dd08:	bfb8      	it	lt
 800dd0a:	4618      	movlt	r0, r3
 800dd0c:	e7a6      	b.n	800dc5c <_printf_i+0x164>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4632      	mov	r2, r6
 800dd12:	4649      	mov	r1, r9
 800dd14:	4640      	mov	r0, r8
 800dd16:	47d0      	blx	sl
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d09d      	beq.n	800dc58 <_printf_i+0x160>
 800dd1c:	3501      	adds	r5, #1
 800dd1e:	68e3      	ldr	r3, [r4, #12]
 800dd20:	9903      	ldr	r1, [sp, #12]
 800dd22:	1a5b      	subs	r3, r3, r1
 800dd24:	42ab      	cmp	r3, r5
 800dd26:	dcf2      	bgt.n	800dd0e <_printf_i+0x216>
 800dd28:	e7eb      	b.n	800dd02 <_printf_i+0x20a>
 800dd2a:	2500      	movs	r5, #0
 800dd2c:	f104 0619 	add.w	r6, r4, #25
 800dd30:	e7f5      	b.n	800dd1e <_printf_i+0x226>
 800dd32:	bf00      	nop
 800dd34:	0801067e 	.word	0x0801067e
 800dd38:	0801068f 	.word	0x0801068f

0800dd3c <std>:
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	4604      	mov	r4, r0
 800dd42:	e9c0 3300 	strd	r3, r3, [r0]
 800dd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd4a:	6083      	str	r3, [r0, #8]
 800dd4c:	8181      	strh	r1, [r0, #12]
 800dd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800dd50:	81c2      	strh	r2, [r0, #14]
 800dd52:	6183      	str	r3, [r0, #24]
 800dd54:	4619      	mov	r1, r3
 800dd56:	2208      	movs	r2, #8
 800dd58:	305c      	adds	r0, #92	; 0x5c
 800dd5a:	f000 fa05 	bl	800e168 <memset>
 800dd5e:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <std+0x38>)
 800dd60:	6263      	str	r3, [r4, #36]	; 0x24
 800dd62:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <std+0x3c>)
 800dd64:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd66:	4b05      	ldr	r3, [pc, #20]	; (800dd7c <std+0x40>)
 800dd68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd6a:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <std+0x44>)
 800dd6c:	6224      	str	r4, [r4, #32]
 800dd6e:	6323      	str	r3, [r4, #48]	; 0x30
 800dd70:	bd10      	pop	{r4, pc}
 800dd72:	bf00      	nop
 800dd74:	0800dfb9 	.word	0x0800dfb9
 800dd78:	0800dfdb 	.word	0x0800dfdb
 800dd7c:	0800e013 	.word	0x0800e013
 800dd80:	0800e037 	.word	0x0800e037

0800dd84 <stdio_exit_handler>:
 800dd84:	4a02      	ldr	r2, [pc, #8]	; (800dd90 <stdio_exit_handler+0xc>)
 800dd86:	4903      	ldr	r1, [pc, #12]	; (800dd94 <stdio_exit_handler+0x10>)
 800dd88:	4803      	ldr	r0, [pc, #12]	; (800dd98 <stdio_exit_handler+0x14>)
 800dd8a:	f000 b869 	b.w	800de60 <_fwalk_sglue>
 800dd8e:	bf00      	nop
 800dd90:	2000010c 	.word	0x2000010c
 800dd94:	0800feb1 	.word	0x0800feb1
 800dd98:	20000118 	.word	0x20000118

0800dd9c <cleanup_stdio>:
 800dd9c:	6841      	ldr	r1, [r0, #4]
 800dd9e:	4b0c      	ldr	r3, [pc, #48]	; (800ddd0 <cleanup_stdio+0x34>)
 800dda0:	4299      	cmp	r1, r3
 800dda2:	b510      	push	{r4, lr}
 800dda4:	4604      	mov	r4, r0
 800dda6:	d001      	beq.n	800ddac <cleanup_stdio+0x10>
 800dda8:	f002 f882 	bl	800feb0 <_fflush_r>
 800ddac:	68a1      	ldr	r1, [r4, #8]
 800ddae:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <cleanup_stdio+0x38>)
 800ddb0:	4299      	cmp	r1, r3
 800ddb2:	d002      	beq.n	800ddba <cleanup_stdio+0x1e>
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f002 f87b 	bl	800feb0 <_fflush_r>
 800ddba:	68e1      	ldr	r1, [r4, #12]
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <cleanup_stdio+0x3c>)
 800ddbe:	4299      	cmp	r1, r3
 800ddc0:	d004      	beq.n	800ddcc <cleanup_stdio+0x30>
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc8:	f002 b872 	b.w	800feb0 <_fflush_r>
 800ddcc:	bd10      	pop	{r4, pc}
 800ddce:	bf00      	nop
 800ddd0:	200015fc 	.word	0x200015fc
 800ddd4:	20001664 	.word	0x20001664
 800ddd8:	200016cc 	.word	0x200016cc

0800dddc <global_stdio_init.part.0>:
 800dddc:	b510      	push	{r4, lr}
 800ddde:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <global_stdio_init.part.0+0x30>)
 800dde0:	4c0b      	ldr	r4, [pc, #44]	; (800de10 <global_stdio_init.part.0+0x34>)
 800dde2:	4a0c      	ldr	r2, [pc, #48]	; (800de14 <global_stdio_init.part.0+0x38>)
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	4620      	mov	r0, r4
 800dde8:	2200      	movs	r2, #0
 800ddea:	2104      	movs	r1, #4
 800ddec:	f7ff ffa6 	bl	800dd3c <std>
 800ddf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	2109      	movs	r1, #9
 800ddf8:	f7ff ffa0 	bl	800dd3c <std>
 800ddfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800de00:	2202      	movs	r2, #2
 800de02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de06:	2112      	movs	r1, #18
 800de08:	f7ff bf98 	b.w	800dd3c <std>
 800de0c:	20001734 	.word	0x20001734
 800de10:	200015fc 	.word	0x200015fc
 800de14:	0800dd85 	.word	0x0800dd85

0800de18 <__sfp_lock_acquire>:
 800de18:	4801      	ldr	r0, [pc, #4]	; (800de20 <__sfp_lock_acquire+0x8>)
 800de1a:	f000 ba21 	b.w	800e260 <__retarget_lock_acquire_recursive>
 800de1e:	bf00      	nop
 800de20:	2000173d 	.word	0x2000173d

0800de24 <__sfp_lock_release>:
 800de24:	4801      	ldr	r0, [pc, #4]	; (800de2c <__sfp_lock_release+0x8>)
 800de26:	f000 ba1c 	b.w	800e262 <__retarget_lock_release_recursive>
 800de2a:	bf00      	nop
 800de2c:	2000173d 	.word	0x2000173d

0800de30 <__sinit>:
 800de30:	b510      	push	{r4, lr}
 800de32:	4604      	mov	r4, r0
 800de34:	f7ff fff0 	bl	800de18 <__sfp_lock_acquire>
 800de38:	6a23      	ldr	r3, [r4, #32]
 800de3a:	b11b      	cbz	r3, 800de44 <__sinit+0x14>
 800de3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de40:	f7ff bff0 	b.w	800de24 <__sfp_lock_release>
 800de44:	4b04      	ldr	r3, [pc, #16]	; (800de58 <__sinit+0x28>)
 800de46:	6223      	str	r3, [r4, #32]
 800de48:	4b04      	ldr	r3, [pc, #16]	; (800de5c <__sinit+0x2c>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1f5      	bne.n	800de3c <__sinit+0xc>
 800de50:	f7ff ffc4 	bl	800dddc <global_stdio_init.part.0>
 800de54:	e7f2      	b.n	800de3c <__sinit+0xc>
 800de56:	bf00      	nop
 800de58:	0800dd9d 	.word	0x0800dd9d
 800de5c:	20001734 	.word	0x20001734

0800de60 <_fwalk_sglue>:
 800de60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de64:	4607      	mov	r7, r0
 800de66:	4688      	mov	r8, r1
 800de68:	4614      	mov	r4, r2
 800de6a:	2600      	movs	r6, #0
 800de6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de70:	f1b9 0901 	subs.w	r9, r9, #1
 800de74:	d505      	bpl.n	800de82 <_fwalk_sglue+0x22>
 800de76:	6824      	ldr	r4, [r4, #0]
 800de78:	2c00      	cmp	r4, #0
 800de7a:	d1f7      	bne.n	800de6c <_fwalk_sglue+0xc>
 800de7c:	4630      	mov	r0, r6
 800de7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d907      	bls.n	800de98 <_fwalk_sglue+0x38>
 800de88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de8c:	3301      	adds	r3, #1
 800de8e:	d003      	beq.n	800de98 <_fwalk_sglue+0x38>
 800de90:	4629      	mov	r1, r5
 800de92:	4638      	mov	r0, r7
 800de94:	47c0      	blx	r8
 800de96:	4306      	orrs	r6, r0
 800de98:	3568      	adds	r5, #104	; 0x68
 800de9a:	e7e9      	b.n	800de70 <_fwalk_sglue+0x10>

0800de9c <iprintf>:
 800de9c:	b40f      	push	{r0, r1, r2, r3}
 800de9e:	b507      	push	{r0, r1, r2, lr}
 800dea0:	4906      	ldr	r1, [pc, #24]	; (800debc <iprintf+0x20>)
 800dea2:	ab04      	add	r3, sp, #16
 800dea4:	6808      	ldr	r0, [r1, #0]
 800dea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deaa:	6881      	ldr	r1, [r0, #8]
 800deac:	9301      	str	r3, [sp, #4]
 800deae:	f001 fe5f 	bl	800fb70 <_vfiprintf_r>
 800deb2:	b003      	add	sp, #12
 800deb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800deb8:	b004      	add	sp, #16
 800deba:	4770      	bx	lr
 800debc:	20000164 	.word	0x20000164

0800dec0 <_puts_r>:
 800dec0:	6a03      	ldr	r3, [r0, #32]
 800dec2:	b570      	push	{r4, r5, r6, lr}
 800dec4:	6884      	ldr	r4, [r0, #8]
 800dec6:	4605      	mov	r5, r0
 800dec8:	460e      	mov	r6, r1
 800deca:	b90b      	cbnz	r3, 800ded0 <_puts_r+0x10>
 800decc:	f7ff ffb0 	bl	800de30 <__sinit>
 800ded0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ded2:	07db      	lsls	r3, r3, #31
 800ded4:	d405      	bmi.n	800dee2 <_puts_r+0x22>
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	0598      	lsls	r0, r3, #22
 800deda:	d402      	bmi.n	800dee2 <_puts_r+0x22>
 800dedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dede:	f000 f9bf 	bl	800e260 <__retarget_lock_acquire_recursive>
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	0719      	lsls	r1, r3, #28
 800dee6:	d513      	bpl.n	800df10 <_puts_r+0x50>
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	b18b      	cbz	r3, 800df10 <_puts_r+0x50>
 800deec:	3e01      	subs	r6, #1
 800deee:	68a3      	ldr	r3, [r4, #8]
 800def0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800def4:	3b01      	subs	r3, #1
 800def6:	60a3      	str	r3, [r4, #8]
 800def8:	b9e9      	cbnz	r1, 800df36 <_puts_r+0x76>
 800defa:	2b00      	cmp	r3, #0
 800defc:	da2e      	bge.n	800df5c <_puts_r+0x9c>
 800defe:	4622      	mov	r2, r4
 800df00:	210a      	movs	r1, #10
 800df02:	4628      	mov	r0, r5
 800df04:	f000 f89b 	bl	800e03e <__swbuf_r>
 800df08:	3001      	adds	r0, #1
 800df0a:	d007      	beq.n	800df1c <_puts_r+0x5c>
 800df0c:	250a      	movs	r5, #10
 800df0e:	e007      	b.n	800df20 <_puts_r+0x60>
 800df10:	4621      	mov	r1, r4
 800df12:	4628      	mov	r0, r5
 800df14:	f000 f8d0 	bl	800e0b8 <__swsetup_r>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d0e7      	beq.n	800deec <_puts_r+0x2c>
 800df1c:	f04f 35ff 	mov.w	r5, #4294967295
 800df20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df22:	07da      	lsls	r2, r3, #31
 800df24:	d405      	bmi.n	800df32 <_puts_r+0x72>
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	059b      	lsls	r3, r3, #22
 800df2a:	d402      	bmi.n	800df32 <_puts_r+0x72>
 800df2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df2e:	f000 f998 	bl	800e262 <__retarget_lock_release_recursive>
 800df32:	4628      	mov	r0, r5
 800df34:	bd70      	pop	{r4, r5, r6, pc}
 800df36:	2b00      	cmp	r3, #0
 800df38:	da04      	bge.n	800df44 <_puts_r+0x84>
 800df3a:	69a2      	ldr	r2, [r4, #24]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	dc06      	bgt.n	800df4e <_puts_r+0x8e>
 800df40:	290a      	cmp	r1, #10
 800df42:	d004      	beq.n	800df4e <_puts_r+0x8e>
 800df44:	6823      	ldr	r3, [r4, #0]
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	6022      	str	r2, [r4, #0]
 800df4a:	7019      	strb	r1, [r3, #0]
 800df4c:	e7cf      	b.n	800deee <_puts_r+0x2e>
 800df4e:	4622      	mov	r2, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f000 f874 	bl	800e03e <__swbuf_r>
 800df56:	3001      	adds	r0, #1
 800df58:	d1c9      	bne.n	800deee <_puts_r+0x2e>
 800df5a:	e7df      	b.n	800df1c <_puts_r+0x5c>
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	250a      	movs	r5, #10
 800df60:	1c5a      	adds	r2, r3, #1
 800df62:	6022      	str	r2, [r4, #0]
 800df64:	701d      	strb	r5, [r3, #0]
 800df66:	e7db      	b.n	800df20 <_puts_r+0x60>

0800df68 <puts>:
 800df68:	4b02      	ldr	r3, [pc, #8]	; (800df74 <puts+0xc>)
 800df6a:	4601      	mov	r1, r0
 800df6c:	6818      	ldr	r0, [r3, #0]
 800df6e:	f7ff bfa7 	b.w	800dec0 <_puts_r>
 800df72:	bf00      	nop
 800df74:	20000164 	.word	0x20000164

0800df78 <siprintf>:
 800df78:	b40e      	push	{r1, r2, r3}
 800df7a:	b500      	push	{lr}
 800df7c:	b09c      	sub	sp, #112	; 0x70
 800df7e:	ab1d      	add	r3, sp, #116	; 0x74
 800df80:	9002      	str	r0, [sp, #8]
 800df82:	9006      	str	r0, [sp, #24]
 800df84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df88:	4809      	ldr	r0, [pc, #36]	; (800dfb0 <siprintf+0x38>)
 800df8a:	9107      	str	r1, [sp, #28]
 800df8c:	9104      	str	r1, [sp, #16]
 800df8e:	4909      	ldr	r1, [pc, #36]	; (800dfb4 <siprintf+0x3c>)
 800df90:	f853 2b04 	ldr.w	r2, [r3], #4
 800df94:	9105      	str	r1, [sp, #20]
 800df96:	6800      	ldr	r0, [r0, #0]
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	a902      	add	r1, sp, #8
 800df9c:	f001 fcc0 	bl	800f920 <_svfiprintf_r>
 800dfa0:	9b02      	ldr	r3, [sp, #8]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	701a      	strb	r2, [r3, #0]
 800dfa6:	b01c      	add	sp, #112	; 0x70
 800dfa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfac:	b003      	add	sp, #12
 800dfae:	4770      	bx	lr
 800dfb0:	20000164 	.word	0x20000164
 800dfb4:	ffff0208 	.word	0xffff0208

0800dfb8 <__sread>:
 800dfb8:	b510      	push	{r4, lr}
 800dfba:	460c      	mov	r4, r1
 800dfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc0:	f000 f900 	bl	800e1c4 <_read_r>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	bfab      	itete	ge
 800dfc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfca:	89a3      	ldrhlt	r3, [r4, #12]
 800dfcc:	181b      	addge	r3, r3, r0
 800dfce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfd2:	bfac      	ite	ge
 800dfd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfd6:	81a3      	strhlt	r3, [r4, #12]
 800dfd8:	bd10      	pop	{r4, pc}

0800dfda <__swrite>:
 800dfda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfde:	461f      	mov	r7, r3
 800dfe0:	898b      	ldrh	r3, [r1, #12]
 800dfe2:	05db      	lsls	r3, r3, #23
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	4616      	mov	r6, r2
 800dfea:	d505      	bpl.n	800dff8 <__swrite+0x1e>
 800dfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff0:	2302      	movs	r3, #2
 800dff2:	2200      	movs	r2, #0
 800dff4:	f000 f8d4 	bl	800e1a0 <_lseek_r>
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e002:	81a3      	strh	r3, [r4, #12]
 800e004:	4632      	mov	r2, r6
 800e006:	463b      	mov	r3, r7
 800e008:	4628      	mov	r0, r5
 800e00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e00e:	f000 b8eb 	b.w	800e1e8 <_write_r>

0800e012 <__sseek>:
 800e012:	b510      	push	{r4, lr}
 800e014:	460c      	mov	r4, r1
 800e016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e01a:	f000 f8c1 	bl	800e1a0 <_lseek_r>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	89a3      	ldrh	r3, [r4, #12]
 800e022:	bf15      	itete	ne
 800e024:	6560      	strne	r0, [r4, #84]	; 0x54
 800e026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e02a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e02e:	81a3      	strheq	r3, [r4, #12]
 800e030:	bf18      	it	ne
 800e032:	81a3      	strhne	r3, [r4, #12]
 800e034:	bd10      	pop	{r4, pc}

0800e036 <__sclose>:
 800e036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e03a:	f000 b8a1 	b.w	800e180 <_close_r>

0800e03e <__swbuf_r>:
 800e03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e040:	460e      	mov	r6, r1
 800e042:	4614      	mov	r4, r2
 800e044:	4605      	mov	r5, r0
 800e046:	b118      	cbz	r0, 800e050 <__swbuf_r+0x12>
 800e048:	6a03      	ldr	r3, [r0, #32]
 800e04a:	b90b      	cbnz	r3, 800e050 <__swbuf_r+0x12>
 800e04c:	f7ff fef0 	bl	800de30 <__sinit>
 800e050:	69a3      	ldr	r3, [r4, #24]
 800e052:	60a3      	str	r3, [r4, #8]
 800e054:	89a3      	ldrh	r3, [r4, #12]
 800e056:	071a      	lsls	r2, r3, #28
 800e058:	d525      	bpl.n	800e0a6 <__swbuf_r+0x68>
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	b31b      	cbz	r3, 800e0a6 <__swbuf_r+0x68>
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	6922      	ldr	r2, [r4, #16]
 800e062:	1a98      	subs	r0, r3, r2
 800e064:	6963      	ldr	r3, [r4, #20]
 800e066:	b2f6      	uxtb	r6, r6
 800e068:	4283      	cmp	r3, r0
 800e06a:	4637      	mov	r7, r6
 800e06c:	dc04      	bgt.n	800e078 <__swbuf_r+0x3a>
 800e06e:	4621      	mov	r1, r4
 800e070:	4628      	mov	r0, r5
 800e072:	f001 ff1d 	bl	800feb0 <_fflush_r>
 800e076:	b9e0      	cbnz	r0, 800e0b2 <__swbuf_r+0x74>
 800e078:	68a3      	ldr	r3, [r4, #8]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	60a3      	str	r3, [r4, #8]
 800e07e:	6823      	ldr	r3, [r4, #0]
 800e080:	1c5a      	adds	r2, r3, #1
 800e082:	6022      	str	r2, [r4, #0]
 800e084:	701e      	strb	r6, [r3, #0]
 800e086:	6962      	ldr	r2, [r4, #20]
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d004      	beq.n	800e098 <__swbuf_r+0x5a>
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	07db      	lsls	r3, r3, #31
 800e092:	d506      	bpl.n	800e0a2 <__swbuf_r+0x64>
 800e094:	2e0a      	cmp	r6, #10
 800e096:	d104      	bne.n	800e0a2 <__swbuf_r+0x64>
 800e098:	4621      	mov	r1, r4
 800e09a:	4628      	mov	r0, r5
 800e09c:	f001 ff08 	bl	800feb0 <_fflush_r>
 800e0a0:	b938      	cbnz	r0, 800e0b2 <__swbuf_r+0x74>
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f000 f805 	bl	800e0b8 <__swsetup_r>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d0d5      	beq.n	800e05e <__swbuf_r+0x20>
 800e0b2:	f04f 37ff 	mov.w	r7, #4294967295
 800e0b6:	e7f4      	b.n	800e0a2 <__swbuf_r+0x64>

0800e0b8 <__swsetup_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4b2a      	ldr	r3, [pc, #168]	; (800e164 <__swsetup_r+0xac>)
 800e0bc:	4605      	mov	r5, r0
 800e0be:	6818      	ldr	r0, [r3, #0]
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	b118      	cbz	r0, 800e0cc <__swsetup_r+0x14>
 800e0c4:	6a03      	ldr	r3, [r0, #32]
 800e0c6:	b90b      	cbnz	r3, 800e0cc <__swsetup_r+0x14>
 800e0c8:	f7ff feb2 	bl	800de30 <__sinit>
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0d2:	0718      	lsls	r0, r3, #28
 800e0d4:	d422      	bmi.n	800e11c <__swsetup_r+0x64>
 800e0d6:	06d9      	lsls	r1, r3, #27
 800e0d8:	d407      	bmi.n	800e0ea <__swsetup_r+0x32>
 800e0da:	2309      	movs	r3, #9
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e8:	e034      	b.n	800e154 <__swsetup_r+0x9c>
 800e0ea:	0758      	lsls	r0, r3, #29
 800e0ec:	d512      	bpl.n	800e114 <__swsetup_r+0x5c>
 800e0ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0f0:	b141      	cbz	r1, 800e104 <__swsetup_r+0x4c>
 800e0f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0f6:	4299      	cmp	r1, r3
 800e0f8:	d002      	beq.n	800e100 <__swsetup_r+0x48>
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f000 ff3a 	bl	800ef74 <_free_r>
 800e100:	2300      	movs	r3, #0
 800e102:	6363      	str	r3, [r4, #52]	; 0x34
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	2300      	movs	r3, #0
 800e10e:	6063      	str	r3, [r4, #4]
 800e110:	6923      	ldr	r3, [r4, #16]
 800e112:	6023      	str	r3, [r4, #0]
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	f043 0308 	orr.w	r3, r3, #8
 800e11a:	81a3      	strh	r3, [r4, #12]
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	b94b      	cbnz	r3, 800e134 <__swsetup_r+0x7c>
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e12a:	d003      	beq.n	800e134 <__swsetup_r+0x7c>
 800e12c:	4621      	mov	r1, r4
 800e12e:	4628      	mov	r0, r5
 800e130:	f001 ff0c 	bl	800ff4c <__smakebuf_r>
 800e134:	89a0      	ldrh	r0, [r4, #12]
 800e136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e13a:	f010 0301 	ands.w	r3, r0, #1
 800e13e:	d00a      	beq.n	800e156 <__swsetup_r+0x9e>
 800e140:	2300      	movs	r3, #0
 800e142:	60a3      	str	r3, [r4, #8]
 800e144:	6963      	ldr	r3, [r4, #20]
 800e146:	425b      	negs	r3, r3
 800e148:	61a3      	str	r3, [r4, #24]
 800e14a:	6923      	ldr	r3, [r4, #16]
 800e14c:	b943      	cbnz	r3, 800e160 <__swsetup_r+0xa8>
 800e14e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e152:	d1c4      	bne.n	800e0de <__swsetup_r+0x26>
 800e154:	bd38      	pop	{r3, r4, r5, pc}
 800e156:	0781      	lsls	r1, r0, #30
 800e158:	bf58      	it	pl
 800e15a:	6963      	ldrpl	r3, [r4, #20]
 800e15c:	60a3      	str	r3, [r4, #8]
 800e15e:	e7f4      	b.n	800e14a <__swsetup_r+0x92>
 800e160:	2000      	movs	r0, #0
 800e162:	e7f7      	b.n	800e154 <__swsetup_r+0x9c>
 800e164:	20000164 	.word	0x20000164

0800e168 <memset>:
 800e168:	4402      	add	r2, r0
 800e16a:	4603      	mov	r3, r0
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d100      	bne.n	800e172 <memset+0xa>
 800e170:	4770      	bx	lr
 800e172:	f803 1b01 	strb.w	r1, [r3], #1
 800e176:	e7f9      	b.n	800e16c <memset+0x4>

0800e178 <_localeconv_r>:
 800e178:	4800      	ldr	r0, [pc, #0]	; (800e17c <_localeconv_r+0x4>)
 800e17a:	4770      	bx	lr
 800e17c:	20000258 	.word	0x20000258

0800e180 <_close_r>:
 800e180:	b538      	push	{r3, r4, r5, lr}
 800e182:	4d06      	ldr	r5, [pc, #24]	; (800e19c <_close_r+0x1c>)
 800e184:	2300      	movs	r3, #0
 800e186:	4604      	mov	r4, r0
 800e188:	4608      	mov	r0, r1
 800e18a:	602b      	str	r3, [r5, #0]
 800e18c:	f7f4 fbf7 	bl	800297e <_close>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d102      	bne.n	800e19a <_close_r+0x1a>
 800e194:	682b      	ldr	r3, [r5, #0]
 800e196:	b103      	cbz	r3, 800e19a <_close_r+0x1a>
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	20001738 	.word	0x20001738

0800e1a0 <_lseek_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d07      	ldr	r5, [pc, #28]	; (800e1c0 <_lseek_r+0x20>)
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	4608      	mov	r0, r1
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	602a      	str	r2, [r5, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f7f4 fc0c 	bl	80029cc <_lseek>
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	d102      	bne.n	800e1be <_lseek_r+0x1e>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	b103      	cbz	r3, 800e1be <_lseek_r+0x1e>
 800e1bc:	6023      	str	r3, [r4, #0]
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
 800e1c0:	20001738 	.word	0x20001738

0800e1c4 <_read_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d07      	ldr	r5, [pc, #28]	; (800e1e4 <_read_r+0x20>)
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	4608      	mov	r0, r1
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	602a      	str	r2, [r5, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f7f4 fbb6 	bl	8002944 <_read>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d102      	bne.n	800e1e2 <_read_r+0x1e>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	b103      	cbz	r3, 800e1e2 <_read_r+0x1e>
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	20001738 	.word	0x20001738

0800e1e8 <_write_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	4d07      	ldr	r5, [pc, #28]	; (800e208 <_write_r+0x20>)
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	602a      	str	r2, [r5, #0]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	f7f3 fe9a 	bl	8001f30 <_write>
 800e1fc:	1c43      	adds	r3, r0, #1
 800e1fe:	d102      	bne.n	800e206 <_write_r+0x1e>
 800e200:	682b      	ldr	r3, [r5, #0]
 800e202:	b103      	cbz	r3, 800e206 <_write_r+0x1e>
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	bd38      	pop	{r3, r4, r5, pc}
 800e208:	20001738 	.word	0x20001738

0800e20c <__errno>:
 800e20c:	4b01      	ldr	r3, [pc, #4]	; (800e214 <__errno+0x8>)
 800e20e:	6818      	ldr	r0, [r3, #0]
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	20000164 	.word	0x20000164

0800e218 <__libc_init_array>:
 800e218:	b570      	push	{r4, r5, r6, lr}
 800e21a:	4d0d      	ldr	r5, [pc, #52]	; (800e250 <__libc_init_array+0x38>)
 800e21c:	4c0d      	ldr	r4, [pc, #52]	; (800e254 <__libc_init_array+0x3c>)
 800e21e:	1b64      	subs	r4, r4, r5
 800e220:	10a4      	asrs	r4, r4, #2
 800e222:	2600      	movs	r6, #0
 800e224:	42a6      	cmp	r6, r4
 800e226:	d109      	bne.n	800e23c <__libc_init_array+0x24>
 800e228:	4d0b      	ldr	r5, [pc, #44]	; (800e258 <__libc_init_array+0x40>)
 800e22a:	4c0c      	ldr	r4, [pc, #48]	; (800e25c <__libc_init_array+0x44>)
 800e22c:	f001 fffe 	bl	801022c <_init>
 800e230:	1b64      	subs	r4, r4, r5
 800e232:	10a4      	asrs	r4, r4, #2
 800e234:	2600      	movs	r6, #0
 800e236:	42a6      	cmp	r6, r4
 800e238:	d105      	bne.n	800e246 <__libc_init_array+0x2e>
 800e23a:	bd70      	pop	{r4, r5, r6, pc}
 800e23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e240:	4798      	blx	r3
 800e242:	3601      	adds	r6, #1
 800e244:	e7ee      	b.n	800e224 <__libc_init_array+0xc>
 800e246:	f855 3b04 	ldr.w	r3, [r5], #4
 800e24a:	4798      	blx	r3
 800e24c:	3601      	adds	r6, #1
 800e24e:	e7f2      	b.n	800e236 <__libc_init_array+0x1e>
 800e250:	080109dc 	.word	0x080109dc
 800e254:	080109dc 	.word	0x080109dc
 800e258:	080109dc 	.word	0x080109dc
 800e25c:	080109e0 	.word	0x080109e0

0800e260 <__retarget_lock_acquire_recursive>:
 800e260:	4770      	bx	lr

0800e262 <__retarget_lock_release_recursive>:
 800e262:	4770      	bx	lr

0800e264 <memcpy>:
 800e264:	440a      	add	r2, r1
 800e266:	4291      	cmp	r1, r2
 800e268:	f100 33ff 	add.w	r3, r0, #4294967295
 800e26c:	d100      	bne.n	800e270 <memcpy+0xc>
 800e26e:	4770      	bx	lr
 800e270:	b510      	push	{r4, lr}
 800e272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e27a:	4291      	cmp	r1, r2
 800e27c:	d1f9      	bne.n	800e272 <memcpy+0xe>
 800e27e:	bd10      	pop	{r4, pc}

0800e280 <quorem>:
 800e280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e284:	6903      	ldr	r3, [r0, #16]
 800e286:	690c      	ldr	r4, [r1, #16]
 800e288:	42a3      	cmp	r3, r4
 800e28a:	4607      	mov	r7, r0
 800e28c:	db7e      	blt.n	800e38c <quorem+0x10c>
 800e28e:	3c01      	subs	r4, #1
 800e290:	f101 0814 	add.w	r8, r1, #20
 800e294:	f100 0514 	add.w	r5, r0, #20
 800e298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e2a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e2ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2b6:	d331      	bcc.n	800e31c <quorem+0x9c>
 800e2b8:	f04f 0e00 	mov.w	lr, #0
 800e2bc:	4640      	mov	r0, r8
 800e2be:	46ac      	mov	ip, r5
 800e2c0:	46f2      	mov	sl, lr
 800e2c2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2c6:	b293      	uxth	r3, r2
 800e2c8:	fb06 e303 	mla	r3, r6, r3, lr
 800e2cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2d0:	0c1a      	lsrs	r2, r3, #16
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	ebaa 0303 	sub.w	r3, sl, r3
 800e2d8:	f8dc a000 	ldr.w	sl, [ip]
 800e2dc:	fa13 f38a 	uxtah	r3, r3, sl
 800e2e0:	fb06 220e 	mla	r2, r6, lr, r2
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	9b00      	ldr	r3, [sp, #0]
 800e2e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2ec:	b292      	uxth	r2, r2
 800e2ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e2f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e2fa:	4581      	cmp	r9, r0
 800e2fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e300:	f84c 3b04 	str.w	r3, [ip], #4
 800e304:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e308:	d2db      	bcs.n	800e2c2 <quorem+0x42>
 800e30a:	f855 300b 	ldr.w	r3, [r5, fp]
 800e30e:	b92b      	cbnz	r3, 800e31c <quorem+0x9c>
 800e310:	9b01      	ldr	r3, [sp, #4]
 800e312:	3b04      	subs	r3, #4
 800e314:	429d      	cmp	r5, r3
 800e316:	461a      	mov	r2, r3
 800e318:	d32c      	bcc.n	800e374 <quorem+0xf4>
 800e31a:	613c      	str	r4, [r7, #16]
 800e31c:	4638      	mov	r0, r7
 800e31e:	f001 f9a5 	bl	800f66c <__mcmp>
 800e322:	2800      	cmp	r0, #0
 800e324:	db22      	blt.n	800e36c <quorem+0xec>
 800e326:	3601      	adds	r6, #1
 800e328:	4629      	mov	r1, r5
 800e32a:	2000      	movs	r0, #0
 800e32c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e330:	f8d1 c000 	ldr.w	ip, [r1]
 800e334:	b293      	uxth	r3, r2
 800e336:	1ac3      	subs	r3, r0, r3
 800e338:	0c12      	lsrs	r2, r2, #16
 800e33a:	fa13 f38c 	uxtah	r3, r3, ip
 800e33e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e342:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e346:	b29b      	uxth	r3, r3
 800e348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e34c:	45c1      	cmp	r9, r8
 800e34e:	f841 3b04 	str.w	r3, [r1], #4
 800e352:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e356:	d2e9      	bcs.n	800e32c <quorem+0xac>
 800e358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e35c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e360:	b922      	cbnz	r2, 800e36c <quorem+0xec>
 800e362:	3b04      	subs	r3, #4
 800e364:	429d      	cmp	r5, r3
 800e366:	461a      	mov	r2, r3
 800e368:	d30a      	bcc.n	800e380 <quorem+0x100>
 800e36a:	613c      	str	r4, [r7, #16]
 800e36c:	4630      	mov	r0, r6
 800e36e:	b003      	add	sp, #12
 800e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e374:	6812      	ldr	r2, [r2, #0]
 800e376:	3b04      	subs	r3, #4
 800e378:	2a00      	cmp	r2, #0
 800e37a:	d1ce      	bne.n	800e31a <quorem+0x9a>
 800e37c:	3c01      	subs	r4, #1
 800e37e:	e7c9      	b.n	800e314 <quorem+0x94>
 800e380:	6812      	ldr	r2, [r2, #0]
 800e382:	3b04      	subs	r3, #4
 800e384:	2a00      	cmp	r2, #0
 800e386:	d1f0      	bne.n	800e36a <quorem+0xea>
 800e388:	3c01      	subs	r4, #1
 800e38a:	e7eb      	b.n	800e364 <quorem+0xe4>
 800e38c:	2000      	movs	r0, #0
 800e38e:	e7ee      	b.n	800e36e <quorem+0xee>

0800e390 <_dtoa_r>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	ed2d 8b04 	vpush	{d8-d9}
 800e398:	69c5      	ldr	r5, [r0, #28]
 800e39a:	b093      	sub	sp, #76	; 0x4c
 800e39c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e3a0:	ec57 6b10 	vmov	r6, r7, d0
 800e3a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e3a8:	9107      	str	r1, [sp, #28]
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	920a      	str	r2, [sp, #40]	; 0x28
 800e3ae:	930d      	str	r3, [sp, #52]	; 0x34
 800e3b0:	b975      	cbnz	r5, 800e3d0 <_dtoa_r+0x40>
 800e3b2:	2010      	movs	r0, #16
 800e3b4:	f000 fe2a 	bl	800f00c <malloc>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	61e0      	str	r0, [r4, #28]
 800e3bc:	b920      	cbnz	r0, 800e3c8 <_dtoa_r+0x38>
 800e3be:	4bae      	ldr	r3, [pc, #696]	; (800e678 <_dtoa_r+0x2e8>)
 800e3c0:	21ef      	movs	r1, #239	; 0xef
 800e3c2:	48ae      	ldr	r0, [pc, #696]	; (800e67c <_dtoa_r+0x2ec>)
 800e3c4:	f001 fe4a 	bl	801005c <__assert_func>
 800e3c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3cc:	6005      	str	r5, [r0, #0]
 800e3ce:	60c5      	str	r5, [r0, #12]
 800e3d0:	69e3      	ldr	r3, [r4, #28]
 800e3d2:	6819      	ldr	r1, [r3, #0]
 800e3d4:	b151      	cbz	r1, 800e3ec <_dtoa_r+0x5c>
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	604a      	str	r2, [r1, #4]
 800e3da:	2301      	movs	r3, #1
 800e3dc:	4093      	lsls	r3, r2
 800e3de:	608b      	str	r3, [r1, #8]
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 ff07 	bl	800f1f4 <_Bfree>
 800e3e6:	69e3      	ldr	r3, [r4, #28]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	601a      	str	r2, [r3, #0]
 800e3ec:	1e3b      	subs	r3, r7, #0
 800e3ee:	bfbb      	ittet	lt
 800e3f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3f4:	9303      	strlt	r3, [sp, #12]
 800e3f6:	2300      	movge	r3, #0
 800e3f8:	2201      	movlt	r2, #1
 800e3fa:	bfac      	ite	ge
 800e3fc:	f8c8 3000 	strge.w	r3, [r8]
 800e400:	f8c8 2000 	strlt.w	r2, [r8]
 800e404:	4b9e      	ldr	r3, [pc, #632]	; (800e680 <_dtoa_r+0x2f0>)
 800e406:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e40a:	ea33 0308 	bics.w	r3, r3, r8
 800e40e:	d11b      	bne.n	800e448 <_dtoa_r+0xb8>
 800e410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e412:	f242 730f 	movw	r3, #9999	; 0x270f
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e41c:	4333      	orrs	r3, r6
 800e41e:	f000 8593 	beq.w	800ef48 <_dtoa_r+0xbb8>
 800e422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e424:	b963      	cbnz	r3, 800e440 <_dtoa_r+0xb0>
 800e426:	4b97      	ldr	r3, [pc, #604]	; (800e684 <_dtoa_r+0x2f4>)
 800e428:	e027      	b.n	800e47a <_dtoa_r+0xea>
 800e42a:	4b97      	ldr	r3, [pc, #604]	; (800e688 <_dtoa_r+0x2f8>)
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	3308      	adds	r3, #8
 800e430:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	9800      	ldr	r0, [sp, #0]
 800e436:	b013      	add	sp, #76	; 0x4c
 800e438:	ecbd 8b04 	vpop	{d8-d9}
 800e43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e440:	4b90      	ldr	r3, [pc, #576]	; (800e684 <_dtoa_r+0x2f4>)
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	3303      	adds	r3, #3
 800e446:	e7f3      	b.n	800e430 <_dtoa_r+0xa0>
 800e448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e44c:	2200      	movs	r2, #0
 800e44e:	ec51 0b17 	vmov	r0, r1, d7
 800e452:	eeb0 8a47 	vmov.f32	s16, s14
 800e456:	eef0 8a67 	vmov.f32	s17, s15
 800e45a:	2300      	movs	r3, #0
 800e45c:	f7f2 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800e460:	4681      	mov	r9, r0
 800e462:	b160      	cbz	r0, 800e47e <_dtoa_r+0xee>
 800e464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e466:	2301      	movs	r3, #1
 800e468:	6013      	str	r3, [r2, #0]
 800e46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 8568 	beq.w	800ef42 <_dtoa_r+0xbb2>
 800e472:	4b86      	ldr	r3, [pc, #536]	; (800e68c <_dtoa_r+0x2fc>)
 800e474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	3b01      	subs	r3, #1
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	e7da      	b.n	800e434 <_dtoa_r+0xa4>
 800e47e:	aa10      	add	r2, sp, #64	; 0x40
 800e480:	a911      	add	r1, sp, #68	; 0x44
 800e482:	4620      	mov	r0, r4
 800e484:	eeb0 0a48 	vmov.f32	s0, s16
 800e488:	eef0 0a68 	vmov.f32	s1, s17
 800e48c:	f001 f994 	bl	800f7b8 <__d2b>
 800e490:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e494:	4682      	mov	sl, r0
 800e496:	2d00      	cmp	r5, #0
 800e498:	d07f      	beq.n	800e59a <_dtoa_r+0x20a>
 800e49a:	ee18 3a90 	vmov	r3, s17
 800e49e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e4a6:	ec51 0b18 	vmov	r0, r1, d8
 800e4aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e4b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	4b75      	ldr	r3, [pc, #468]	; (800e690 <_dtoa_r+0x300>)
 800e4bc:	f7f1 fee4 	bl	8000288 <__aeabi_dsub>
 800e4c0:	a367      	add	r3, pc, #412	; (adr r3, 800e660 <_dtoa_r+0x2d0>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	f7f2 f897 	bl	80005f8 <__aeabi_dmul>
 800e4ca:	a367      	add	r3, pc, #412	; (adr r3, 800e668 <_dtoa_r+0x2d8>)
 800e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d0:	f7f1 fedc 	bl	800028c <__adddf3>
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	460f      	mov	r7, r1
 800e4da:	f7f2 f823 	bl	8000524 <__aeabi_i2d>
 800e4de:	a364      	add	r3, pc, #400	; (adr r3, 800e670 <_dtoa_r+0x2e0>)
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	f7f2 f888 	bl	80005f8 <__aeabi_dmul>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	4639      	mov	r1, r7
 800e4f0:	f7f1 fecc 	bl	800028c <__adddf3>
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	460f      	mov	r7, r1
 800e4f8:	f7f2 fb2e 	bl	8000b58 <__aeabi_d2iz>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4683      	mov	fp, r0
 800e500:	2300      	movs	r3, #0
 800e502:	4630      	mov	r0, r6
 800e504:	4639      	mov	r1, r7
 800e506:	f7f2 fae9 	bl	8000adc <__aeabi_dcmplt>
 800e50a:	b148      	cbz	r0, 800e520 <_dtoa_r+0x190>
 800e50c:	4658      	mov	r0, fp
 800e50e:	f7f2 f809 	bl	8000524 <__aeabi_i2d>
 800e512:	4632      	mov	r2, r6
 800e514:	463b      	mov	r3, r7
 800e516:	f7f2 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e51a:	b908      	cbnz	r0, 800e520 <_dtoa_r+0x190>
 800e51c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e520:	f1bb 0f16 	cmp.w	fp, #22
 800e524:	d857      	bhi.n	800e5d6 <_dtoa_r+0x246>
 800e526:	4b5b      	ldr	r3, [pc, #364]	; (800e694 <_dtoa_r+0x304>)
 800e528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	ec51 0b18 	vmov	r0, r1, d8
 800e534:	f7f2 fad2 	bl	8000adc <__aeabi_dcmplt>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d04e      	beq.n	800e5da <_dtoa_r+0x24a>
 800e53c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e540:	2300      	movs	r3, #0
 800e542:	930c      	str	r3, [sp, #48]	; 0x30
 800e544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e546:	1b5b      	subs	r3, r3, r5
 800e548:	1e5a      	subs	r2, r3, #1
 800e54a:	bf45      	ittet	mi
 800e54c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e550:	9305      	strmi	r3, [sp, #20]
 800e552:	2300      	movpl	r3, #0
 800e554:	2300      	movmi	r3, #0
 800e556:	9206      	str	r2, [sp, #24]
 800e558:	bf54      	ite	pl
 800e55a:	9305      	strpl	r3, [sp, #20]
 800e55c:	9306      	strmi	r3, [sp, #24]
 800e55e:	f1bb 0f00 	cmp.w	fp, #0
 800e562:	db3c      	blt.n	800e5de <_dtoa_r+0x24e>
 800e564:	9b06      	ldr	r3, [sp, #24]
 800e566:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e56a:	445b      	add	r3, fp
 800e56c:	9306      	str	r3, [sp, #24]
 800e56e:	2300      	movs	r3, #0
 800e570:	9308      	str	r3, [sp, #32]
 800e572:	9b07      	ldr	r3, [sp, #28]
 800e574:	2b09      	cmp	r3, #9
 800e576:	d868      	bhi.n	800e64a <_dtoa_r+0x2ba>
 800e578:	2b05      	cmp	r3, #5
 800e57a:	bfc4      	itt	gt
 800e57c:	3b04      	subgt	r3, #4
 800e57e:	9307      	strgt	r3, [sp, #28]
 800e580:	9b07      	ldr	r3, [sp, #28]
 800e582:	f1a3 0302 	sub.w	r3, r3, #2
 800e586:	bfcc      	ite	gt
 800e588:	2500      	movgt	r5, #0
 800e58a:	2501      	movle	r5, #1
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	f200 8085 	bhi.w	800e69c <_dtoa_r+0x30c>
 800e592:	e8df f003 	tbb	[pc, r3]
 800e596:	3b2e      	.short	0x3b2e
 800e598:	5839      	.short	0x5839
 800e59a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e59e:	441d      	add	r5, r3
 800e5a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e5a4:	2b20      	cmp	r3, #32
 800e5a6:	bfc1      	itttt	gt
 800e5a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e5ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800e5b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e5b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e5b8:	bfd6      	itet	le
 800e5ba:	f1c3 0320 	rsble	r3, r3, #32
 800e5be:	ea48 0003 	orrgt.w	r0, r8, r3
 800e5c2:	fa06 f003 	lslle.w	r0, r6, r3
 800e5c6:	f7f1 ff9d 	bl	8000504 <__aeabi_ui2d>
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e5d0:	3d01      	subs	r5, #1
 800e5d2:	920e      	str	r2, [sp, #56]	; 0x38
 800e5d4:	e76f      	b.n	800e4b6 <_dtoa_r+0x126>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e7b3      	b.n	800e542 <_dtoa_r+0x1b2>
 800e5da:	900c      	str	r0, [sp, #48]	; 0x30
 800e5dc:	e7b2      	b.n	800e544 <_dtoa_r+0x1b4>
 800e5de:	9b05      	ldr	r3, [sp, #20]
 800e5e0:	eba3 030b 	sub.w	r3, r3, fp
 800e5e4:	9305      	str	r3, [sp, #20]
 800e5e6:	f1cb 0300 	rsb	r3, fp, #0
 800e5ea:	9308      	str	r3, [sp, #32]
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5f0:	e7bf      	b.n	800e572 <_dtoa_r+0x1e2>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dc52      	bgt.n	800e6a2 <_dtoa_r+0x312>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	9304      	str	r3, [sp, #16]
 800e602:	461a      	mov	r2, r3
 800e604:	920a      	str	r2, [sp, #40]	; 0x28
 800e606:	e00b      	b.n	800e620 <_dtoa_r+0x290>
 800e608:	2301      	movs	r3, #1
 800e60a:	e7f3      	b.n	800e5f4 <_dtoa_r+0x264>
 800e60c:	2300      	movs	r3, #0
 800e60e:	9309      	str	r3, [sp, #36]	; 0x24
 800e610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e612:	445b      	add	r3, fp
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	3301      	adds	r3, #1
 800e618:	2b01      	cmp	r3, #1
 800e61a:	9304      	str	r3, [sp, #16]
 800e61c:	bfb8      	it	lt
 800e61e:	2301      	movlt	r3, #1
 800e620:	69e0      	ldr	r0, [r4, #28]
 800e622:	2100      	movs	r1, #0
 800e624:	2204      	movs	r2, #4
 800e626:	f102 0614 	add.w	r6, r2, #20
 800e62a:	429e      	cmp	r6, r3
 800e62c:	d93d      	bls.n	800e6aa <_dtoa_r+0x31a>
 800e62e:	6041      	str	r1, [r0, #4]
 800e630:	4620      	mov	r0, r4
 800e632:	f000 fd9f 	bl	800f174 <_Balloc>
 800e636:	9000      	str	r0, [sp, #0]
 800e638:	2800      	cmp	r0, #0
 800e63a:	d139      	bne.n	800e6b0 <_dtoa_r+0x320>
 800e63c:	4b16      	ldr	r3, [pc, #88]	; (800e698 <_dtoa_r+0x308>)
 800e63e:	4602      	mov	r2, r0
 800e640:	f240 11af 	movw	r1, #431	; 0x1af
 800e644:	e6bd      	b.n	800e3c2 <_dtoa_r+0x32>
 800e646:	2301      	movs	r3, #1
 800e648:	e7e1      	b.n	800e60e <_dtoa_r+0x27e>
 800e64a:	2501      	movs	r5, #1
 800e64c:	2300      	movs	r3, #0
 800e64e:	9307      	str	r3, [sp, #28]
 800e650:	9509      	str	r5, [sp, #36]	; 0x24
 800e652:	f04f 33ff 	mov.w	r3, #4294967295
 800e656:	9301      	str	r3, [sp, #4]
 800e658:	9304      	str	r3, [sp, #16]
 800e65a:	2200      	movs	r2, #0
 800e65c:	2312      	movs	r3, #18
 800e65e:	e7d1      	b.n	800e604 <_dtoa_r+0x274>
 800e660:	636f4361 	.word	0x636f4361
 800e664:	3fd287a7 	.word	0x3fd287a7
 800e668:	8b60c8b3 	.word	0x8b60c8b3
 800e66c:	3fc68a28 	.word	0x3fc68a28
 800e670:	509f79fb 	.word	0x509f79fb
 800e674:	3fd34413 	.word	0x3fd34413
 800e678:	080106ad 	.word	0x080106ad
 800e67c:	080106c4 	.word	0x080106c4
 800e680:	7ff00000 	.word	0x7ff00000
 800e684:	080106a9 	.word	0x080106a9
 800e688:	080106a0 	.word	0x080106a0
 800e68c:	0801067d 	.word	0x0801067d
 800e690:	3ff80000 	.word	0x3ff80000
 800e694:	080107b0 	.word	0x080107b0
 800e698:	0801071c 	.word	0x0801071c
 800e69c:	2301      	movs	r3, #1
 800e69e:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a0:	e7d7      	b.n	800e652 <_dtoa_r+0x2c2>
 800e6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	9304      	str	r3, [sp, #16]
 800e6a8:	e7ba      	b.n	800e620 <_dtoa_r+0x290>
 800e6aa:	3101      	adds	r1, #1
 800e6ac:	0052      	lsls	r2, r2, #1
 800e6ae:	e7ba      	b.n	800e626 <_dtoa_r+0x296>
 800e6b0:	69e3      	ldr	r3, [r4, #28]
 800e6b2:	9a00      	ldr	r2, [sp, #0]
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	9b04      	ldr	r3, [sp, #16]
 800e6b8:	2b0e      	cmp	r3, #14
 800e6ba:	f200 80a8 	bhi.w	800e80e <_dtoa_r+0x47e>
 800e6be:	2d00      	cmp	r5, #0
 800e6c0:	f000 80a5 	beq.w	800e80e <_dtoa_r+0x47e>
 800e6c4:	f1bb 0f00 	cmp.w	fp, #0
 800e6c8:	dd38      	ble.n	800e73c <_dtoa_r+0x3ac>
 800e6ca:	4bc0      	ldr	r3, [pc, #768]	; (800e9cc <_dtoa_r+0x63c>)
 800e6cc:	f00b 020f 	and.w	r2, fp, #15
 800e6d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e6d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e6dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e6e0:	d019      	beq.n	800e716 <_dtoa_r+0x386>
 800e6e2:	4bbb      	ldr	r3, [pc, #748]	; (800e9d0 <_dtoa_r+0x640>)
 800e6e4:	ec51 0b18 	vmov	r0, r1, d8
 800e6e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e6ec:	f7f2 f8ae 	bl	800084c <__aeabi_ddiv>
 800e6f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6f4:	f008 080f 	and.w	r8, r8, #15
 800e6f8:	2503      	movs	r5, #3
 800e6fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e9d0 <_dtoa_r+0x640>
 800e6fe:	f1b8 0f00 	cmp.w	r8, #0
 800e702:	d10a      	bne.n	800e71a <_dtoa_r+0x38a>
 800e704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e708:	4632      	mov	r2, r6
 800e70a:	463b      	mov	r3, r7
 800e70c:	f7f2 f89e 	bl	800084c <__aeabi_ddiv>
 800e710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e714:	e02b      	b.n	800e76e <_dtoa_r+0x3de>
 800e716:	2502      	movs	r5, #2
 800e718:	e7ef      	b.n	800e6fa <_dtoa_r+0x36a>
 800e71a:	f018 0f01 	tst.w	r8, #1
 800e71e:	d008      	beq.n	800e732 <_dtoa_r+0x3a2>
 800e720:	4630      	mov	r0, r6
 800e722:	4639      	mov	r1, r7
 800e724:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e728:	f7f1 ff66 	bl	80005f8 <__aeabi_dmul>
 800e72c:	3501      	adds	r5, #1
 800e72e:	4606      	mov	r6, r0
 800e730:	460f      	mov	r7, r1
 800e732:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e736:	f109 0908 	add.w	r9, r9, #8
 800e73a:	e7e0      	b.n	800e6fe <_dtoa_r+0x36e>
 800e73c:	f000 809f 	beq.w	800e87e <_dtoa_r+0x4ee>
 800e740:	f1cb 0600 	rsb	r6, fp, #0
 800e744:	4ba1      	ldr	r3, [pc, #644]	; (800e9cc <_dtoa_r+0x63c>)
 800e746:	4fa2      	ldr	r7, [pc, #648]	; (800e9d0 <_dtoa_r+0x640>)
 800e748:	f006 020f 	and.w	r2, r6, #15
 800e74c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	ec51 0b18 	vmov	r0, r1, d8
 800e758:	f7f1 ff4e 	bl	80005f8 <__aeabi_dmul>
 800e75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e760:	1136      	asrs	r6, r6, #4
 800e762:	2300      	movs	r3, #0
 800e764:	2502      	movs	r5, #2
 800e766:	2e00      	cmp	r6, #0
 800e768:	d17e      	bne.n	800e868 <_dtoa_r+0x4d8>
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1d0      	bne.n	800e710 <_dtoa_r+0x380>
 800e76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e770:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 8084 	beq.w	800e882 <_dtoa_r+0x4f2>
 800e77a:	4b96      	ldr	r3, [pc, #600]	; (800e9d4 <_dtoa_r+0x644>)
 800e77c:	2200      	movs	r2, #0
 800e77e:	4640      	mov	r0, r8
 800e780:	4649      	mov	r1, r9
 800e782:	f7f2 f9ab 	bl	8000adc <__aeabi_dcmplt>
 800e786:	2800      	cmp	r0, #0
 800e788:	d07b      	beq.n	800e882 <_dtoa_r+0x4f2>
 800e78a:	9b04      	ldr	r3, [sp, #16]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d078      	beq.n	800e882 <_dtoa_r+0x4f2>
 800e790:	9b01      	ldr	r3, [sp, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	dd39      	ble.n	800e80a <_dtoa_r+0x47a>
 800e796:	4b90      	ldr	r3, [pc, #576]	; (800e9d8 <_dtoa_r+0x648>)
 800e798:	2200      	movs	r2, #0
 800e79a:	4640      	mov	r0, r8
 800e79c:	4649      	mov	r1, r9
 800e79e:	f7f1 ff2b 	bl	80005f8 <__aeabi_dmul>
 800e7a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7a6:	9e01      	ldr	r6, [sp, #4]
 800e7a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e7ac:	3501      	adds	r5, #1
 800e7ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f7f1 feb6 	bl	8000524 <__aeabi_i2d>
 800e7b8:	4642      	mov	r2, r8
 800e7ba:	464b      	mov	r3, r9
 800e7bc:	f7f1 ff1c 	bl	80005f8 <__aeabi_dmul>
 800e7c0:	4b86      	ldr	r3, [pc, #536]	; (800e9dc <_dtoa_r+0x64c>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f7f1 fd62 	bl	800028c <__adddf3>
 800e7c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7d0:	9303      	str	r3, [sp, #12]
 800e7d2:	2e00      	cmp	r6, #0
 800e7d4:	d158      	bne.n	800e888 <_dtoa_r+0x4f8>
 800e7d6:	4b82      	ldr	r3, [pc, #520]	; (800e9e0 <_dtoa_r+0x650>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4640      	mov	r0, r8
 800e7dc:	4649      	mov	r1, r9
 800e7de:	f7f1 fd53 	bl	8000288 <__aeabi_dsub>
 800e7e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	4689      	mov	r9, r1
 800e7ea:	f7f2 f995 	bl	8000b18 <__aeabi_dcmpgt>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f040 8296 	bne.w	800ed20 <_dtoa_r+0x990>
 800e7f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7fe:	4649      	mov	r1, r9
 800e800:	f7f2 f96c 	bl	8000adc <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	f040 8289 	bne.w	800ed1c <_dtoa_r+0x98c>
 800e80a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e80e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e810:	2b00      	cmp	r3, #0
 800e812:	f2c0 814e 	blt.w	800eab2 <_dtoa_r+0x722>
 800e816:	f1bb 0f0e 	cmp.w	fp, #14
 800e81a:	f300 814a 	bgt.w	800eab2 <_dtoa_r+0x722>
 800e81e:	4b6b      	ldr	r3, [pc, #428]	; (800e9cc <_dtoa_r+0x63c>)
 800e820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e824:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f280 80dc 	bge.w	800e9e8 <_dtoa_r+0x658>
 800e830:	9b04      	ldr	r3, [sp, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	f300 80d8 	bgt.w	800e9e8 <_dtoa_r+0x658>
 800e838:	f040 826f 	bne.w	800ed1a <_dtoa_r+0x98a>
 800e83c:	4b68      	ldr	r3, [pc, #416]	; (800e9e0 <_dtoa_r+0x650>)
 800e83e:	2200      	movs	r2, #0
 800e840:	4640      	mov	r0, r8
 800e842:	4649      	mov	r1, r9
 800e844:	f7f1 fed8 	bl	80005f8 <__aeabi_dmul>
 800e848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e84c:	f7f2 f95a 	bl	8000b04 <__aeabi_dcmpge>
 800e850:	9e04      	ldr	r6, [sp, #16]
 800e852:	4637      	mov	r7, r6
 800e854:	2800      	cmp	r0, #0
 800e856:	f040 8245 	bne.w	800ece4 <_dtoa_r+0x954>
 800e85a:	9d00      	ldr	r5, [sp, #0]
 800e85c:	2331      	movs	r3, #49	; 0x31
 800e85e:	f805 3b01 	strb.w	r3, [r5], #1
 800e862:	f10b 0b01 	add.w	fp, fp, #1
 800e866:	e241      	b.n	800ecec <_dtoa_r+0x95c>
 800e868:	07f2      	lsls	r2, r6, #31
 800e86a:	d505      	bpl.n	800e878 <_dtoa_r+0x4e8>
 800e86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e870:	f7f1 fec2 	bl	80005f8 <__aeabi_dmul>
 800e874:	3501      	adds	r5, #1
 800e876:	2301      	movs	r3, #1
 800e878:	1076      	asrs	r6, r6, #1
 800e87a:	3708      	adds	r7, #8
 800e87c:	e773      	b.n	800e766 <_dtoa_r+0x3d6>
 800e87e:	2502      	movs	r5, #2
 800e880:	e775      	b.n	800e76e <_dtoa_r+0x3de>
 800e882:	9e04      	ldr	r6, [sp, #16]
 800e884:	465f      	mov	r7, fp
 800e886:	e792      	b.n	800e7ae <_dtoa_r+0x41e>
 800e888:	9900      	ldr	r1, [sp, #0]
 800e88a:	4b50      	ldr	r3, [pc, #320]	; (800e9cc <_dtoa_r+0x63c>)
 800e88c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e890:	4431      	add	r1, r6
 800e892:	9102      	str	r1, [sp, #8]
 800e894:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e896:	eeb0 9a47 	vmov.f32	s18, s14
 800e89a:	eef0 9a67 	vmov.f32	s19, s15
 800e89e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e8a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	d044      	beq.n	800e934 <_dtoa_r+0x5a4>
 800e8aa:	494e      	ldr	r1, [pc, #312]	; (800e9e4 <_dtoa_r+0x654>)
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	f7f1 ffcd 	bl	800084c <__aeabi_ddiv>
 800e8b2:	ec53 2b19 	vmov	r2, r3, d9
 800e8b6:	f7f1 fce7 	bl	8000288 <__aeabi_dsub>
 800e8ba:	9d00      	ldr	r5, [sp, #0]
 800e8bc:	ec41 0b19 	vmov	d9, r0, r1
 800e8c0:	4649      	mov	r1, r9
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	f7f2 f948 	bl	8000b58 <__aeabi_d2iz>
 800e8c8:	4606      	mov	r6, r0
 800e8ca:	f7f1 fe2b 	bl	8000524 <__aeabi_i2d>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	4649      	mov	r1, r9
 800e8d6:	f7f1 fcd7 	bl	8000288 <__aeabi_dsub>
 800e8da:	3630      	adds	r6, #48	; 0x30
 800e8dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e8e0:	ec53 2b19 	vmov	r2, r3, d9
 800e8e4:	4680      	mov	r8, r0
 800e8e6:	4689      	mov	r9, r1
 800e8e8:	f7f2 f8f8 	bl	8000adc <__aeabi_dcmplt>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d164      	bne.n	800e9ba <_dtoa_r+0x62a>
 800e8f0:	4642      	mov	r2, r8
 800e8f2:	464b      	mov	r3, r9
 800e8f4:	4937      	ldr	r1, [pc, #220]	; (800e9d4 <_dtoa_r+0x644>)
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	f7f1 fcc6 	bl	8000288 <__aeabi_dsub>
 800e8fc:	ec53 2b19 	vmov	r2, r3, d9
 800e900:	f7f2 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800e904:	2800      	cmp	r0, #0
 800e906:	f040 80b6 	bne.w	800ea76 <_dtoa_r+0x6e6>
 800e90a:	9b02      	ldr	r3, [sp, #8]
 800e90c:	429d      	cmp	r5, r3
 800e90e:	f43f af7c 	beq.w	800e80a <_dtoa_r+0x47a>
 800e912:	4b31      	ldr	r3, [pc, #196]	; (800e9d8 <_dtoa_r+0x648>)
 800e914:	ec51 0b19 	vmov	r0, r1, d9
 800e918:	2200      	movs	r2, #0
 800e91a:	f7f1 fe6d 	bl	80005f8 <__aeabi_dmul>
 800e91e:	4b2e      	ldr	r3, [pc, #184]	; (800e9d8 <_dtoa_r+0x648>)
 800e920:	ec41 0b19 	vmov	d9, r0, r1
 800e924:	2200      	movs	r2, #0
 800e926:	4640      	mov	r0, r8
 800e928:	4649      	mov	r1, r9
 800e92a:	f7f1 fe65 	bl	80005f8 <__aeabi_dmul>
 800e92e:	4680      	mov	r8, r0
 800e930:	4689      	mov	r9, r1
 800e932:	e7c5      	b.n	800e8c0 <_dtoa_r+0x530>
 800e934:	ec51 0b17 	vmov	r0, r1, d7
 800e938:	f7f1 fe5e 	bl	80005f8 <__aeabi_dmul>
 800e93c:	9b02      	ldr	r3, [sp, #8]
 800e93e:	9d00      	ldr	r5, [sp, #0]
 800e940:	930f      	str	r3, [sp, #60]	; 0x3c
 800e942:	ec41 0b19 	vmov	d9, r0, r1
 800e946:	4649      	mov	r1, r9
 800e948:	4640      	mov	r0, r8
 800e94a:	f7f2 f905 	bl	8000b58 <__aeabi_d2iz>
 800e94e:	4606      	mov	r6, r0
 800e950:	f7f1 fde8 	bl	8000524 <__aeabi_i2d>
 800e954:	3630      	adds	r6, #48	; 0x30
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	4640      	mov	r0, r8
 800e95c:	4649      	mov	r1, r9
 800e95e:	f7f1 fc93 	bl	8000288 <__aeabi_dsub>
 800e962:	f805 6b01 	strb.w	r6, [r5], #1
 800e966:	9b02      	ldr	r3, [sp, #8]
 800e968:	429d      	cmp	r5, r3
 800e96a:	4680      	mov	r8, r0
 800e96c:	4689      	mov	r9, r1
 800e96e:	f04f 0200 	mov.w	r2, #0
 800e972:	d124      	bne.n	800e9be <_dtoa_r+0x62e>
 800e974:	4b1b      	ldr	r3, [pc, #108]	; (800e9e4 <_dtoa_r+0x654>)
 800e976:	ec51 0b19 	vmov	r0, r1, d9
 800e97a:	f7f1 fc87 	bl	800028c <__adddf3>
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	4640      	mov	r0, r8
 800e984:	4649      	mov	r1, r9
 800e986:	f7f2 f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d173      	bne.n	800ea76 <_dtoa_r+0x6e6>
 800e98e:	ec53 2b19 	vmov	r2, r3, d9
 800e992:	4914      	ldr	r1, [pc, #80]	; (800e9e4 <_dtoa_r+0x654>)
 800e994:	2000      	movs	r0, #0
 800e996:	f7f1 fc77 	bl	8000288 <__aeabi_dsub>
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4640      	mov	r0, r8
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	f7f2 f89b 	bl	8000adc <__aeabi_dcmplt>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f43f af2f 	beq.w	800e80a <_dtoa_r+0x47a>
 800e9ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e9ae:	1e6b      	subs	r3, r5, #1
 800e9b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e9b6:	2b30      	cmp	r3, #48	; 0x30
 800e9b8:	d0f8      	beq.n	800e9ac <_dtoa_r+0x61c>
 800e9ba:	46bb      	mov	fp, r7
 800e9bc:	e04a      	b.n	800ea54 <_dtoa_r+0x6c4>
 800e9be:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <_dtoa_r+0x648>)
 800e9c0:	f7f1 fe1a 	bl	80005f8 <__aeabi_dmul>
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	4689      	mov	r9, r1
 800e9c8:	e7bd      	b.n	800e946 <_dtoa_r+0x5b6>
 800e9ca:	bf00      	nop
 800e9cc:	080107b0 	.word	0x080107b0
 800e9d0:	08010788 	.word	0x08010788
 800e9d4:	3ff00000 	.word	0x3ff00000
 800e9d8:	40240000 	.word	0x40240000
 800e9dc:	401c0000 	.word	0x401c0000
 800e9e0:	40140000 	.word	0x40140000
 800e9e4:	3fe00000 	.word	0x3fe00000
 800e9e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e9ec:	9d00      	ldr	r5, [sp, #0]
 800e9ee:	4642      	mov	r2, r8
 800e9f0:	464b      	mov	r3, r9
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	f7f1 ff29 	bl	800084c <__aeabi_ddiv>
 800e9fa:	f7f2 f8ad 	bl	8000b58 <__aeabi_d2iz>
 800e9fe:	9001      	str	r0, [sp, #4]
 800ea00:	f7f1 fd90 	bl	8000524 <__aeabi_i2d>
 800ea04:	4642      	mov	r2, r8
 800ea06:	464b      	mov	r3, r9
 800ea08:	f7f1 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f1 fc38 	bl	8000288 <__aeabi_dsub>
 800ea18:	9e01      	ldr	r6, [sp, #4]
 800ea1a:	9f04      	ldr	r7, [sp, #16]
 800ea1c:	3630      	adds	r6, #48	; 0x30
 800ea1e:	f805 6b01 	strb.w	r6, [r5], #1
 800ea22:	9e00      	ldr	r6, [sp, #0]
 800ea24:	1bae      	subs	r6, r5, r6
 800ea26:	42b7      	cmp	r7, r6
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	d134      	bne.n	800ea98 <_dtoa_r+0x708>
 800ea2e:	f7f1 fc2d 	bl	800028c <__adddf3>
 800ea32:	4642      	mov	r2, r8
 800ea34:	464b      	mov	r3, r9
 800ea36:	4606      	mov	r6, r0
 800ea38:	460f      	mov	r7, r1
 800ea3a:	f7f2 f86d 	bl	8000b18 <__aeabi_dcmpgt>
 800ea3e:	b9c8      	cbnz	r0, 800ea74 <_dtoa_r+0x6e4>
 800ea40:	4642      	mov	r2, r8
 800ea42:	464b      	mov	r3, r9
 800ea44:	4630      	mov	r0, r6
 800ea46:	4639      	mov	r1, r7
 800ea48:	f7f2 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea4c:	b110      	cbz	r0, 800ea54 <_dtoa_r+0x6c4>
 800ea4e:	9b01      	ldr	r3, [sp, #4]
 800ea50:	07db      	lsls	r3, r3, #31
 800ea52:	d40f      	bmi.n	800ea74 <_dtoa_r+0x6e4>
 800ea54:	4651      	mov	r1, sl
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 fbcc 	bl	800f1f4 <_Bfree>
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea60:	702b      	strb	r3, [r5, #0]
 800ea62:	f10b 0301 	add.w	r3, fp, #1
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f43f ace2 	beq.w	800e434 <_dtoa_r+0xa4>
 800ea70:	601d      	str	r5, [r3, #0]
 800ea72:	e4df      	b.n	800e434 <_dtoa_r+0xa4>
 800ea74:	465f      	mov	r7, fp
 800ea76:	462b      	mov	r3, r5
 800ea78:	461d      	mov	r5, r3
 800ea7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea7e:	2a39      	cmp	r2, #57	; 0x39
 800ea80:	d106      	bne.n	800ea90 <_dtoa_r+0x700>
 800ea82:	9a00      	ldr	r2, [sp, #0]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d1f7      	bne.n	800ea78 <_dtoa_r+0x6e8>
 800ea88:	9900      	ldr	r1, [sp, #0]
 800ea8a:	2230      	movs	r2, #48	; 0x30
 800ea8c:	3701      	adds	r7, #1
 800ea8e:	700a      	strb	r2, [r1, #0]
 800ea90:	781a      	ldrb	r2, [r3, #0]
 800ea92:	3201      	adds	r2, #1
 800ea94:	701a      	strb	r2, [r3, #0]
 800ea96:	e790      	b.n	800e9ba <_dtoa_r+0x62a>
 800ea98:	4ba3      	ldr	r3, [pc, #652]	; (800ed28 <_dtoa_r+0x998>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f7f1 fdac 	bl	80005f8 <__aeabi_dmul>
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	4606      	mov	r6, r0
 800eaa6:	460f      	mov	r7, r1
 800eaa8:	f7f2 f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d09e      	beq.n	800e9ee <_dtoa_r+0x65e>
 800eab0:	e7d0      	b.n	800ea54 <_dtoa_r+0x6c4>
 800eab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eab4:	2a00      	cmp	r2, #0
 800eab6:	f000 80ca 	beq.w	800ec4e <_dtoa_r+0x8be>
 800eaba:	9a07      	ldr	r2, [sp, #28]
 800eabc:	2a01      	cmp	r2, #1
 800eabe:	f300 80ad 	bgt.w	800ec1c <_dtoa_r+0x88c>
 800eac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	f000 80a5 	beq.w	800ec14 <_dtoa_r+0x884>
 800eaca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eace:	9e08      	ldr	r6, [sp, #32]
 800ead0:	9d05      	ldr	r5, [sp, #20]
 800ead2:	9a05      	ldr	r2, [sp, #20]
 800ead4:	441a      	add	r2, r3
 800ead6:	9205      	str	r2, [sp, #20]
 800ead8:	9a06      	ldr	r2, [sp, #24]
 800eada:	2101      	movs	r1, #1
 800eadc:	441a      	add	r2, r3
 800eade:	4620      	mov	r0, r4
 800eae0:	9206      	str	r2, [sp, #24]
 800eae2:	f000 fc3d 	bl	800f360 <__i2b>
 800eae6:	4607      	mov	r7, r0
 800eae8:	b165      	cbz	r5, 800eb04 <_dtoa_r+0x774>
 800eaea:	9b06      	ldr	r3, [sp, #24]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	dd09      	ble.n	800eb04 <_dtoa_r+0x774>
 800eaf0:	42ab      	cmp	r3, r5
 800eaf2:	9a05      	ldr	r2, [sp, #20]
 800eaf4:	bfa8      	it	ge
 800eaf6:	462b      	movge	r3, r5
 800eaf8:	1ad2      	subs	r2, r2, r3
 800eafa:	9205      	str	r2, [sp, #20]
 800eafc:	9a06      	ldr	r2, [sp, #24]
 800eafe:	1aed      	subs	r5, r5, r3
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	9306      	str	r3, [sp, #24]
 800eb04:	9b08      	ldr	r3, [sp, #32]
 800eb06:	b1f3      	cbz	r3, 800eb46 <_dtoa_r+0x7b6>
 800eb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f000 80a3 	beq.w	800ec56 <_dtoa_r+0x8c6>
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	dd10      	ble.n	800eb36 <_dtoa_r+0x7a6>
 800eb14:	4639      	mov	r1, r7
 800eb16:	4632      	mov	r2, r6
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f000 fce1 	bl	800f4e0 <__pow5mult>
 800eb1e:	4652      	mov	r2, sl
 800eb20:	4601      	mov	r1, r0
 800eb22:	4607      	mov	r7, r0
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fc31 	bl	800f38c <__multiply>
 800eb2a:	4651      	mov	r1, sl
 800eb2c:	4680      	mov	r8, r0
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f000 fb60 	bl	800f1f4 <_Bfree>
 800eb34:	46c2      	mov	sl, r8
 800eb36:	9b08      	ldr	r3, [sp, #32]
 800eb38:	1b9a      	subs	r2, r3, r6
 800eb3a:	d004      	beq.n	800eb46 <_dtoa_r+0x7b6>
 800eb3c:	4651      	mov	r1, sl
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f000 fcce 	bl	800f4e0 <__pow5mult>
 800eb44:	4682      	mov	sl, r0
 800eb46:	2101      	movs	r1, #1
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f000 fc09 	bl	800f360 <__i2b>
 800eb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	4606      	mov	r6, r0
 800eb54:	f340 8081 	ble.w	800ec5a <_dtoa_r+0x8ca>
 800eb58:	461a      	mov	r2, r3
 800eb5a:	4601      	mov	r1, r0
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f000 fcbf 	bl	800f4e0 <__pow5mult>
 800eb62:	9b07      	ldr	r3, [sp, #28]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	4606      	mov	r6, r0
 800eb68:	dd7a      	ble.n	800ec60 <_dtoa_r+0x8d0>
 800eb6a:	f04f 0800 	mov.w	r8, #0
 800eb6e:	6933      	ldr	r3, [r6, #16]
 800eb70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eb74:	6918      	ldr	r0, [r3, #16]
 800eb76:	f000 fba5 	bl	800f2c4 <__hi0bits>
 800eb7a:	f1c0 0020 	rsb	r0, r0, #32
 800eb7e:	9b06      	ldr	r3, [sp, #24]
 800eb80:	4418      	add	r0, r3
 800eb82:	f010 001f 	ands.w	r0, r0, #31
 800eb86:	f000 8094 	beq.w	800ecb2 <_dtoa_r+0x922>
 800eb8a:	f1c0 0320 	rsb	r3, r0, #32
 800eb8e:	2b04      	cmp	r3, #4
 800eb90:	f340 8085 	ble.w	800ec9e <_dtoa_r+0x90e>
 800eb94:	9b05      	ldr	r3, [sp, #20]
 800eb96:	f1c0 001c 	rsb	r0, r0, #28
 800eb9a:	4403      	add	r3, r0
 800eb9c:	9305      	str	r3, [sp, #20]
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	4403      	add	r3, r0
 800eba2:	4405      	add	r5, r0
 800eba4:	9306      	str	r3, [sp, #24]
 800eba6:	9b05      	ldr	r3, [sp, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	dd05      	ble.n	800ebb8 <_dtoa_r+0x828>
 800ebac:	4651      	mov	r1, sl
 800ebae:	461a      	mov	r2, r3
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 fcef 	bl	800f594 <__lshift>
 800ebb6:	4682      	mov	sl, r0
 800ebb8:	9b06      	ldr	r3, [sp, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	dd05      	ble.n	800ebca <_dtoa_r+0x83a>
 800ebbe:	4631      	mov	r1, r6
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f000 fce6 	bl	800f594 <__lshift>
 800ebc8:	4606      	mov	r6, r0
 800ebca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d072      	beq.n	800ecb6 <_dtoa_r+0x926>
 800ebd0:	4631      	mov	r1, r6
 800ebd2:	4650      	mov	r0, sl
 800ebd4:	f000 fd4a 	bl	800f66c <__mcmp>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	da6c      	bge.n	800ecb6 <_dtoa_r+0x926>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	4651      	mov	r1, sl
 800ebe0:	220a      	movs	r2, #10
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 fb28 	bl	800f238 <__multadd>
 800ebe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebee:	4682      	mov	sl, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 81b0 	beq.w	800ef56 <_dtoa_r+0xbc6>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	220a      	movs	r2, #10
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 fb1b 	bl	800f238 <__multadd>
 800ec02:	9b01      	ldr	r3, [sp, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	4607      	mov	r7, r0
 800ec08:	f300 8096 	bgt.w	800ed38 <_dtoa_r+0x9a8>
 800ec0c:	9b07      	ldr	r3, [sp, #28]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	dc59      	bgt.n	800ecc6 <_dtoa_r+0x936>
 800ec12:	e091      	b.n	800ed38 <_dtoa_r+0x9a8>
 800ec14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec1a:	e758      	b.n	800eace <_dtoa_r+0x73e>
 800ec1c:	9b04      	ldr	r3, [sp, #16]
 800ec1e:	1e5e      	subs	r6, r3, #1
 800ec20:	9b08      	ldr	r3, [sp, #32]
 800ec22:	42b3      	cmp	r3, r6
 800ec24:	bfbf      	itttt	lt
 800ec26:	9b08      	ldrlt	r3, [sp, #32]
 800ec28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ec2a:	9608      	strlt	r6, [sp, #32]
 800ec2c:	1af3      	sublt	r3, r6, r3
 800ec2e:	bfb4      	ite	lt
 800ec30:	18d2      	addlt	r2, r2, r3
 800ec32:	1b9e      	subge	r6, r3, r6
 800ec34:	9b04      	ldr	r3, [sp, #16]
 800ec36:	bfbc      	itt	lt
 800ec38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ec3a:	2600      	movlt	r6, #0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	bfb7      	itett	lt
 800ec40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ec44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ec48:	1a9d      	sublt	r5, r3, r2
 800ec4a:	2300      	movlt	r3, #0
 800ec4c:	e741      	b.n	800ead2 <_dtoa_r+0x742>
 800ec4e:	9e08      	ldr	r6, [sp, #32]
 800ec50:	9d05      	ldr	r5, [sp, #20]
 800ec52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ec54:	e748      	b.n	800eae8 <_dtoa_r+0x758>
 800ec56:	9a08      	ldr	r2, [sp, #32]
 800ec58:	e770      	b.n	800eb3c <_dtoa_r+0x7ac>
 800ec5a:	9b07      	ldr	r3, [sp, #28]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	dc19      	bgt.n	800ec94 <_dtoa_r+0x904>
 800ec60:	9b02      	ldr	r3, [sp, #8]
 800ec62:	b9bb      	cbnz	r3, 800ec94 <_dtoa_r+0x904>
 800ec64:	9b03      	ldr	r3, [sp, #12]
 800ec66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec6a:	b99b      	cbnz	r3, 800ec94 <_dtoa_r+0x904>
 800ec6c:	9b03      	ldr	r3, [sp, #12]
 800ec6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec72:	0d1b      	lsrs	r3, r3, #20
 800ec74:	051b      	lsls	r3, r3, #20
 800ec76:	b183      	cbz	r3, 800ec9a <_dtoa_r+0x90a>
 800ec78:	9b05      	ldr	r3, [sp, #20]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	9305      	str	r3, [sp, #20]
 800ec7e:	9b06      	ldr	r3, [sp, #24]
 800ec80:	3301      	adds	r3, #1
 800ec82:	9306      	str	r3, [sp, #24]
 800ec84:	f04f 0801 	mov.w	r8, #1
 800ec88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f47f af6f 	bne.w	800eb6e <_dtoa_r+0x7de>
 800ec90:	2001      	movs	r0, #1
 800ec92:	e774      	b.n	800eb7e <_dtoa_r+0x7ee>
 800ec94:	f04f 0800 	mov.w	r8, #0
 800ec98:	e7f6      	b.n	800ec88 <_dtoa_r+0x8f8>
 800ec9a:	4698      	mov	r8, r3
 800ec9c:	e7f4      	b.n	800ec88 <_dtoa_r+0x8f8>
 800ec9e:	d082      	beq.n	800eba6 <_dtoa_r+0x816>
 800eca0:	9a05      	ldr	r2, [sp, #20]
 800eca2:	331c      	adds	r3, #28
 800eca4:	441a      	add	r2, r3
 800eca6:	9205      	str	r2, [sp, #20]
 800eca8:	9a06      	ldr	r2, [sp, #24]
 800ecaa:	441a      	add	r2, r3
 800ecac:	441d      	add	r5, r3
 800ecae:	9206      	str	r2, [sp, #24]
 800ecb0:	e779      	b.n	800eba6 <_dtoa_r+0x816>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	e7f4      	b.n	800eca0 <_dtoa_r+0x910>
 800ecb6:	9b04      	ldr	r3, [sp, #16]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	dc37      	bgt.n	800ed2c <_dtoa_r+0x99c>
 800ecbc:	9b07      	ldr	r3, [sp, #28]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	dd34      	ble.n	800ed2c <_dtoa_r+0x99c>
 800ecc2:	9b04      	ldr	r3, [sp, #16]
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	9b01      	ldr	r3, [sp, #4]
 800ecc8:	b963      	cbnz	r3, 800ece4 <_dtoa_r+0x954>
 800ecca:	4631      	mov	r1, r6
 800eccc:	2205      	movs	r2, #5
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 fab2 	bl	800f238 <__multadd>
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	4650      	mov	r0, sl
 800ecda:	f000 fcc7 	bl	800f66c <__mcmp>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f73f adbb 	bgt.w	800e85a <_dtoa_r+0x4ca>
 800ece4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece6:	9d00      	ldr	r5, [sp, #0]
 800ece8:	ea6f 0b03 	mvn.w	fp, r3
 800ecec:	f04f 0800 	mov.w	r8, #0
 800ecf0:	4631      	mov	r1, r6
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f000 fa7e 	bl	800f1f4 <_Bfree>
 800ecf8:	2f00      	cmp	r7, #0
 800ecfa:	f43f aeab 	beq.w	800ea54 <_dtoa_r+0x6c4>
 800ecfe:	f1b8 0f00 	cmp.w	r8, #0
 800ed02:	d005      	beq.n	800ed10 <_dtoa_r+0x980>
 800ed04:	45b8      	cmp	r8, r7
 800ed06:	d003      	beq.n	800ed10 <_dtoa_r+0x980>
 800ed08:	4641      	mov	r1, r8
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fa72 	bl	800f1f4 <_Bfree>
 800ed10:	4639      	mov	r1, r7
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 fa6e 	bl	800f1f4 <_Bfree>
 800ed18:	e69c      	b.n	800ea54 <_dtoa_r+0x6c4>
 800ed1a:	2600      	movs	r6, #0
 800ed1c:	4637      	mov	r7, r6
 800ed1e:	e7e1      	b.n	800ece4 <_dtoa_r+0x954>
 800ed20:	46bb      	mov	fp, r7
 800ed22:	4637      	mov	r7, r6
 800ed24:	e599      	b.n	800e85a <_dtoa_r+0x4ca>
 800ed26:	bf00      	nop
 800ed28:	40240000 	.word	0x40240000
 800ed2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 80c8 	beq.w	800eec4 <_dtoa_r+0xb34>
 800ed34:	9b04      	ldr	r3, [sp, #16]
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	dd05      	ble.n	800ed48 <_dtoa_r+0x9b8>
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	462a      	mov	r2, r5
 800ed40:	4620      	mov	r0, r4
 800ed42:	f000 fc27 	bl	800f594 <__lshift>
 800ed46:	4607      	mov	r7, r0
 800ed48:	f1b8 0f00 	cmp.w	r8, #0
 800ed4c:	d05b      	beq.n	800ee06 <_dtoa_r+0xa76>
 800ed4e:	6879      	ldr	r1, [r7, #4]
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 fa0f 	bl	800f174 <_Balloc>
 800ed56:	4605      	mov	r5, r0
 800ed58:	b928      	cbnz	r0, 800ed66 <_dtoa_r+0x9d6>
 800ed5a:	4b83      	ldr	r3, [pc, #524]	; (800ef68 <_dtoa_r+0xbd8>)
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ed62:	f7ff bb2e 	b.w	800e3c2 <_dtoa_r+0x32>
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	3202      	adds	r2, #2
 800ed6a:	0092      	lsls	r2, r2, #2
 800ed6c:	f107 010c 	add.w	r1, r7, #12
 800ed70:	300c      	adds	r0, #12
 800ed72:	f7ff fa77 	bl	800e264 <memcpy>
 800ed76:	2201      	movs	r2, #1
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f000 fc0a 	bl	800f594 <__lshift>
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	3301      	adds	r3, #1
 800ed84:	9304      	str	r3, [sp, #16]
 800ed86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	9308      	str	r3, [sp, #32]
 800ed8e:	9b02      	ldr	r3, [sp, #8]
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	46b8      	mov	r8, r7
 800ed96:	9306      	str	r3, [sp, #24]
 800ed98:	4607      	mov	r7, r0
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	4631      	mov	r1, r6
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	4650      	mov	r0, sl
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	f7ff fa6c 	bl	800e280 <quorem>
 800eda8:	4641      	mov	r1, r8
 800edaa:	9002      	str	r0, [sp, #8]
 800edac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800edb0:	4650      	mov	r0, sl
 800edb2:	f000 fc5b 	bl	800f66c <__mcmp>
 800edb6:	463a      	mov	r2, r7
 800edb8:	9005      	str	r0, [sp, #20]
 800edba:	4631      	mov	r1, r6
 800edbc:	4620      	mov	r0, r4
 800edbe:	f000 fc71 	bl	800f6a4 <__mdiff>
 800edc2:	68c2      	ldr	r2, [r0, #12]
 800edc4:	4605      	mov	r5, r0
 800edc6:	bb02      	cbnz	r2, 800ee0a <_dtoa_r+0xa7a>
 800edc8:	4601      	mov	r1, r0
 800edca:	4650      	mov	r0, sl
 800edcc:	f000 fc4e 	bl	800f66c <__mcmp>
 800edd0:	4602      	mov	r2, r0
 800edd2:	4629      	mov	r1, r5
 800edd4:	4620      	mov	r0, r4
 800edd6:	9209      	str	r2, [sp, #36]	; 0x24
 800edd8:	f000 fa0c 	bl	800f1f4 <_Bfree>
 800eddc:	9b07      	ldr	r3, [sp, #28]
 800edde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ede0:	9d04      	ldr	r5, [sp, #16]
 800ede2:	ea43 0102 	orr.w	r1, r3, r2
 800ede6:	9b06      	ldr	r3, [sp, #24]
 800ede8:	4319      	orrs	r1, r3
 800edea:	d110      	bne.n	800ee0e <_dtoa_r+0xa7e>
 800edec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800edf0:	d029      	beq.n	800ee46 <_dtoa_r+0xab6>
 800edf2:	9b05      	ldr	r3, [sp, #20]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	dd02      	ble.n	800edfe <_dtoa_r+0xa6e>
 800edf8:	9b02      	ldr	r3, [sp, #8]
 800edfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800edfe:	9b01      	ldr	r3, [sp, #4]
 800ee00:	f883 9000 	strb.w	r9, [r3]
 800ee04:	e774      	b.n	800ecf0 <_dtoa_r+0x960>
 800ee06:	4638      	mov	r0, r7
 800ee08:	e7ba      	b.n	800ed80 <_dtoa_r+0x9f0>
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	e7e1      	b.n	800edd2 <_dtoa_r+0xa42>
 800ee0e:	9b05      	ldr	r3, [sp, #20]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	db04      	blt.n	800ee1e <_dtoa_r+0xa8e>
 800ee14:	9907      	ldr	r1, [sp, #28]
 800ee16:	430b      	orrs	r3, r1
 800ee18:	9906      	ldr	r1, [sp, #24]
 800ee1a:	430b      	orrs	r3, r1
 800ee1c:	d120      	bne.n	800ee60 <_dtoa_r+0xad0>
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	dded      	ble.n	800edfe <_dtoa_r+0xa6e>
 800ee22:	4651      	mov	r1, sl
 800ee24:	2201      	movs	r2, #1
 800ee26:	4620      	mov	r0, r4
 800ee28:	f000 fbb4 	bl	800f594 <__lshift>
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	4682      	mov	sl, r0
 800ee30:	f000 fc1c 	bl	800f66c <__mcmp>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	dc03      	bgt.n	800ee40 <_dtoa_r+0xab0>
 800ee38:	d1e1      	bne.n	800edfe <_dtoa_r+0xa6e>
 800ee3a:	f019 0f01 	tst.w	r9, #1
 800ee3e:	d0de      	beq.n	800edfe <_dtoa_r+0xa6e>
 800ee40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee44:	d1d8      	bne.n	800edf8 <_dtoa_r+0xa68>
 800ee46:	9a01      	ldr	r2, [sp, #4]
 800ee48:	2339      	movs	r3, #57	; 0x39
 800ee4a:	7013      	strb	r3, [r2, #0]
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	461d      	mov	r5, r3
 800ee50:	3b01      	subs	r3, #1
 800ee52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee56:	2a39      	cmp	r2, #57	; 0x39
 800ee58:	d06c      	beq.n	800ef34 <_dtoa_r+0xba4>
 800ee5a:	3201      	adds	r2, #1
 800ee5c:	701a      	strb	r2, [r3, #0]
 800ee5e:	e747      	b.n	800ecf0 <_dtoa_r+0x960>
 800ee60:	2a00      	cmp	r2, #0
 800ee62:	dd07      	ble.n	800ee74 <_dtoa_r+0xae4>
 800ee64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee68:	d0ed      	beq.n	800ee46 <_dtoa_r+0xab6>
 800ee6a:	9a01      	ldr	r2, [sp, #4]
 800ee6c:	f109 0301 	add.w	r3, r9, #1
 800ee70:	7013      	strb	r3, [r2, #0]
 800ee72:	e73d      	b.n	800ecf0 <_dtoa_r+0x960>
 800ee74:	9b04      	ldr	r3, [sp, #16]
 800ee76:	9a08      	ldr	r2, [sp, #32]
 800ee78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d043      	beq.n	800ef08 <_dtoa_r+0xb78>
 800ee80:	4651      	mov	r1, sl
 800ee82:	2300      	movs	r3, #0
 800ee84:	220a      	movs	r2, #10
 800ee86:	4620      	mov	r0, r4
 800ee88:	f000 f9d6 	bl	800f238 <__multadd>
 800ee8c:	45b8      	cmp	r8, r7
 800ee8e:	4682      	mov	sl, r0
 800ee90:	f04f 0300 	mov.w	r3, #0
 800ee94:	f04f 020a 	mov.w	r2, #10
 800ee98:	4641      	mov	r1, r8
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	d107      	bne.n	800eeae <_dtoa_r+0xb1e>
 800ee9e:	f000 f9cb 	bl	800f238 <__multadd>
 800eea2:	4680      	mov	r8, r0
 800eea4:	4607      	mov	r7, r0
 800eea6:	9b04      	ldr	r3, [sp, #16]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	9304      	str	r3, [sp, #16]
 800eeac:	e775      	b.n	800ed9a <_dtoa_r+0xa0a>
 800eeae:	f000 f9c3 	bl	800f238 <__multadd>
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	4680      	mov	r8, r0
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	220a      	movs	r2, #10
 800eeba:	4620      	mov	r0, r4
 800eebc:	f000 f9bc 	bl	800f238 <__multadd>
 800eec0:	4607      	mov	r7, r0
 800eec2:	e7f0      	b.n	800eea6 <_dtoa_r+0xb16>
 800eec4:	9b04      	ldr	r3, [sp, #16]
 800eec6:	9301      	str	r3, [sp, #4]
 800eec8:	9d00      	ldr	r5, [sp, #0]
 800eeca:	4631      	mov	r1, r6
 800eecc:	4650      	mov	r0, sl
 800eece:	f7ff f9d7 	bl	800e280 <quorem>
 800eed2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eed6:	9b00      	ldr	r3, [sp, #0]
 800eed8:	f805 9b01 	strb.w	r9, [r5], #1
 800eedc:	1aea      	subs	r2, r5, r3
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	4293      	cmp	r3, r2
 800eee2:	dd07      	ble.n	800eef4 <_dtoa_r+0xb64>
 800eee4:	4651      	mov	r1, sl
 800eee6:	2300      	movs	r3, #0
 800eee8:	220a      	movs	r2, #10
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 f9a4 	bl	800f238 <__multadd>
 800eef0:	4682      	mov	sl, r0
 800eef2:	e7ea      	b.n	800eeca <_dtoa_r+0xb3a>
 800eef4:	9b01      	ldr	r3, [sp, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	bfc8      	it	gt
 800eefa:	461d      	movgt	r5, r3
 800eefc:	9b00      	ldr	r3, [sp, #0]
 800eefe:	bfd8      	it	le
 800ef00:	2501      	movle	r5, #1
 800ef02:	441d      	add	r5, r3
 800ef04:	f04f 0800 	mov.w	r8, #0
 800ef08:	4651      	mov	r1, sl
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f000 fb41 	bl	800f594 <__lshift>
 800ef12:	4631      	mov	r1, r6
 800ef14:	4682      	mov	sl, r0
 800ef16:	f000 fba9 	bl	800f66c <__mcmp>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	dc96      	bgt.n	800ee4c <_dtoa_r+0xabc>
 800ef1e:	d102      	bne.n	800ef26 <_dtoa_r+0xb96>
 800ef20:	f019 0f01 	tst.w	r9, #1
 800ef24:	d192      	bne.n	800ee4c <_dtoa_r+0xabc>
 800ef26:	462b      	mov	r3, r5
 800ef28:	461d      	mov	r5, r3
 800ef2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef2e:	2a30      	cmp	r2, #48	; 0x30
 800ef30:	d0fa      	beq.n	800ef28 <_dtoa_r+0xb98>
 800ef32:	e6dd      	b.n	800ecf0 <_dtoa_r+0x960>
 800ef34:	9a00      	ldr	r2, [sp, #0]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d189      	bne.n	800ee4e <_dtoa_r+0xabe>
 800ef3a:	f10b 0b01 	add.w	fp, fp, #1
 800ef3e:	2331      	movs	r3, #49	; 0x31
 800ef40:	e796      	b.n	800ee70 <_dtoa_r+0xae0>
 800ef42:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <_dtoa_r+0xbdc>)
 800ef44:	f7ff ba99 	b.w	800e47a <_dtoa_r+0xea>
 800ef48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f47f aa6d 	bne.w	800e42a <_dtoa_r+0x9a>
 800ef50:	4b07      	ldr	r3, [pc, #28]	; (800ef70 <_dtoa_r+0xbe0>)
 800ef52:	f7ff ba92 	b.w	800e47a <_dtoa_r+0xea>
 800ef56:	9b01      	ldr	r3, [sp, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	dcb5      	bgt.n	800eec8 <_dtoa_r+0xb38>
 800ef5c:	9b07      	ldr	r3, [sp, #28]
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	f73f aeb1 	bgt.w	800ecc6 <_dtoa_r+0x936>
 800ef64:	e7b0      	b.n	800eec8 <_dtoa_r+0xb38>
 800ef66:	bf00      	nop
 800ef68:	0801071c 	.word	0x0801071c
 800ef6c:	0801067c 	.word	0x0801067c
 800ef70:	080106a0 	.word	0x080106a0

0800ef74 <_free_r>:
 800ef74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef76:	2900      	cmp	r1, #0
 800ef78:	d044      	beq.n	800f004 <_free_r+0x90>
 800ef7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef7e:	9001      	str	r0, [sp, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f1a1 0404 	sub.w	r4, r1, #4
 800ef86:	bfb8      	it	lt
 800ef88:	18e4      	addlt	r4, r4, r3
 800ef8a:	f000 f8e7 	bl	800f15c <__malloc_lock>
 800ef8e:	4a1e      	ldr	r2, [pc, #120]	; (800f008 <_free_r+0x94>)
 800ef90:	9801      	ldr	r0, [sp, #4]
 800ef92:	6813      	ldr	r3, [r2, #0]
 800ef94:	b933      	cbnz	r3, 800efa4 <_free_r+0x30>
 800ef96:	6063      	str	r3, [r4, #4]
 800ef98:	6014      	str	r4, [r2, #0]
 800ef9a:	b003      	add	sp, #12
 800ef9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efa0:	f000 b8e2 	b.w	800f168 <__malloc_unlock>
 800efa4:	42a3      	cmp	r3, r4
 800efa6:	d908      	bls.n	800efba <_free_r+0x46>
 800efa8:	6825      	ldr	r5, [r4, #0]
 800efaa:	1961      	adds	r1, r4, r5
 800efac:	428b      	cmp	r3, r1
 800efae:	bf01      	itttt	eq
 800efb0:	6819      	ldreq	r1, [r3, #0]
 800efb2:	685b      	ldreq	r3, [r3, #4]
 800efb4:	1949      	addeq	r1, r1, r5
 800efb6:	6021      	streq	r1, [r4, #0]
 800efb8:	e7ed      	b.n	800ef96 <_free_r+0x22>
 800efba:	461a      	mov	r2, r3
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	b10b      	cbz	r3, 800efc4 <_free_r+0x50>
 800efc0:	42a3      	cmp	r3, r4
 800efc2:	d9fa      	bls.n	800efba <_free_r+0x46>
 800efc4:	6811      	ldr	r1, [r2, #0]
 800efc6:	1855      	adds	r5, r2, r1
 800efc8:	42a5      	cmp	r5, r4
 800efca:	d10b      	bne.n	800efe4 <_free_r+0x70>
 800efcc:	6824      	ldr	r4, [r4, #0]
 800efce:	4421      	add	r1, r4
 800efd0:	1854      	adds	r4, r2, r1
 800efd2:	42a3      	cmp	r3, r4
 800efd4:	6011      	str	r1, [r2, #0]
 800efd6:	d1e0      	bne.n	800ef9a <_free_r+0x26>
 800efd8:	681c      	ldr	r4, [r3, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	6053      	str	r3, [r2, #4]
 800efde:	440c      	add	r4, r1
 800efe0:	6014      	str	r4, [r2, #0]
 800efe2:	e7da      	b.n	800ef9a <_free_r+0x26>
 800efe4:	d902      	bls.n	800efec <_free_r+0x78>
 800efe6:	230c      	movs	r3, #12
 800efe8:	6003      	str	r3, [r0, #0]
 800efea:	e7d6      	b.n	800ef9a <_free_r+0x26>
 800efec:	6825      	ldr	r5, [r4, #0]
 800efee:	1961      	adds	r1, r4, r5
 800eff0:	428b      	cmp	r3, r1
 800eff2:	bf04      	itt	eq
 800eff4:	6819      	ldreq	r1, [r3, #0]
 800eff6:	685b      	ldreq	r3, [r3, #4]
 800eff8:	6063      	str	r3, [r4, #4]
 800effa:	bf04      	itt	eq
 800effc:	1949      	addeq	r1, r1, r5
 800effe:	6021      	streq	r1, [r4, #0]
 800f000:	6054      	str	r4, [r2, #4]
 800f002:	e7ca      	b.n	800ef9a <_free_r+0x26>
 800f004:	b003      	add	sp, #12
 800f006:	bd30      	pop	{r4, r5, pc}
 800f008:	20001740 	.word	0x20001740

0800f00c <malloc>:
 800f00c:	4b02      	ldr	r3, [pc, #8]	; (800f018 <malloc+0xc>)
 800f00e:	4601      	mov	r1, r0
 800f010:	6818      	ldr	r0, [r3, #0]
 800f012:	f000 b823 	b.w	800f05c <_malloc_r>
 800f016:	bf00      	nop
 800f018:	20000164 	.word	0x20000164

0800f01c <sbrk_aligned>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	4e0e      	ldr	r6, [pc, #56]	; (800f058 <sbrk_aligned+0x3c>)
 800f020:	460c      	mov	r4, r1
 800f022:	6831      	ldr	r1, [r6, #0]
 800f024:	4605      	mov	r5, r0
 800f026:	b911      	cbnz	r1, 800f02e <sbrk_aligned+0x12>
 800f028:	f001 f808 	bl	801003c <_sbrk_r>
 800f02c:	6030      	str	r0, [r6, #0]
 800f02e:	4621      	mov	r1, r4
 800f030:	4628      	mov	r0, r5
 800f032:	f001 f803 	bl	801003c <_sbrk_r>
 800f036:	1c43      	adds	r3, r0, #1
 800f038:	d00a      	beq.n	800f050 <sbrk_aligned+0x34>
 800f03a:	1cc4      	adds	r4, r0, #3
 800f03c:	f024 0403 	bic.w	r4, r4, #3
 800f040:	42a0      	cmp	r0, r4
 800f042:	d007      	beq.n	800f054 <sbrk_aligned+0x38>
 800f044:	1a21      	subs	r1, r4, r0
 800f046:	4628      	mov	r0, r5
 800f048:	f000 fff8 	bl	801003c <_sbrk_r>
 800f04c:	3001      	adds	r0, #1
 800f04e:	d101      	bne.n	800f054 <sbrk_aligned+0x38>
 800f050:	f04f 34ff 	mov.w	r4, #4294967295
 800f054:	4620      	mov	r0, r4
 800f056:	bd70      	pop	{r4, r5, r6, pc}
 800f058:	20001744 	.word	0x20001744

0800f05c <_malloc_r>:
 800f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f060:	1ccd      	adds	r5, r1, #3
 800f062:	f025 0503 	bic.w	r5, r5, #3
 800f066:	3508      	adds	r5, #8
 800f068:	2d0c      	cmp	r5, #12
 800f06a:	bf38      	it	cc
 800f06c:	250c      	movcc	r5, #12
 800f06e:	2d00      	cmp	r5, #0
 800f070:	4607      	mov	r7, r0
 800f072:	db01      	blt.n	800f078 <_malloc_r+0x1c>
 800f074:	42a9      	cmp	r1, r5
 800f076:	d905      	bls.n	800f084 <_malloc_r+0x28>
 800f078:	230c      	movs	r3, #12
 800f07a:	603b      	str	r3, [r7, #0]
 800f07c:	2600      	movs	r6, #0
 800f07e:	4630      	mov	r0, r6
 800f080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f084:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f158 <_malloc_r+0xfc>
 800f088:	f000 f868 	bl	800f15c <__malloc_lock>
 800f08c:	f8d8 3000 	ldr.w	r3, [r8]
 800f090:	461c      	mov	r4, r3
 800f092:	bb5c      	cbnz	r4, 800f0ec <_malloc_r+0x90>
 800f094:	4629      	mov	r1, r5
 800f096:	4638      	mov	r0, r7
 800f098:	f7ff ffc0 	bl	800f01c <sbrk_aligned>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	4604      	mov	r4, r0
 800f0a0:	d155      	bne.n	800f14e <_malloc_r+0xf2>
 800f0a2:	f8d8 4000 	ldr.w	r4, [r8]
 800f0a6:	4626      	mov	r6, r4
 800f0a8:	2e00      	cmp	r6, #0
 800f0aa:	d145      	bne.n	800f138 <_malloc_r+0xdc>
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	d048      	beq.n	800f142 <_malloc_r+0xe6>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	eb04 0903 	add.w	r9, r4, r3
 800f0ba:	f000 ffbf 	bl	801003c <_sbrk_r>
 800f0be:	4581      	cmp	r9, r0
 800f0c0:	d13f      	bne.n	800f142 <_malloc_r+0xe6>
 800f0c2:	6821      	ldr	r1, [r4, #0]
 800f0c4:	1a6d      	subs	r5, r5, r1
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	f7ff ffa7 	bl	800f01c <sbrk_aligned>
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	d037      	beq.n	800f142 <_malloc_r+0xe6>
 800f0d2:	6823      	ldr	r3, [r4, #0]
 800f0d4:	442b      	add	r3, r5
 800f0d6:	6023      	str	r3, [r4, #0]
 800f0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d038      	beq.n	800f152 <_malloc_r+0xf6>
 800f0e0:	685a      	ldr	r2, [r3, #4]
 800f0e2:	42a2      	cmp	r2, r4
 800f0e4:	d12b      	bne.n	800f13e <_malloc_r+0xe2>
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	605a      	str	r2, [r3, #4]
 800f0ea:	e00f      	b.n	800f10c <_malloc_r+0xb0>
 800f0ec:	6822      	ldr	r2, [r4, #0]
 800f0ee:	1b52      	subs	r2, r2, r5
 800f0f0:	d41f      	bmi.n	800f132 <_malloc_r+0xd6>
 800f0f2:	2a0b      	cmp	r2, #11
 800f0f4:	d917      	bls.n	800f126 <_malloc_r+0xca>
 800f0f6:	1961      	adds	r1, r4, r5
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	6025      	str	r5, [r4, #0]
 800f0fc:	bf18      	it	ne
 800f0fe:	6059      	strne	r1, [r3, #4]
 800f100:	6863      	ldr	r3, [r4, #4]
 800f102:	bf08      	it	eq
 800f104:	f8c8 1000 	streq.w	r1, [r8]
 800f108:	5162      	str	r2, [r4, r5]
 800f10a:	604b      	str	r3, [r1, #4]
 800f10c:	4638      	mov	r0, r7
 800f10e:	f104 060b 	add.w	r6, r4, #11
 800f112:	f000 f829 	bl	800f168 <__malloc_unlock>
 800f116:	f026 0607 	bic.w	r6, r6, #7
 800f11a:	1d23      	adds	r3, r4, #4
 800f11c:	1af2      	subs	r2, r6, r3
 800f11e:	d0ae      	beq.n	800f07e <_malloc_r+0x22>
 800f120:	1b9b      	subs	r3, r3, r6
 800f122:	50a3      	str	r3, [r4, r2]
 800f124:	e7ab      	b.n	800f07e <_malloc_r+0x22>
 800f126:	42a3      	cmp	r3, r4
 800f128:	6862      	ldr	r2, [r4, #4]
 800f12a:	d1dd      	bne.n	800f0e8 <_malloc_r+0x8c>
 800f12c:	f8c8 2000 	str.w	r2, [r8]
 800f130:	e7ec      	b.n	800f10c <_malloc_r+0xb0>
 800f132:	4623      	mov	r3, r4
 800f134:	6864      	ldr	r4, [r4, #4]
 800f136:	e7ac      	b.n	800f092 <_malloc_r+0x36>
 800f138:	4634      	mov	r4, r6
 800f13a:	6876      	ldr	r6, [r6, #4]
 800f13c:	e7b4      	b.n	800f0a8 <_malloc_r+0x4c>
 800f13e:	4613      	mov	r3, r2
 800f140:	e7cc      	b.n	800f0dc <_malloc_r+0x80>
 800f142:	230c      	movs	r3, #12
 800f144:	603b      	str	r3, [r7, #0]
 800f146:	4638      	mov	r0, r7
 800f148:	f000 f80e 	bl	800f168 <__malloc_unlock>
 800f14c:	e797      	b.n	800f07e <_malloc_r+0x22>
 800f14e:	6025      	str	r5, [r4, #0]
 800f150:	e7dc      	b.n	800f10c <_malloc_r+0xb0>
 800f152:	605b      	str	r3, [r3, #4]
 800f154:	deff      	udf	#255	; 0xff
 800f156:	bf00      	nop
 800f158:	20001740 	.word	0x20001740

0800f15c <__malloc_lock>:
 800f15c:	4801      	ldr	r0, [pc, #4]	; (800f164 <__malloc_lock+0x8>)
 800f15e:	f7ff b87f 	b.w	800e260 <__retarget_lock_acquire_recursive>
 800f162:	bf00      	nop
 800f164:	2000173c 	.word	0x2000173c

0800f168 <__malloc_unlock>:
 800f168:	4801      	ldr	r0, [pc, #4]	; (800f170 <__malloc_unlock+0x8>)
 800f16a:	f7ff b87a 	b.w	800e262 <__retarget_lock_release_recursive>
 800f16e:	bf00      	nop
 800f170:	2000173c 	.word	0x2000173c

0800f174 <_Balloc>:
 800f174:	b570      	push	{r4, r5, r6, lr}
 800f176:	69c6      	ldr	r6, [r0, #28]
 800f178:	4604      	mov	r4, r0
 800f17a:	460d      	mov	r5, r1
 800f17c:	b976      	cbnz	r6, 800f19c <_Balloc+0x28>
 800f17e:	2010      	movs	r0, #16
 800f180:	f7ff ff44 	bl	800f00c <malloc>
 800f184:	4602      	mov	r2, r0
 800f186:	61e0      	str	r0, [r4, #28]
 800f188:	b920      	cbnz	r0, 800f194 <_Balloc+0x20>
 800f18a:	4b18      	ldr	r3, [pc, #96]	; (800f1ec <_Balloc+0x78>)
 800f18c:	4818      	ldr	r0, [pc, #96]	; (800f1f0 <_Balloc+0x7c>)
 800f18e:	216b      	movs	r1, #107	; 0x6b
 800f190:	f000 ff64 	bl	801005c <__assert_func>
 800f194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f198:	6006      	str	r6, [r0, #0]
 800f19a:	60c6      	str	r6, [r0, #12]
 800f19c:	69e6      	ldr	r6, [r4, #28]
 800f19e:	68f3      	ldr	r3, [r6, #12]
 800f1a0:	b183      	cbz	r3, 800f1c4 <_Balloc+0x50>
 800f1a2:	69e3      	ldr	r3, [r4, #28]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1aa:	b9b8      	cbnz	r0, 800f1dc <_Balloc+0x68>
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	fa01 f605 	lsl.w	r6, r1, r5
 800f1b2:	1d72      	adds	r2, r6, #5
 800f1b4:	0092      	lsls	r2, r2, #2
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f000 ff6e 	bl	8010098 <_calloc_r>
 800f1bc:	b160      	cbz	r0, 800f1d8 <_Balloc+0x64>
 800f1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1c2:	e00e      	b.n	800f1e2 <_Balloc+0x6e>
 800f1c4:	2221      	movs	r2, #33	; 0x21
 800f1c6:	2104      	movs	r1, #4
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f000 ff65 	bl	8010098 <_calloc_r>
 800f1ce:	69e3      	ldr	r3, [r4, #28]
 800f1d0:	60f0      	str	r0, [r6, #12]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1e4      	bne.n	800f1a2 <_Balloc+0x2e>
 800f1d8:	2000      	movs	r0, #0
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
 800f1dc:	6802      	ldr	r2, [r0, #0]
 800f1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1e8:	e7f7      	b.n	800f1da <_Balloc+0x66>
 800f1ea:	bf00      	nop
 800f1ec:	080106ad 	.word	0x080106ad
 800f1f0:	0801072d 	.word	0x0801072d

0800f1f4 <_Bfree>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	69c6      	ldr	r6, [r0, #28]
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	b976      	cbnz	r6, 800f21c <_Bfree+0x28>
 800f1fe:	2010      	movs	r0, #16
 800f200:	f7ff ff04 	bl	800f00c <malloc>
 800f204:	4602      	mov	r2, r0
 800f206:	61e8      	str	r0, [r5, #28]
 800f208:	b920      	cbnz	r0, 800f214 <_Bfree+0x20>
 800f20a:	4b09      	ldr	r3, [pc, #36]	; (800f230 <_Bfree+0x3c>)
 800f20c:	4809      	ldr	r0, [pc, #36]	; (800f234 <_Bfree+0x40>)
 800f20e:	218f      	movs	r1, #143	; 0x8f
 800f210:	f000 ff24 	bl	801005c <__assert_func>
 800f214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f218:	6006      	str	r6, [r0, #0]
 800f21a:	60c6      	str	r6, [r0, #12]
 800f21c:	b13c      	cbz	r4, 800f22e <_Bfree+0x3a>
 800f21e:	69eb      	ldr	r3, [r5, #28]
 800f220:	6862      	ldr	r2, [r4, #4]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f228:	6021      	str	r1, [r4, #0]
 800f22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f22e:	bd70      	pop	{r4, r5, r6, pc}
 800f230:	080106ad 	.word	0x080106ad
 800f234:	0801072d 	.word	0x0801072d

0800f238 <__multadd>:
 800f238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23c:	690d      	ldr	r5, [r1, #16]
 800f23e:	4607      	mov	r7, r0
 800f240:	460c      	mov	r4, r1
 800f242:	461e      	mov	r6, r3
 800f244:	f101 0c14 	add.w	ip, r1, #20
 800f248:	2000      	movs	r0, #0
 800f24a:	f8dc 3000 	ldr.w	r3, [ip]
 800f24e:	b299      	uxth	r1, r3
 800f250:	fb02 6101 	mla	r1, r2, r1, r6
 800f254:	0c1e      	lsrs	r6, r3, #16
 800f256:	0c0b      	lsrs	r3, r1, #16
 800f258:	fb02 3306 	mla	r3, r2, r6, r3
 800f25c:	b289      	uxth	r1, r1
 800f25e:	3001      	adds	r0, #1
 800f260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f264:	4285      	cmp	r5, r0
 800f266:	f84c 1b04 	str.w	r1, [ip], #4
 800f26a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f26e:	dcec      	bgt.n	800f24a <__multadd+0x12>
 800f270:	b30e      	cbz	r6, 800f2b6 <__multadd+0x7e>
 800f272:	68a3      	ldr	r3, [r4, #8]
 800f274:	42ab      	cmp	r3, r5
 800f276:	dc19      	bgt.n	800f2ac <__multadd+0x74>
 800f278:	6861      	ldr	r1, [r4, #4]
 800f27a:	4638      	mov	r0, r7
 800f27c:	3101      	adds	r1, #1
 800f27e:	f7ff ff79 	bl	800f174 <_Balloc>
 800f282:	4680      	mov	r8, r0
 800f284:	b928      	cbnz	r0, 800f292 <__multadd+0x5a>
 800f286:	4602      	mov	r2, r0
 800f288:	4b0c      	ldr	r3, [pc, #48]	; (800f2bc <__multadd+0x84>)
 800f28a:	480d      	ldr	r0, [pc, #52]	; (800f2c0 <__multadd+0x88>)
 800f28c:	21ba      	movs	r1, #186	; 0xba
 800f28e:	f000 fee5 	bl	801005c <__assert_func>
 800f292:	6922      	ldr	r2, [r4, #16]
 800f294:	3202      	adds	r2, #2
 800f296:	f104 010c 	add.w	r1, r4, #12
 800f29a:	0092      	lsls	r2, r2, #2
 800f29c:	300c      	adds	r0, #12
 800f29e:	f7fe ffe1 	bl	800e264 <memcpy>
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	f7ff ffa5 	bl	800f1f4 <_Bfree>
 800f2aa:	4644      	mov	r4, r8
 800f2ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2b0:	3501      	adds	r5, #1
 800f2b2:	615e      	str	r6, [r3, #20]
 800f2b4:	6125      	str	r5, [r4, #16]
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2bc:	0801071c 	.word	0x0801071c
 800f2c0:	0801072d 	.word	0x0801072d

0800f2c4 <__hi0bits>:
 800f2c4:	0c03      	lsrs	r3, r0, #16
 800f2c6:	041b      	lsls	r3, r3, #16
 800f2c8:	b9d3      	cbnz	r3, 800f300 <__hi0bits+0x3c>
 800f2ca:	0400      	lsls	r0, r0, #16
 800f2cc:	2310      	movs	r3, #16
 800f2ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f2d2:	bf04      	itt	eq
 800f2d4:	0200      	lsleq	r0, r0, #8
 800f2d6:	3308      	addeq	r3, #8
 800f2d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f2dc:	bf04      	itt	eq
 800f2de:	0100      	lsleq	r0, r0, #4
 800f2e0:	3304      	addeq	r3, #4
 800f2e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f2e6:	bf04      	itt	eq
 800f2e8:	0080      	lsleq	r0, r0, #2
 800f2ea:	3302      	addeq	r3, #2
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	db05      	blt.n	800f2fc <__hi0bits+0x38>
 800f2f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f2f4:	f103 0301 	add.w	r3, r3, #1
 800f2f8:	bf08      	it	eq
 800f2fa:	2320      	moveq	r3, #32
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	4770      	bx	lr
 800f300:	2300      	movs	r3, #0
 800f302:	e7e4      	b.n	800f2ce <__hi0bits+0xa>

0800f304 <__lo0bits>:
 800f304:	6803      	ldr	r3, [r0, #0]
 800f306:	f013 0207 	ands.w	r2, r3, #7
 800f30a:	d00c      	beq.n	800f326 <__lo0bits+0x22>
 800f30c:	07d9      	lsls	r1, r3, #31
 800f30e:	d422      	bmi.n	800f356 <__lo0bits+0x52>
 800f310:	079a      	lsls	r2, r3, #30
 800f312:	bf49      	itett	mi
 800f314:	085b      	lsrmi	r3, r3, #1
 800f316:	089b      	lsrpl	r3, r3, #2
 800f318:	6003      	strmi	r3, [r0, #0]
 800f31a:	2201      	movmi	r2, #1
 800f31c:	bf5c      	itt	pl
 800f31e:	6003      	strpl	r3, [r0, #0]
 800f320:	2202      	movpl	r2, #2
 800f322:	4610      	mov	r0, r2
 800f324:	4770      	bx	lr
 800f326:	b299      	uxth	r1, r3
 800f328:	b909      	cbnz	r1, 800f32e <__lo0bits+0x2a>
 800f32a:	0c1b      	lsrs	r3, r3, #16
 800f32c:	2210      	movs	r2, #16
 800f32e:	b2d9      	uxtb	r1, r3
 800f330:	b909      	cbnz	r1, 800f336 <__lo0bits+0x32>
 800f332:	3208      	adds	r2, #8
 800f334:	0a1b      	lsrs	r3, r3, #8
 800f336:	0719      	lsls	r1, r3, #28
 800f338:	bf04      	itt	eq
 800f33a:	091b      	lsreq	r3, r3, #4
 800f33c:	3204      	addeq	r2, #4
 800f33e:	0799      	lsls	r1, r3, #30
 800f340:	bf04      	itt	eq
 800f342:	089b      	lsreq	r3, r3, #2
 800f344:	3202      	addeq	r2, #2
 800f346:	07d9      	lsls	r1, r3, #31
 800f348:	d403      	bmi.n	800f352 <__lo0bits+0x4e>
 800f34a:	085b      	lsrs	r3, r3, #1
 800f34c:	f102 0201 	add.w	r2, r2, #1
 800f350:	d003      	beq.n	800f35a <__lo0bits+0x56>
 800f352:	6003      	str	r3, [r0, #0]
 800f354:	e7e5      	b.n	800f322 <__lo0bits+0x1e>
 800f356:	2200      	movs	r2, #0
 800f358:	e7e3      	b.n	800f322 <__lo0bits+0x1e>
 800f35a:	2220      	movs	r2, #32
 800f35c:	e7e1      	b.n	800f322 <__lo0bits+0x1e>
	...

0800f360 <__i2b>:
 800f360:	b510      	push	{r4, lr}
 800f362:	460c      	mov	r4, r1
 800f364:	2101      	movs	r1, #1
 800f366:	f7ff ff05 	bl	800f174 <_Balloc>
 800f36a:	4602      	mov	r2, r0
 800f36c:	b928      	cbnz	r0, 800f37a <__i2b+0x1a>
 800f36e:	4b05      	ldr	r3, [pc, #20]	; (800f384 <__i2b+0x24>)
 800f370:	4805      	ldr	r0, [pc, #20]	; (800f388 <__i2b+0x28>)
 800f372:	f240 1145 	movw	r1, #325	; 0x145
 800f376:	f000 fe71 	bl	801005c <__assert_func>
 800f37a:	2301      	movs	r3, #1
 800f37c:	6144      	str	r4, [r0, #20]
 800f37e:	6103      	str	r3, [r0, #16]
 800f380:	bd10      	pop	{r4, pc}
 800f382:	bf00      	nop
 800f384:	0801071c 	.word	0x0801071c
 800f388:	0801072d 	.word	0x0801072d

0800f38c <__multiply>:
 800f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f390:	4691      	mov	r9, r2
 800f392:	690a      	ldr	r2, [r1, #16]
 800f394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f398:	429a      	cmp	r2, r3
 800f39a:	bfb8      	it	lt
 800f39c:	460b      	movlt	r3, r1
 800f39e:	460c      	mov	r4, r1
 800f3a0:	bfbc      	itt	lt
 800f3a2:	464c      	movlt	r4, r9
 800f3a4:	4699      	movlt	r9, r3
 800f3a6:	6927      	ldr	r7, [r4, #16]
 800f3a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f3ac:	68a3      	ldr	r3, [r4, #8]
 800f3ae:	6861      	ldr	r1, [r4, #4]
 800f3b0:	eb07 060a 	add.w	r6, r7, sl
 800f3b4:	42b3      	cmp	r3, r6
 800f3b6:	b085      	sub	sp, #20
 800f3b8:	bfb8      	it	lt
 800f3ba:	3101      	addlt	r1, #1
 800f3bc:	f7ff feda 	bl	800f174 <_Balloc>
 800f3c0:	b930      	cbnz	r0, 800f3d0 <__multiply+0x44>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	4b44      	ldr	r3, [pc, #272]	; (800f4d8 <__multiply+0x14c>)
 800f3c6:	4845      	ldr	r0, [pc, #276]	; (800f4dc <__multiply+0x150>)
 800f3c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f3cc:	f000 fe46 	bl	801005c <__assert_func>
 800f3d0:	f100 0514 	add.w	r5, r0, #20
 800f3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f3d8:	462b      	mov	r3, r5
 800f3da:	2200      	movs	r2, #0
 800f3dc:	4543      	cmp	r3, r8
 800f3de:	d321      	bcc.n	800f424 <__multiply+0x98>
 800f3e0:	f104 0314 	add.w	r3, r4, #20
 800f3e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f3e8:	f109 0314 	add.w	r3, r9, #20
 800f3ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f3f0:	9202      	str	r2, [sp, #8]
 800f3f2:	1b3a      	subs	r2, r7, r4
 800f3f4:	3a15      	subs	r2, #21
 800f3f6:	f022 0203 	bic.w	r2, r2, #3
 800f3fa:	3204      	adds	r2, #4
 800f3fc:	f104 0115 	add.w	r1, r4, #21
 800f400:	428f      	cmp	r7, r1
 800f402:	bf38      	it	cc
 800f404:	2204      	movcc	r2, #4
 800f406:	9201      	str	r2, [sp, #4]
 800f408:	9a02      	ldr	r2, [sp, #8]
 800f40a:	9303      	str	r3, [sp, #12]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d80c      	bhi.n	800f42a <__multiply+0x9e>
 800f410:	2e00      	cmp	r6, #0
 800f412:	dd03      	ble.n	800f41c <__multiply+0x90>
 800f414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d05b      	beq.n	800f4d4 <__multiply+0x148>
 800f41c:	6106      	str	r6, [r0, #16]
 800f41e:	b005      	add	sp, #20
 800f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f424:	f843 2b04 	str.w	r2, [r3], #4
 800f428:	e7d8      	b.n	800f3dc <__multiply+0x50>
 800f42a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f42e:	f1ba 0f00 	cmp.w	sl, #0
 800f432:	d024      	beq.n	800f47e <__multiply+0xf2>
 800f434:	f104 0e14 	add.w	lr, r4, #20
 800f438:	46a9      	mov	r9, r5
 800f43a:	f04f 0c00 	mov.w	ip, #0
 800f43e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f442:	f8d9 1000 	ldr.w	r1, [r9]
 800f446:	fa1f fb82 	uxth.w	fp, r2
 800f44a:	b289      	uxth	r1, r1
 800f44c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f450:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f454:	f8d9 2000 	ldr.w	r2, [r9]
 800f458:	4461      	add	r1, ip
 800f45a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f45e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f466:	b289      	uxth	r1, r1
 800f468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f46c:	4577      	cmp	r7, lr
 800f46e:	f849 1b04 	str.w	r1, [r9], #4
 800f472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f476:	d8e2      	bhi.n	800f43e <__multiply+0xb2>
 800f478:	9a01      	ldr	r2, [sp, #4]
 800f47a:	f845 c002 	str.w	ip, [r5, r2]
 800f47e:	9a03      	ldr	r2, [sp, #12]
 800f480:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f484:	3304      	adds	r3, #4
 800f486:	f1b9 0f00 	cmp.w	r9, #0
 800f48a:	d021      	beq.n	800f4d0 <__multiply+0x144>
 800f48c:	6829      	ldr	r1, [r5, #0]
 800f48e:	f104 0c14 	add.w	ip, r4, #20
 800f492:	46ae      	mov	lr, r5
 800f494:	f04f 0a00 	mov.w	sl, #0
 800f498:	f8bc b000 	ldrh.w	fp, [ip]
 800f49c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f4a0:	fb09 220b 	mla	r2, r9, fp, r2
 800f4a4:	4452      	add	r2, sl
 800f4a6:	b289      	uxth	r1, r1
 800f4a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4ac:	f84e 1b04 	str.w	r1, [lr], #4
 800f4b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f4b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f4b8:	f8be 1000 	ldrh.w	r1, [lr]
 800f4bc:	fb09 110a 	mla	r1, r9, sl, r1
 800f4c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f4c4:	4567      	cmp	r7, ip
 800f4c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f4ca:	d8e5      	bhi.n	800f498 <__multiply+0x10c>
 800f4cc:	9a01      	ldr	r2, [sp, #4]
 800f4ce:	50a9      	str	r1, [r5, r2]
 800f4d0:	3504      	adds	r5, #4
 800f4d2:	e799      	b.n	800f408 <__multiply+0x7c>
 800f4d4:	3e01      	subs	r6, #1
 800f4d6:	e79b      	b.n	800f410 <__multiply+0x84>
 800f4d8:	0801071c 	.word	0x0801071c
 800f4dc:	0801072d 	.word	0x0801072d

0800f4e0 <__pow5mult>:
 800f4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e4:	4615      	mov	r5, r2
 800f4e6:	f012 0203 	ands.w	r2, r2, #3
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	460f      	mov	r7, r1
 800f4ee:	d007      	beq.n	800f500 <__pow5mult+0x20>
 800f4f0:	4c25      	ldr	r4, [pc, #148]	; (800f588 <__pow5mult+0xa8>)
 800f4f2:	3a01      	subs	r2, #1
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4fa:	f7ff fe9d 	bl	800f238 <__multadd>
 800f4fe:	4607      	mov	r7, r0
 800f500:	10ad      	asrs	r5, r5, #2
 800f502:	d03d      	beq.n	800f580 <__pow5mult+0xa0>
 800f504:	69f4      	ldr	r4, [r6, #28]
 800f506:	b97c      	cbnz	r4, 800f528 <__pow5mult+0x48>
 800f508:	2010      	movs	r0, #16
 800f50a:	f7ff fd7f 	bl	800f00c <malloc>
 800f50e:	4602      	mov	r2, r0
 800f510:	61f0      	str	r0, [r6, #28]
 800f512:	b928      	cbnz	r0, 800f520 <__pow5mult+0x40>
 800f514:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <__pow5mult+0xac>)
 800f516:	481e      	ldr	r0, [pc, #120]	; (800f590 <__pow5mult+0xb0>)
 800f518:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f51c:	f000 fd9e 	bl	801005c <__assert_func>
 800f520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f524:	6004      	str	r4, [r0, #0]
 800f526:	60c4      	str	r4, [r0, #12]
 800f528:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f530:	b94c      	cbnz	r4, 800f546 <__pow5mult+0x66>
 800f532:	f240 2171 	movw	r1, #625	; 0x271
 800f536:	4630      	mov	r0, r6
 800f538:	f7ff ff12 	bl	800f360 <__i2b>
 800f53c:	2300      	movs	r3, #0
 800f53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f542:	4604      	mov	r4, r0
 800f544:	6003      	str	r3, [r0, #0]
 800f546:	f04f 0900 	mov.w	r9, #0
 800f54a:	07eb      	lsls	r3, r5, #31
 800f54c:	d50a      	bpl.n	800f564 <__pow5mult+0x84>
 800f54e:	4639      	mov	r1, r7
 800f550:	4622      	mov	r2, r4
 800f552:	4630      	mov	r0, r6
 800f554:	f7ff ff1a 	bl	800f38c <__multiply>
 800f558:	4639      	mov	r1, r7
 800f55a:	4680      	mov	r8, r0
 800f55c:	4630      	mov	r0, r6
 800f55e:	f7ff fe49 	bl	800f1f4 <_Bfree>
 800f562:	4647      	mov	r7, r8
 800f564:	106d      	asrs	r5, r5, #1
 800f566:	d00b      	beq.n	800f580 <__pow5mult+0xa0>
 800f568:	6820      	ldr	r0, [r4, #0]
 800f56a:	b938      	cbnz	r0, 800f57c <__pow5mult+0x9c>
 800f56c:	4622      	mov	r2, r4
 800f56e:	4621      	mov	r1, r4
 800f570:	4630      	mov	r0, r6
 800f572:	f7ff ff0b 	bl	800f38c <__multiply>
 800f576:	6020      	str	r0, [r4, #0]
 800f578:	f8c0 9000 	str.w	r9, [r0]
 800f57c:	4604      	mov	r4, r0
 800f57e:	e7e4      	b.n	800f54a <__pow5mult+0x6a>
 800f580:	4638      	mov	r0, r7
 800f582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f586:	bf00      	nop
 800f588:	08010878 	.word	0x08010878
 800f58c:	080106ad 	.word	0x080106ad
 800f590:	0801072d 	.word	0x0801072d

0800f594 <__lshift>:
 800f594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	460c      	mov	r4, r1
 800f59a:	6849      	ldr	r1, [r1, #4]
 800f59c:	6923      	ldr	r3, [r4, #16]
 800f59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5a2:	68a3      	ldr	r3, [r4, #8]
 800f5a4:	4607      	mov	r7, r0
 800f5a6:	4691      	mov	r9, r2
 800f5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5ac:	f108 0601 	add.w	r6, r8, #1
 800f5b0:	42b3      	cmp	r3, r6
 800f5b2:	db0b      	blt.n	800f5cc <__lshift+0x38>
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	f7ff fddd 	bl	800f174 <_Balloc>
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	b948      	cbnz	r0, 800f5d2 <__lshift+0x3e>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	4b28      	ldr	r3, [pc, #160]	; (800f664 <__lshift+0xd0>)
 800f5c2:	4829      	ldr	r0, [pc, #164]	; (800f668 <__lshift+0xd4>)
 800f5c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f5c8:	f000 fd48 	bl	801005c <__assert_func>
 800f5cc:	3101      	adds	r1, #1
 800f5ce:	005b      	lsls	r3, r3, #1
 800f5d0:	e7ee      	b.n	800f5b0 <__lshift+0x1c>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	f100 0114 	add.w	r1, r0, #20
 800f5d8:	f100 0210 	add.w	r2, r0, #16
 800f5dc:	4618      	mov	r0, r3
 800f5de:	4553      	cmp	r3, sl
 800f5e0:	db33      	blt.n	800f64a <__lshift+0xb6>
 800f5e2:	6920      	ldr	r0, [r4, #16]
 800f5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5e8:	f104 0314 	add.w	r3, r4, #20
 800f5ec:	f019 091f 	ands.w	r9, r9, #31
 800f5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f5f8:	d02b      	beq.n	800f652 <__lshift+0xbe>
 800f5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f5fe:	468a      	mov	sl, r1
 800f600:	2200      	movs	r2, #0
 800f602:	6818      	ldr	r0, [r3, #0]
 800f604:	fa00 f009 	lsl.w	r0, r0, r9
 800f608:	4310      	orrs	r0, r2
 800f60a:	f84a 0b04 	str.w	r0, [sl], #4
 800f60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f612:	459c      	cmp	ip, r3
 800f614:	fa22 f20e 	lsr.w	r2, r2, lr
 800f618:	d8f3      	bhi.n	800f602 <__lshift+0x6e>
 800f61a:	ebac 0304 	sub.w	r3, ip, r4
 800f61e:	3b15      	subs	r3, #21
 800f620:	f023 0303 	bic.w	r3, r3, #3
 800f624:	3304      	adds	r3, #4
 800f626:	f104 0015 	add.w	r0, r4, #21
 800f62a:	4584      	cmp	ip, r0
 800f62c:	bf38      	it	cc
 800f62e:	2304      	movcc	r3, #4
 800f630:	50ca      	str	r2, [r1, r3]
 800f632:	b10a      	cbz	r2, 800f638 <__lshift+0xa4>
 800f634:	f108 0602 	add.w	r6, r8, #2
 800f638:	3e01      	subs	r6, #1
 800f63a:	4638      	mov	r0, r7
 800f63c:	612e      	str	r6, [r5, #16]
 800f63e:	4621      	mov	r1, r4
 800f640:	f7ff fdd8 	bl	800f1f4 <_Bfree>
 800f644:	4628      	mov	r0, r5
 800f646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f64e:	3301      	adds	r3, #1
 800f650:	e7c5      	b.n	800f5de <__lshift+0x4a>
 800f652:	3904      	subs	r1, #4
 800f654:	f853 2b04 	ldr.w	r2, [r3], #4
 800f658:	f841 2f04 	str.w	r2, [r1, #4]!
 800f65c:	459c      	cmp	ip, r3
 800f65e:	d8f9      	bhi.n	800f654 <__lshift+0xc0>
 800f660:	e7ea      	b.n	800f638 <__lshift+0xa4>
 800f662:	bf00      	nop
 800f664:	0801071c 	.word	0x0801071c
 800f668:	0801072d 	.word	0x0801072d

0800f66c <__mcmp>:
 800f66c:	b530      	push	{r4, r5, lr}
 800f66e:	6902      	ldr	r2, [r0, #16]
 800f670:	690c      	ldr	r4, [r1, #16]
 800f672:	1b12      	subs	r2, r2, r4
 800f674:	d10e      	bne.n	800f694 <__mcmp+0x28>
 800f676:	f100 0314 	add.w	r3, r0, #20
 800f67a:	3114      	adds	r1, #20
 800f67c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f68c:	42a5      	cmp	r5, r4
 800f68e:	d003      	beq.n	800f698 <__mcmp+0x2c>
 800f690:	d305      	bcc.n	800f69e <__mcmp+0x32>
 800f692:	2201      	movs	r2, #1
 800f694:	4610      	mov	r0, r2
 800f696:	bd30      	pop	{r4, r5, pc}
 800f698:	4283      	cmp	r3, r0
 800f69a:	d3f3      	bcc.n	800f684 <__mcmp+0x18>
 800f69c:	e7fa      	b.n	800f694 <__mcmp+0x28>
 800f69e:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a2:	e7f7      	b.n	800f694 <__mcmp+0x28>

0800f6a4 <__mdiff>:
 800f6a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4690      	mov	r8, r2
 800f6b2:	f7ff ffdb 	bl	800f66c <__mcmp>
 800f6b6:	1e05      	subs	r5, r0, #0
 800f6b8:	d110      	bne.n	800f6dc <__mdiff+0x38>
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f7ff fd59 	bl	800f174 <_Balloc>
 800f6c2:	b930      	cbnz	r0, 800f6d2 <__mdiff+0x2e>
 800f6c4:	4b3a      	ldr	r3, [pc, #232]	; (800f7b0 <__mdiff+0x10c>)
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	f240 2137 	movw	r1, #567	; 0x237
 800f6cc:	4839      	ldr	r0, [pc, #228]	; (800f7b4 <__mdiff+0x110>)
 800f6ce:	f000 fcc5 	bl	801005c <__assert_func>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f6d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6dc:	bfa4      	itt	ge
 800f6de:	4643      	movge	r3, r8
 800f6e0:	46a0      	movge	r8, r4
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f6e8:	bfa6      	itte	ge
 800f6ea:	461c      	movge	r4, r3
 800f6ec:	2500      	movge	r5, #0
 800f6ee:	2501      	movlt	r5, #1
 800f6f0:	f7ff fd40 	bl	800f174 <_Balloc>
 800f6f4:	b920      	cbnz	r0, 800f700 <__mdiff+0x5c>
 800f6f6:	4b2e      	ldr	r3, [pc, #184]	; (800f7b0 <__mdiff+0x10c>)
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	f240 2145 	movw	r1, #581	; 0x245
 800f6fe:	e7e5      	b.n	800f6cc <__mdiff+0x28>
 800f700:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f704:	6926      	ldr	r6, [r4, #16]
 800f706:	60c5      	str	r5, [r0, #12]
 800f708:	f104 0914 	add.w	r9, r4, #20
 800f70c:	f108 0514 	add.w	r5, r8, #20
 800f710:	f100 0e14 	add.w	lr, r0, #20
 800f714:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f71c:	f108 0210 	add.w	r2, r8, #16
 800f720:	46f2      	mov	sl, lr
 800f722:	2100      	movs	r1, #0
 800f724:	f859 3b04 	ldr.w	r3, [r9], #4
 800f728:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f72c:	fa11 f88b 	uxtah	r8, r1, fp
 800f730:	b299      	uxth	r1, r3
 800f732:	0c1b      	lsrs	r3, r3, #16
 800f734:	eba8 0801 	sub.w	r8, r8, r1
 800f738:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f73c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f740:	fa1f f888 	uxth.w	r8, r8
 800f744:	1419      	asrs	r1, r3, #16
 800f746:	454e      	cmp	r6, r9
 800f748:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f74c:	f84a 3b04 	str.w	r3, [sl], #4
 800f750:	d8e8      	bhi.n	800f724 <__mdiff+0x80>
 800f752:	1b33      	subs	r3, r6, r4
 800f754:	3b15      	subs	r3, #21
 800f756:	f023 0303 	bic.w	r3, r3, #3
 800f75a:	3304      	adds	r3, #4
 800f75c:	3415      	adds	r4, #21
 800f75e:	42a6      	cmp	r6, r4
 800f760:	bf38      	it	cc
 800f762:	2304      	movcc	r3, #4
 800f764:	441d      	add	r5, r3
 800f766:	4473      	add	r3, lr
 800f768:	469e      	mov	lr, r3
 800f76a:	462e      	mov	r6, r5
 800f76c:	4566      	cmp	r6, ip
 800f76e:	d30e      	bcc.n	800f78e <__mdiff+0xea>
 800f770:	f10c 0203 	add.w	r2, ip, #3
 800f774:	1b52      	subs	r2, r2, r5
 800f776:	f022 0203 	bic.w	r2, r2, #3
 800f77a:	3d03      	subs	r5, #3
 800f77c:	45ac      	cmp	ip, r5
 800f77e:	bf38      	it	cc
 800f780:	2200      	movcc	r2, #0
 800f782:	4413      	add	r3, r2
 800f784:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f788:	b17a      	cbz	r2, 800f7aa <__mdiff+0x106>
 800f78a:	6107      	str	r7, [r0, #16]
 800f78c:	e7a4      	b.n	800f6d8 <__mdiff+0x34>
 800f78e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f792:	fa11 f288 	uxtah	r2, r1, r8
 800f796:	1414      	asrs	r4, r2, #16
 800f798:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f79c:	b292      	uxth	r2, r2
 800f79e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f7a2:	f84e 2b04 	str.w	r2, [lr], #4
 800f7a6:	1421      	asrs	r1, r4, #16
 800f7a8:	e7e0      	b.n	800f76c <__mdiff+0xc8>
 800f7aa:	3f01      	subs	r7, #1
 800f7ac:	e7ea      	b.n	800f784 <__mdiff+0xe0>
 800f7ae:	bf00      	nop
 800f7b0:	0801071c 	.word	0x0801071c
 800f7b4:	0801072d 	.word	0x0801072d

0800f7b8 <__d2b>:
 800f7b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7bc:	460f      	mov	r7, r1
 800f7be:	2101      	movs	r1, #1
 800f7c0:	ec59 8b10 	vmov	r8, r9, d0
 800f7c4:	4616      	mov	r6, r2
 800f7c6:	f7ff fcd5 	bl	800f174 <_Balloc>
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	b930      	cbnz	r0, 800f7dc <__d2b+0x24>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	4b24      	ldr	r3, [pc, #144]	; (800f864 <__d2b+0xac>)
 800f7d2:	4825      	ldr	r0, [pc, #148]	; (800f868 <__d2b+0xb0>)
 800f7d4:	f240 310f 	movw	r1, #783	; 0x30f
 800f7d8:	f000 fc40 	bl	801005c <__assert_func>
 800f7dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7e4:	bb2d      	cbnz	r5, 800f832 <__d2b+0x7a>
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	f1b8 0300 	subs.w	r3, r8, #0
 800f7ec:	d026      	beq.n	800f83c <__d2b+0x84>
 800f7ee:	4668      	mov	r0, sp
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	f7ff fd87 	bl	800f304 <__lo0bits>
 800f7f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f7fa:	b1e8      	cbz	r0, 800f838 <__d2b+0x80>
 800f7fc:	f1c0 0320 	rsb	r3, r0, #32
 800f800:	fa02 f303 	lsl.w	r3, r2, r3
 800f804:	430b      	orrs	r3, r1
 800f806:	40c2      	lsrs	r2, r0
 800f808:	6163      	str	r3, [r4, #20]
 800f80a:	9201      	str	r2, [sp, #4]
 800f80c:	9b01      	ldr	r3, [sp, #4]
 800f80e:	61a3      	str	r3, [r4, #24]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bf14      	ite	ne
 800f814:	2202      	movne	r2, #2
 800f816:	2201      	moveq	r2, #1
 800f818:	6122      	str	r2, [r4, #16]
 800f81a:	b1bd      	cbz	r5, 800f84c <__d2b+0x94>
 800f81c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f820:	4405      	add	r5, r0
 800f822:	603d      	str	r5, [r7, #0]
 800f824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f828:	6030      	str	r0, [r6, #0]
 800f82a:	4620      	mov	r0, r4
 800f82c:	b003      	add	sp, #12
 800f82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f836:	e7d6      	b.n	800f7e6 <__d2b+0x2e>
 800f838:	6161      	str	r1, [r4, #20]
 800f83a:	e7e7      	b.n	800f80c <__d2b+0x54>
 800f83c:	a801      	add	r0, sp, #4
 800f83e:	f7ff fd61 	bl	800f304 <__lo0bits>
 800f842:	9b01      	ldr	r3, [sp, #4]
 800f844:	6163      	str	r3, [r4, #20]
 800f846:	3020      	adds	r0, #32
 800f848:	2201      	movs	r2, #1
 800f84a:	e7e5      	b.n	800f818 <__d2b+0x60>
 800f84c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f854:	6038      	str	r0, [r7, #0]
 800f856:	6918      	ldr	r0, [r3, #16]
 800f858:	f7ff fd34 	bl	800f2c4 <__hi0bits>
 800f85c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f860:	e7e2      	b.n	800f828 <__d2b+0x70>
 800f862:	bf00      	nop
 800f864:	0801071c 	.word	0x0801071c
 800f868:	0801072d 	.word	0x0801072d

0800f86c <__ssputs_r>:
 800f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	688e      	ldr	r6, [r1, #8]
 800f872:	461f      	mov	r7, r3
 800f874:	42be      	cmp	r6, r7
 800f876:	680b      	ldr	r3, [r1, #0]
 800f878:	4682      	mov	sl, r0
 800f87a:	460c      	mov	r4, r1
 800f87c:	4690      	mov	r8, r2
 800f87e:	d82c      	bhi.n	800f8da <__ssputs_r+0x6e>
 800f880:	898a      	ldrh	r2, [r1, #12]
 800f882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f886:	d026      	beq.n	800f8d6 <__ssputs_r+0x6a>
 800f888:	6965      	ldr	r5, [r4, #20]
 800f88a:	6909      	ldr	r1, [r1, #16]
 800f88c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f890:	eba3 0901 	sub.w	r9, r3, r1
 800f894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f898:	1c7b      	adds	r3, r7, #1
 800f89a:	444b      	add	r3, r9
 800f89c:	106d      	asrs	r5, r5, #1
 800f89e:	429d      	cmp	r5, r3
 800f8a0:	bf38      	it	cc
 800f8a2:	461d      	movcc	r5, r3
 800f8a4:	0553      	lsls	r3, r2, #21
 800f8a6:	d527      	bpl.n	800f8f8 <__ssputs_r+0x8c>
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	f7ff fbd7 	bl	800f05c <_malloc_r>
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	b360      	cbz	r0, 800f90c <__ssputs_r+0xa0>
 800f8b2:	6921      	ldr	r1, [r4, #16]
 800f8b4:	464a      	mov	r2, r9
 800f8b6:	f7fe fcd5 	bl	800e264 <memcpy>
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8c4:	81a3      	strh	r3, [r4, #12]
 800f8c6:	6126      	str	r6, [r4, #16]
 800f8c8:	6165      	str	r5, [r4, #20]
 800f8ca:	444e      	add	r6, r9
 800f8cc:	eba5 0509 	sub.w	r5, r5, r9
 800f8d0:	6026      	str	r6, [r4, #0]
 800f8d2:	60a5      	str	r5, [r4, #8]
 800f8d4:	463e      	mov	r6, r7
 800f8d6:	42be      	cmp	r6, r7
 800f8d8:	d900      	bls.n	800f8dc <__ssputs_r+0x70>
 800f8da:	463e      	mov	r6, r7
 800f8dc:	6820      	ldr	r0, [r4, #0]
 800f8de:	4632      	mov	r2, r6
 800f8e0:	4641      	mov	r1, r8
 800f8e2:	f000 fb6f 	bl	800ffc4 <memmove>
 800f8e6:	68a3      	ldr	r3, [r4, #8]
 800f8e8:	1b9b      	subs	r3, r3, r6
 800f8ea:	60a3      	str	r3, [r4, #8]
 800f8ec:	6823      	ldr	r3, [r4, #0]
 800f8ee:	4433      	add	r3, r6
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f8:	462a      	mov	r2, r5
 800f8fa:	f000 fbf5 	bl	80100e8 <_realloc_r>
 800f8fe:	4606      	mov	r6, r0
 800f900:	2800      	cmp	r0, #0
 800f902:	d1e0      	bne.n	800f8c6 <__ssputs_r+0x5a>
 800f904:	6921      	ldr	r1, [r4, #16]
 800f906:	4650      	mov	r0, sl
 800f908:	f7ff fb34 	bl	800ef74 <_free_r>
 800f90c:	230c      	movs	r3, #12
 800f90e:	f8ca 3000 	str.w	r3, [sl]
 800f912:	89a3      	ldrh	r3, [r4, #12]
 800f914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f918:	81a3      	strh	r3, [r4, #12]
 800f91a:	f04f 30ff 	mov.w	r0, #4294967295
 800f91e:	e7e9      	b.n	800f8f4 <__ssputs_r+0x88>

0800f920 <_svfiprintf_r>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	4698      	mov	r8, r3
 800f926:	898b      	ldrh	r3, [r1, #12]
 800f928:	061b      	lsls	r3, r3, #24
 800f92a:	b09d      	sub	sp, #116	; 0x74
 800f92c:	4607      	mov	r7, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	4614      	mov	r4, r2
 800f932:	d50e      	bpl.n	800f952 <_svfiprintf_r+0x32>
 800f934:	690b      	ldr	r3, [r1, #16]
 800f936:	b963      	cbnz	r3, 800f952 <_svfiprintf_r+0x32>
 800f938:	2140      	movs	r1, #64	; 0x40
 800f93a:	f7ff fb8f 	bl	800f05c <_malloc_r>
 800f93e:	6028      	str	r0, [r5, #0]
 800f940:	6128      	str	r0, [r5, #16]
 800f942:	b920      	cbnz	r0, 800f94e <_svfiprintf_r+0x2e>
 800f944:	230c      	movs	r3, #12
 800f946:	603b      	str	r3, [r7, #0]
 800f948:	f04f 30ff 	mov.w	r0, #4294967295
 800f94c:	e0d0      	b.n	800faf0 <_svfiprintf_r+0x1d0>
 800f94e:	2340      	movs	r3, #64	; 0x40
 800f950:	616b      	str	r3, [r5, #20]
 800f952:	2300      	movs	r3, #0
 800f954:	9309      	str	r3, [sp, #36]	; 0x24
 800f956:	2320      	movs	r3, #32
 800f958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f960:	2330      	movs	r3, #48	; 0x30
 800f962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb08 <_svfiprintf_r+0x1e8>
 800f966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f96a:	f04f 0901 	mov.w	r9, #1
 800f96e:	4623      	mov	r3, r4
 800f970:	469a      	mov	sl, r3
 800f972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f976:	b10a      	cbz	r2, 800f97c <_svfiprintf_r+0x5c>
 800f978:	2a25      	cmp	r2, #37	; 0x25
 800f97a:	d1f9      	bne.n	800f970 <_svfiprintf_r+0x50>
 800f97c:	ebba 0b04 	subs.w	fp, sl, r4
 800f980:	d00b      	beq.n	800f99a <_svfiprintf_r+0x7a>
 800f982:	465b      	mov	r3, fp
 800f984:	4622      	mov	r2, r4
 800f986:	4629      	mov	r1, r5
 800f988:	4638      	mov	r0, r7
 800f98a:	f7ff ff6f 	bl	800f86c <__ssputs_r>
 800f98e:	3001      	adds	r0, #1
 800f990:	f000 80a9 	beq.w	800fae6 <_svfiprintf_r+0x1c6>
 800f994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f996:	445a      	add	r2, fp
 800f998:	9209      	str	r2, [sp, #36]	; 0x24
 800f99a:	f89a 3000 	ldrb.w	r3, [sl]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 80a1 	beq.w	800fae6 <_svfiprintf_r+0x1c6>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ae:	f10a 0a01 	add.w	sl, sl, #1
 800f9b2:	9304      	str	r3, [sp, #16]
 800f9b4:	9307      	str	r3, [sp, #28]
 800f9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9ba:	931a      	str	r3, [sp, #104]	; 0x68
 800f9bc:	4654      	mov	r4, sl
 800f9be:	2205      	movs	r2, #5
 800f9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c4:	4850      	ldr	r0, [pc, #320]	; (800fb08 <_svfiprintf_r+0x1e8>)
 800f9c6:	f7f0 fc03 	bl	80001d0 <memchr>
 800f9ca:	9a04      	ldr	r2, [sp, #16]
 800f9cc:	b9d8      	cbnz	r0, 800fa06 <_svfiprintf_r+0xe6>
 800f9ce:	06d0      	lsls	r0, r2, #27
 800f9d0:	bf44      	itt	mi
 800f9d2:	2320      	movmi	r3, #32
 800f9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9d8:	0711      	lsls	r1, r2, #28
 800f9da:	bf44      	itt	mi
 800f9dc:	232b      	movmi	r3, #43	; 0x2b
 800f9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e8:	d015      	beq.n	800fa16 <_svfiprintf_r+0xf6>
 800f9ea:	9a07      	ldr	r2, [sp, #28]
 800f9ec:	4654      	mov	r4, sl
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fa:	3b30      	subs	r3, #48	; 0x30
 800f9fc:	2b09      	cmp	r3, #9
 800f9fe:	d94d      	bls.n	800fa9c <_svfiprintf_r+0x17c>
 800fa00:	b1b0      	cbz	r0, 800fa30 <_svfiprintf_r+0x110>
 800fa02:	9207      	str	r2, [sp, #28]
 800fa04:	e014      	b.n	800fa30 <_svfiprintf_r+0x110>
 800fa06:	eba0 0308 	sub.w	r3, r0, r8
 800fa0a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	9304      	str	r3, [sp, #16]
 800fa12:	46a2      	mov	sl, r4
 800fa14:	e7d2      	b.n	800f9bc <_svfiprintf_r+0x9c>
 800fa16:	9b03      	ldr	r3, [sp, #12]
 800fa18:	1d19      	adds	r1, r3, #4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	9103      	str	r1, [sp, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbb      	ittet	lt
 800fa22:	425b      	neglt	r3, r3
 800fa24:	f042 0202 	orrlt.w	r2, r2, #2
 800fa28:	9307      	strge	r3, [sp, #28]
 800fa2a:	9307      	strlt	r3, [sp, #28]
 800fa2c:	bfb8      	it	lt
 800fa2e:	9204      	strlt	r2, [sp, #16]
 800fa30:	7823      	ldrb	r3, [r4, #0]
 800fa32:	2b2e      	cmp	r3, #46	; 0x2e
 800fa34:	d10c      	bne.n	800fa50 <_svfiprintf_r+0x130>
 800fa36:	7863      	ldrb	r3, [r4, #1]
 800fa38:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3a:	d134      	bne.n	800faa6 <_svfiprintf_r+0x186>
 800fa3c:	9b03      	ldr	r3, [sp, #12]
 800fa3e:	1d1a      	adds	r2, r3, #4
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	9203      	str	r2, [sp, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bfb8      	it	lt
 800fa48:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa4c:	3402      	adds	r4, #2
 800fa4e:	9305      	str	r3, [sp, #20]
 800fa50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fb18 <_svfiprintf_r+0x1f8>
 800fa54:	7821      	ldrb	r1, [r4, #0]
 800fa56:	2203      	movs	r2, #3
 800fa58:	4650      	mov	r0, sl
 800fa5a:	f7f0 fbb9 	bl	80001d0 <memchr>
 800fa5e:	b138      	cbz	r0, 800fa70 <_svfiprintf_r+0x150>
 800fa60:	9b04      	ldr	r3, [sp, #16]
 800fa62:	eba0 000a 	sub.w	r0, r0, sl
 800fa66:	2240      	movs	r2, #64	; 0x40
 800fa68:	4082      	lsls	r2, r0
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	3401      	adds	r4, #1
 800fa6e:	9304      	str	r3, [sp, #16]
 800fa70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa74:	4825      	ldr	r0, [pc, #148]	; (800fb0c <_svfiprintf_r+0x1ec>)
 800fa76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa7a:	2206      	movs	r2, #6
 800fa7c:	f7f0 fba8 	bl	80001d0 <memchr>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d038      	beq.n	800faf6 <_svfiprintf_r+0x1d6>
 800fa84:	4b22      	ldr	r3, [pc, #136]	; (800fb10 <_svfiprintf_r+0x1f0>)
 800fa86:	bb1b      	cbnz	r3, 800fad0 <_svfiprintf_r+0x1b0>
 800fa88:	9b03      	ldr	r3, [sp, #12]
 800fa8a:	3307      	adds	r3, #7
 800fa8c:	f023 0307 	bic.w	r3, r3, #7
 800fa90:	3308      	adds	r3, #8
 800fa92:	9303      	str	r3, [sp, #12]
 800fa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa96:	4433      	add	r3, r6
 800fa98:	9309      	str	r3, [sp, #36]	; 0x24
 800fa9a:	e768      	b.n	800f96e <_svfiprintf_r+0x4e>
 800fa9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa0:	460c      	mov	r4, r1
 800faa2:	2001      	movs	r0, #1
 800faa4:	e7a6      	b.n	800f9f4 <_svfiprintf_r+0xd4>
 800faa6:	2300      	movs	r3, #0
 800faa8:	3401      	adds	r4, #1
 800faaa:	9305      	str	r3, [sp, #20]
 800faac:	4619      	mov	r1, r3
 800faae:	f04f 0c0a 	mov.w	ip, #10
 800fab2:	4620      	mov	r0, r4
 800fab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fab8:	3a30      	subs	r2, #48	; 0x30
 800faba:	2a09      	cmp	r2, #9
 800fabc:	d903      	bls.n	800fac6 <_svfiprintf_r+0x1a6>
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d0c6      	beq.n	800fa50 <_svfiprintf_r+0x130>
 800fac2:	9105      	str	r1, [sp, #20]
 800fac4:	e7c4      	b.n	800fa50 <_svfiprintf_r+0x130>
 800fac6:	fb0c 2101 	mla	r1, ip, r1, r2
 800faca:	4604      	mov	r4, r0
 800facc:	2301      	movs	r3, #1
 800face:	e7f0      	b.n	800fab2 <_svfiprintf_r+0x192>
 800fad0:	ab03      	add	r3, sp, #12
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	462a      	mov	r2, r5
 800fad6:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <_svfiprintf_r+0x1f4>)
 800fad8:	a904      	add	r1, sp, #16
 800fada:	4638      	mov	r0, r7
 800fadc:	f7fd fd68 	bl	800d5b0 <_printf_float>
 800fae0:	1c42      	adds	r2, r0, #1
 800fae2:	4606      	mov	r6, r0
 800fae4:	d1d6      	bne.n	800fa94 <_svfiprintf_r+0x174>
 800fae6:	89ab      	ldrh	r3, [r5, #12]
 800fae8:	065b      	lsls	r3, r3, #25
 800faea:	f53f af2d 	bmi.w	800f948 <_svfiprintf_r+0x28>
 800faee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faf0:	b01d      	add	sp, #116	; 0x74
 800faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf6:	ab03      	add	r3, sp, #12
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	462a      	mov	r2, r5
 800fafc:	4b05      	ldr	r3, [pc, #20]	; (800fb14 <_svfiprintf_r+0x1f4>)
 800fafe:	a904      	add	r1, sp, #16
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7fd fff9 	bl	800daf8 <_printf_i>
 800fb06:	e7eb      	b.n	800fae0 <_svfiprintf_r+0x1c0>
 800fb08:	08010884 	.word	0x08010884
 800fb0c:	0801088e 	.word	0x0801088e
 800fb10:	0800d5b1 	.word	0x0800d5b1
 800fb14:	0800f86d 	.word	0x0800f86d
 800fb18:	0801088a 	.word	0x0801088a

0800fb1c <__sfputc_r>:
 800fb1c:	6893      	ldr	r3, [r2, #8]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	b410      	push	{r4}
 800fb24:	6093      	str	r3, [r2, #8]
 800fb26:	da08      	bge.n	800fb3a <__sfputc_r+0x1e>
 800fb28:	6994      	ldr	r4, [r2, #24]
 800fb2a:	42a3      	cmp	r3, r4
 800fb2c:	db01      	blt.n	800fb32 <__sfputc_r+0x16>
 800fb2e:	290a      	cmp	r1, #10
 800fb30:	d103      	bne.n	800fb3a <__sfputc_r+0x1e>
 800fb32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb36:	f7fe ba82 	b.w	800e03e <__swbuf_r>
 800fb3a:	6813      	ldr	r3, [r2, #0]
 800fb3c:	1c58      	adds	r0, r3, #1
 800fb3e:	6010      	str	r0, [r2, #0]
 800fb40:	7019      	strb	r1, [r3, #0]
 800fb42:	4608      	mov	r0, r1
 800fb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <__sfputs_r>:
 800fb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	460f      	mov	r7, r1
 800fb50:	4614      	mov	r4, r2
 800fb52:	18d5      	adds	r5, r2, r3
 800fb54:	42ac      	cmp	r4, r5
 800fb56:	d101      	bne.n	800fb5c <__sfputs_r+0x12>
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e007      	b.n	800fb6c <__sfputs_r+0x22>
 800fb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb60:	463a      	mov	r2, r7
 800fb62:	4630      	mov	r0, r6
 800fb64:	f7ff ffda 	bl	800fb1c <__sfputc_r>
 800fb68:	1c43      	adds	r3, r0, #1
 800fb6a:	d1f3      	bne.n	800fb54 <__sfputs_r+0xa>
 800fb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb70 <_vfiprintf_r>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	460d      	mov	r5, r1
 800fb76:	b09d      	sub	sp, #116	; 0x74
 800fb78:	4614      	mov	r4, r2
 800fb7a:	4698      	mov	r8, r3
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	b118      	cbz	r0, 800fb88 <_vfiprintf_r+0x18>
 800fb80:	6a03      	ldr	r3, [r0, #32]
 800fb82:	b90b      	cbnz	r3, 800fb88 <_vfiprintf_r+0x18>
 800fb84:	f7fe f954 	bl	800de30 <__sinit>
 800fb88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb8a:	07d9      	lsls	r1, r3, #31
 800fb8c:	d405      	bmi.n	800fb9a <_vfiprintf_r+0x2a>
 800fb8e:	89ab      	ldrh	r3, [r5, #12]
 800fb90:	059a      	lsls	r2, r3, #22
 800fb92:	d402      	bmi.n	800fb9a <_vfiprintf_r+0x2a>
 800fb94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb96:	f7fe fb63 	bl	800e260 <__retarget_lock_acquire_recursive>
 800fb9a:	89ab      	ldrh	r3, [r5, #12]
 800fb9c:	071b      	lsls	r3, r3, #28
 800fb9e:	d501      	bpl.n	800fba4 <_vfiprintf_r+0x34>
 800fba0:	692b      	ldr	r3, [r5, #16]
 800fba2:	b99b      	cbnz	r3, 800fbcc <_vfiprintf_r+0x5c>
 800fba4:	4629      	mov	r1, r5
 800fba6:	4630      	mov	r0, r6
 800fba8:	f7fe fa86 	bl	800e0b8 <__swsetup_r>
 800fbac:	b170      	cbz	r0, 800fbcc <_vfiprintf_r+0x5c>
 800fbae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbb0:	07dc      	lsls	r4, r3, #31
 800fbb2:	d504      	bpl.n	800fbbe <_vfiprintf_r+0x4e>
 800fbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb8:	b01d      	add	sp, #116	; 0x74
 800fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	89ab      	ldrh	r3, [r5, #12]
 800fbc0:	0598      	lsls	r0, r3, #22
 800fbc2:	d4f7      	bmi.n	800fbb4 <_vfiprintf_r+0x44>
 800fbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbc6:	f7fe fb4c 	bl	800e262 <__retarget_lock_release_recursive>
 800fbca:	e7f3      	b.n	800fbb4 <_vfiprintf_r+0x44>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	9309      	str	r3, [sp, #36]	; 0x24
 800fbd0:	2320      	movs	r3, #32
 800fbd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbda:	2330      	movs	r3, #48	; 0x30
 800fbdc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fd90 <_vfiprintf_r+0x220>
 800fbe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbe4:	f04f 0901 	mov.w	r9, #1
 800fbe8:	4623      	mov	r3, r4
 800fbea:	469a      	mov	sl, r3
 800fbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbf0:	b10a      	cbz	r2, 800fbf6 <_vfiprintf_r+0x86>
 800fbf2:	2a25      	cmp	r2, #37	; 0x25
 800fbf4:	d1f9      	bne.n	800fbea <_vfiprintf_r+0x7a>
 800fbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800fbfa:	d00b      	beq.n	800fc14 <_vfiprintf_r+0xa4>
 800fbfc:	465b      	mov	r3, fp
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4629      	mov	r1, r5
 800fc02:	4630      	mov	r0, r6
 800fc04:	f7ff ffa1 	bl	800fb4a <__sfputs_r>
 800fc08:	3001      	adds	r0, #1
 800fc0a:	f000 80a9 	beq.w	800fd60 <_vfiprintf_r+0x1f0>
 800fc0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc10:	445a      	add	r2, fp
 800fc12:	9209      	str	r2, [sp, #36]	; 0x24
 800fc14:	f89a 3000 	ldrb.w	r3, [sl]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f000 80a1 	beq.w	800fd60 <_vfiprintf_r+0x1f0>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f04f 32ff 	mov.w	r2, #4294967295
 800fc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc28:	f10a 0a01 	add.w	sl, sl, #1
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc34:	931a      	str	r3, [sp, #104]	; 0x68
 800fc36:	4654      	mov	r4, sl
 800fc38:	2205      	movs	r2, #5
 800fc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc3e:	4854      	ldr	r0, [pc, #336]	; (800fd90 <_vfiprintf_r+0x220>)
 800fc40:	f7f0 fac6 	bl	80001d0 <memchr>
 800fc44:	9a04      	ldr	r2, [sp, #16]
 800fc46:	b9d8      	cbnz	r0, 800fc80 <_vfiprintf_r+0x110>
 800fc48:	06d1      	lsls	r1, r2, #27
 800fc4a:	bf44      	itt	mi
 800fc4c:	2320      	movmi	r3, #32
 800fc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc52:	0713      	lsls	r3, r2, #28
 800fc54:	bf44      	itt	mi
 800fc56:	232b      	movmi	r3, #43	; 0x2b
 800fc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc60:	2b2a      	cmp	r3, #42	; 0x2a
 800fc62:	d015      	beq.n	800fc90 <_vfiprintf_r+0x120>
 800fc64:	9a07      	ldr	r2, [sp, #28]
 800fc66:	4654      	mov	r4, sl
 800fc68:	2000      	movs	r0, #0
 800fc6a:	f04f 0c0a 	mov.w	ip, #10
 800fc6e:	4621      	mov	r1, r4
 800fc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc74:	3b30      	subs	r3, #48	; 0x30
 800fc76:	2b09      	cmp	r3, #9
 800fc78:	d94d      	bls.n	800fd16 <_vfiprintf_r+0x1a6>
 800fc7a:	b1b0      	cbz	r0, 800fcaa <_vfiprintf_r+0x13a>
 800fc7c:	9207      	str	r2, [sp, #28]
 800fc7e:	e014      	b.n	800fcaa <_vfiprintf_r+0x13a>
 800fc80:	eba0 0308 	sub.w	r3, r0, r8
 800fc84:	fa09 f303 	lsl.w	r3, r9, r3
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	46a2      	mov	sl, r4
 800fc8e:	e7d2      	b.n	800fc36 <_vfiprintf_r+0xc6>
 800fc90:	9b03      	ldr	r3, [sp, #12]
 800fc92:	1d19      	adds	r1, r3, #4
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	9103      	str	r1, [sp, #12]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	bfbb      	ittet	lt
 800fc9c:	425b      	neglt	r3, r3
 800fc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800fca2:	9307      	strge	r3, [sp, #28]
 800fca4:	9307      	strlt	r3, [sp, #28]
 800fca6:	bfb8      	it	lt
 800fca8:	9204      	strlt	r2, [sp, #16]
 800fcaa:	7823      	ldrb	r3, [r4, #0]
 800fcac:	2b2e      	cmp	r3, #46	; 0x2e
 800fcae:	d10c      	bne.n	800fcca <_vfiprintf_r+0x15a>
 800fcb0:	7863      	ldrb	r3, [r4, #1]
 800fcb2:	2b2a      	cmp	r3, #42	; 0x2a
 800fcb4:	d134      	bne.n	800fd20 <_vfiprintf_r+0x1b0>
 800fcb6:	9b03      	ldr	r3, [sp, #12]
 800fcb8:	1d1a      	adds	r2, r3, #4
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	9203      	str	r2, [sp, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	bfb8      	it	lt
 800fcc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcc6:	3402      	adds	r4, #2
 800fcc8:	9305      	str	r3, [sp, #20]
 800fcca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fda0 <_vfiprintf_r+0x230>
 800fcce:	7821      	ldrb	r1, [r4, #0]
 800fcd0:	2203      	movs	r2, #3
 800fcd2:	4650      	mov	r0, sl
 800fcd4:	f7f0 fa7c 	bl	80001d0 <memchr>
 800fcd8:	b138      	cbz	r0, 800fcea <_vfiprintf_r+0x17a>
 800fcda:	9b04      	ldr	r3, [sp, #16]
 800fcdc:	eba0 000a 	sub.w	r0, r0, sl
 800fce0:	2240      	movs	r2, #64	; 0x40
 800fce2:	4082      	lsls	r2, r0
 800fce4:	4313      	orrs	r3, r2
 800fce6:	3401      	adds	r4, #1
 800fce8:	9304      	str	r3, [sp, #16]
 800fcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcee:	4829      	ldr	r0, [pc, #164]	; (800fd94 <_vfiprintf_r+0x224>)
 800fcf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcf4:	2206      	movs	r2, #6
 800fcf6:	f7f0 fa6b 	bl	80001d0 <memchr>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d03f      	beq.n	800fd7e <_vfiprintf_r+0x20e>
 800fcfe:	4b26      	ldr	r3, [pc, #152]	; (800fd98 <_vfiprintf_r+0x228>)
 800fd00:	bb1b      	cbnz	r3, 800fd4a <_vfiprintf_r+0x1da>
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	3307      	adds	r3, #7
 800fd06:	f023 0307 	bic.w	r3, r3, #7
 800fd0a:	3308      	adds	r3, #8
 800fd0c:	9303      	str	r3, [sp, #12]
 800fd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd10:	443b      	add	r3, r7
 800fd12:	9309      	str	r3, [sp, #36]	; 0x24
 800fd14:	e768      	b.n	800fbe8 <_vfiprintf_r+0x78>
 800fd16:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	2001      	movs	r0, #1
 800fd1e:	e7a6      	b.n	800fc6e <_vfiprintf_r+0xfe>
 800fd20:	2300      	movs	r3, #0
 800fd22:	3401      	adds	r4, #1
 800fd24:	9305      	str	r3, [sp, #20]
 800fd26:	4619      	mov	r1, r3
 800fd28:	f04f 0c0a 	mov.w	ip, #10
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd32:	3a30      	subs	r2, #48	; 0x30
 800fd34:	2a09      	cmp	r2, #9
 800fd36:	d903      	bls.n	800fd40 <_vfiprintf_r+0x1d0>
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d0c6      	beq.n	800fcca <_vfiprintf_r+0x15a>
 800fd3c:	9105      	str	r1, [sp, #20]
 800fd3e:	e7c4      	b.n	800fcca <_vfiprintf_r+0x15a>
 800fd40:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd44:	4604      	mov	r4, r0
 800fd46:	2301      	movs	r3, #1
 800fd48:	e7f0      	b.n	800fd2c <_vfiprintf_r+0x1bc>
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	462a      	mov	r2, r5
 800fd50:	4b12      	ldr	r3, [pc, #72]	; (800fd9c <_vfiprintf_r+0x22c>)
 800fd52:	a904      	add	r1, sp, #16
 800fd54:	4630      	mov	r0, r6
 800fd56:	f7fd fc2b 	bl	800d5b0 <_printf_float>
 800fd5a:	4607      	mov	r7, r0
 800fd5c:	1c78      	adds	r0, r7, #1
 800fd5e:	d1d6      	bne.n	800fd0e <_vfiprintf_r+0x19e>
 800fd60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd62:	07d9      	lsls	r1, r3, #31
 800fd64:	d405      	bmi.n	800fd72 <_vfiprintf_r+0x202>
 800fd66:	89ab      	ldrh	r3, [r5, #12]
 800fd68:	059a      	lsls	r2, r3, #22
 800fd6a:	d402      	bmi.n	800fd72 <_vfiprintf_r+0x202>
 800fd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd6e:	f7fe fa78 	bl	800e262 <__retarget_lock_release_recursive>
 800fd72:	89ab      	ldrh	r3, [r5, #12]
 800fd74:	065b      	lsls	r3, r3, #25
 800fd76:	f53f af1d 	bmi.w	800fbb4 <_vfiprintf_r+0x44>
 800fd7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd7c:	e71c      	b.n	800fbb8 <_vfiprintf_r+0x48>
 800fd7e:	ab03      	add	r3, sp, #12
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	462a      	mov	r2, r5
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <_vfiprintf_r+0x22c>)
 800fd86:	a904      	add	r1, sp, #16
 800fd88:	4630      	mov	r0, r6
 800fd8a:	f7fd feb5 	bl	800daf8 <_printf_i>
 800fd8e:	e7e4      	b.n	800fd5a <_vfiprintf_r+0x1ea>
 800fd90:	08010884 	.word	0x08010884
 800fd94:	0801088e 	.word	0x0801088e
 800fd98:	0800d5b1 	.word	0x0800d5b1
 800fd9c:	0800fb4b 	.word	0x0800fb4b
 800fda0:	0801088a 	.word	0x0801088a

0800fda4 <__sflush_r>:
 800fda4:	898a      	ldrh	r2, [r1, #12]
 800fda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdaa:	4605      	mov	r5, r0
 800fdac:	0710      	lsls	r0, r2, #28
 800fdae:	460c      	mov	r4, r1
 800fdb0:	d458      	bmi.n	800fe64 <__sflush_r+0xc0>
 800fdb2:	684b      	ldr	r3, [r1, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dc05      	bgt.n	800fdc4 <__sflush_r+0x20>
 800fdb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	dc02      	bgt.n	800fdc4 <__sflush_r+0x20>
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdc6:	2e00      	cmp	r6, #0
 800fdc8:	d0f9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdd0:	682f      	ldr	r7, [r5, #0]
 800fdd2:	6a21      	ldr	r1, [r4, #32]
 800fdd4:	602b      	str	r3, [r5, #0]
 800fdd6:	d032      	beq.n	800fe3e <__sflush_r+0x9a>
 800fdd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	075a      	lsls	r2, r3, #29
 800fdde:	d505      	bpl.n	800fdec <__sflush_r+0x48>
 800fde0:	6863      	ldr	r3, [r4, #4]
 800fde2:	1ac0      	subs	r0, r0, r3
 800fde4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fde6:	b10b      	cbz	r3, 800fdec <__sflush_r+0x48>
 800fde8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdea:	1ac0      	subs	r0, r0, r3
 800fdec:	2300      	movs	r3, #0
 800fdee:	4602      	mov	r2, r0
 800fdf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdf2:	6a21      	ldr	r1, [r4, #32]
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	47b0      	blx	r6
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	89a3      	ldrh	r3, [r4, #12]
 800fdfc:	d106      	bne.n	800fe0c <__sflush_r+0x68>
 800fdfe:	6829      	ldr	r1, [r5, #0]
 800fe00:	291d      	cmp	r1, #29
 800fe02:	d82b      	bhi.n	800fe5c <__sflush_r+0xb8>
 800fe04:	4a29      	ldr	r2, [pc, #164]	; (800feac <__sflush_r+0x108>)
 800fe06:	410a      	asrs	r2, r1
 800fe08:	07d6      	lsls	r6, r2, #31
 800fe0a:	d427      	bmi.n	800fe5c <__sflush_r+0xb8>
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	6062      	str	r2, [r4, #4]
 800fe10:	04d9      	lsls	r1, r3, #19
 800fe12:	6922      	ldr	r2, [r4, #16]
 800fe14:	6022      	str	r2, [r4, #0]
 800fe16:	d504      	bpl.n	800fe22 <__sflush_r+0x7e>
 800fe18:	1c42      	adds	r2, r0, #1
 800fe1a:	d101      	bne.n	800fe20 <__sflush_r+0x7c>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b903      	cbnz	r3, 800fe22 <__sflush_r+0x7e>
 800fe20:	6560      	str	r0, [r4, #84]	; 0x54
 800fe22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe24:	602f      	str	r7, [r5, #0]
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d0c9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fe2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe2e:	4299      	cmp	r1, r3
 800fe30:	d002      	beq.n	800fe38 <__sflush_r+0x94>
 800fe32:	4628      	mov	r0, r5
 800fe34:	f7ff f89e 	bl	800ef74 <_free_r>
 800fe38:	2000      	movs	r0, #0
 800fe3a:	6360      	str	r0, [r4, #52]	; 0x34
 800fe3c:	e7c0      	b.n	800fdc0 <__sflush_r+0x1c>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b0      	blx	r6
 800fe44:	1c41      	adds	r1, r0, #1
 800fe46:	d1c8      	bne.n	800fdda <__sflush_r+0x36>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0c5      	beq.n	800fdda <__sflush_r+0x36>
 800fe4e:	2b1d      	cmp	r3, #29
 800fe50:	d001      	beq.n	800fe56 <__sflush_r+0xb2>
 800fe52:	2b16      	cmp	r3, #22
 800fe54:	d101      	bne.n	800fe5a <__sflush_r+0xb6>
 800fe56:	602f      	str	r7, [r5, #0]
 800fe58:	e7b1      	b.n	800fdbe <__sflush_r+0x1a>
 800fe5a:	89a3      	ldrh	r3, [r4, #12]
 800fe5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe60:	81a3      	strh	r3, [r4, #12]
 800fe62:	e7ad      	b.n	800fdc0 <__sflush_r+0x1c>
 800fe64:	690f      	ldr	r7, [r1, #16]
 800fe66:	2f00      	cmp	r7, #0
 800fe68:	d0a9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fe6a:	0793      	lsls	r3, r2, #30
 800fe6c:	680e      	ldr	r6, [r1, #0]
 800fe6e:	bf08      	it	eq
 800fe70:	694b      	ldreq	r3, [r1, #20]
 800fe72:	600f      	str	r7, [r1, #0]
 800fe74:	bf18      	it	ne
 800fe76:	2300      	movne	r3, #0
 800fe78:	eba6 0807 	sub.w	r8, r6, r7
 800fe7c:	608b      	str	r3, [r1, #8]
 800fe7e:	f1b8 0f00 	cmp.w	r8, #0
 800fe82:	dd9c      	ble.n	800fdbe <__sflush_r+0x1a>
 800fe84:	6a21      	ldr	r1, [r4, #32]
 800fe86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe88:	4643      	mov	r3, r8
 800fe8a:	463a      	mov	r2, r7
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	47b0      	blx	r6
 800fe90:	2800      	cmp	r0, #0
 800fe92:	dc06      	bgt.n	800fea2 <__sflush_r+0xfe>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	e78e      	b.n	800fdc0 <__sflush_r+0x1c>
 800fea2:	4407      	add	r7, r0
 800fea4:	eba8 0800 	sub.w	r8, r8, r0
 800fea8:	e7e9      	b.n	800fe7e <__sflush_r+0xda>
 800feaa:	bf00      	nop
 800feac:	dfbffffe 	.word	0xdfbffffe

0800feb0 <_fflush_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	690b      	ldr	r3, [r1, #16]
 800feb4:	4605      	mov	r5, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b913      	cbnz	r3, 800fec0 <_fflush_r+0x10>
 800feba:	2500      	movs	r5, #0
 800febc:	4628      	mov	r0, r5
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	b118      	cbz	r0, 800feca <_fflush_r+0x1a>
 800fec2:	6a03      	ldr	r3, [r0, #32]
 800fec4:	b90b      	cbnz	r3, 800feca <_fflush_r+0x1a>
 800fec6:	f7fd ffb3 	bl	800de30 <__sinit>
 800feca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0f3      	beq.n	800feba <_fflush_r+0xa>
 800fed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fed4:	07d0      	lsls	r0, r2, #31
 800fed6:	d404      	bmi.n	800fee2 <_fflush_r+0x32>
 800fed8:	0599      	lsls	r1, r3, #22
 800feda:	d402      	bmi.n	800fee2 <_fflush_r+0x32>
 800fedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fede:	f7fe f9bf 	bl	800e260 <__retarget_lock_acquire_recursive>
 800fee2:	4628      	mov	r0, r5
 800fee4:	4621      	mov	r1, r4
 800fee6:	f7ff ff5d 	bl	800fda4 <__sflush_r>
 800feea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feec:	07da      	lsls	r2, r3, #31
 800feee:	4605      	mov	r5, r0
 800fef0:	d4e4      	bmi.n	800febc <_fflush_r+0xc>
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	059b      	lsls	r3, r3, #22
 800fef6:	d4e1      	bmi.n	800febc <_fflush_r+0xc>
 800fef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fefa:	f7fe f9b2 	bl	800e262 <__retarget_lock_release_recursive>
 800fefe:	e7dd      	b.n	800febc <_fflush_r+0xc>

0800ff00 <__swhatbuf_r>:
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	460c      	mov	r4, r1
 800ff04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff08:	2900      	cmp	r1, #0
 800ff0a:	b096      	sub	sp, #88	; 0x58
 800ff0c:	4615      	mov	r5, r2
 800ff0e:	461e      	mov	r6, r3
 800ff10:	da0d      	bge.n	800ff2e <__swhatbuf_r+0x2e>
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff18:	f04f 0100 	mov.w	r1, #0
 800ff1c:	bf0c      	ite	eq
 800ff1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff22:	2340      	movne	r3, #64	; 0x40
 800ff24:	2000      	movs	r0, #0
 800ff26:	6031      	str	r1, [r6, #0]
 800ff28:	602b      	str	r3, [r5, #0]
 800ff2a:	b016      	add	sp, #88	; 0x58
 800ff2c:	bd70      	pop	{r4, r5, r6, pc}
 800ff2e:	466a      	mov	r2, sp
 800ff30:	f000 f862 	bl	800fff8 <_fstat_r>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	dbec      	blt.n	800ff12 <__swhatbuf_r+0x12>
 800ff38:	9901      	ldr	r1, [sp, #4]
 800ff3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ff3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ff42:	4259      	negs	r1, r3
 800ff44:	4159      	adcs	r1, r3
 800ff46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff4a:	e7eb      	b.n	800ff24 <__swhatbuf_r+0x24>

0800ff4c <__smakebuf_r>:
 800ff4c:	898b      	ldrh	r3, [r1, #12]
 800ff4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff50:	079d      	lsls	r5, r3, #30
 800ff52:	4606      	mov	r6, r0
 800ff54:	460c      	mov	r4, r1
 800ff56:	d507      	bpl.n	800ff68 <__smakebuf_r+0x1c>
 800ff58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	2301      	movs	r3, #1
 800ff62:	6163      	str	r3, [r4, #20]
 800ff64:	b002      	add	sp, #8
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	ab01      	add	r3, sp, #4
 800ff6a:	466a      	mov	r2, sp
 800ff6c:	f7ff ffc8 	bl	800ff00 <__swhatbuf_r>
 800ff70:	9900      	ldr	r1, [sp, #0]
 800ff72:	4605      	mov	r5, r0
 800ff74:	4630      	mov	r0, r6
 800ff76:	f7ff f871 	bl	800f05c <_malloc_r>
 800ff7a:	b948      	cbnz	r0, 800ff90 <__smakebuf_r+0x44>
 800ff7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff80:	059a      	lsls	r2, r3, #22
 800ff82:	d4ef      	bmi.n	800ff64 <__smakebuf_r+0x18>
 800ff84:	f023 0303 	bic.w	r3, r3, #3
 800ff88:	f043 0302 	orr.w	r3, r3, #2
 800ff8c:	81a3      	strh	r3, [r4, #12]
 800ff8e:	e7e3      	b.n	800ff58 <__smakebuf_r+0xc>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	6020      	str	r0, [r4, #0]
 800ff94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff98:	81a3      	strh	r3, [r4, #12]
 800ff9a:	9b00      	ldr	r3, [sp, #0]
 800ff9c:	6163      	str	r3, [r4, #20]
 800ff9e:	9b01      	ldr	r3, [sp, #4]
 800ffa0:	6120      	str	r0, [r4, #16]
 800ffa2:	b15b      	cbz	r3, 800ffbc <__smakebuf_r+0x70>
 800ffa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f000 f837 	bl	801001c <_isatty_r>
 800ffae:	b128      	cbz	r0, 800ffbc <__smakebuf_r+0x70>
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	f023 0303 	bic.w	r3, r3, #3
 800ffb6:	f043 0301 	orr.w	r3, r3, #1
 800ffba:	81a3      	strh	r3, [r4, #12]
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	431d      	orrs	r5, r3
 800ffc0:	81a5      	strh	r5, [r4, #12]
 800ffc2:	e7cf      	b.n	800ff64 <__smakebuf_r+0x18>

0800ffc4 <memmove>:
 800ffc4:	4288      	cmp	r0, r1
 800ffc6:	b510      	push	{r4, lr}
 800ffc8:	eb01 0402 	add.w	r4, r1, r2
 800ffcc:	d902      	bls.n	800ffd4 <memmove+0x10>
 800ffce:	4284      	cmp	r4, r0
 800ffd0:	4623      	mov	r3, r4
 800ffd2:	d807      	bhi.n	800ffe4 <memmove+0x20>
 800ffd4:	1e43      	subs	r3, r0, #1
 800ffd6:	42a1      	cmp	r1, r4
 800ffd8:	d008      	beq.n	800ffec <memmove+0x28>
 800ffda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffe2:	e7f8      	b.n	800ffd6 <memmove+0x12>
 800ffe4:	4402      	add	r2, r0
 800ffe6:	4601      	mov	r1, r0
 800ffe8:	428a      	cmp	r2, r1
 800ffea:	d100      	bne.n	800ffee <memmove+0x2a>
 800ffec:	bd10      	pop	{r4, pc}
 800ffee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fff6:	e7f7      	b.n	800ffe8 <memmove+0x24>

0800fff8 <_fstat_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	4d07      	ldr	r5, [pc, #28]	; (8010018 <_fstat_r+0x20>)
 800fffc:	2300      	movs	r3, #0
 800fffe:	4604      	mov	r4, r0
 8010000:	4608      	mov	r0, r1
 8010002:	4611      	mov	r1, r2
 8010004:	602b      	str	r3, [r5, #0]
 8010006:	f7f2 fcc6 	bl	8002996 <_fstat>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	d102      	bne.n	8010014 <_fstat_r+0x1c>
 801000e:	682b      	ldr	r3, [r5, #0]
 8010010:	b103      	cbz	r3, 8010014 <_fstat_r+0x1c>
 8010012:	6023      	str	r3, [r4, #0]
 8010014:	bd38      	pop	{r3, r4, r5, pc}
 8010016:	bf00      	nop
 8010018:	20001738 	.word	0x20001738

0801001c <_isatty_r>:
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	4d06      	ldr	r5, [pc, #24]	; (8010038 <_isatty_r+0x1c>)
 8010020:	2300      	movs	r3, #0
 8010022:	4604      	mov	r4, r0
 8010024:	4608      	mov	r0, r1
 8010026:	602b      	str	r3, [r5, #0]
 8010028:	f7f2 fcc5 	bl	80029b6 <_isatty>
 801002c:	1c43      	adds	r3, r0, #1
 801002e:	d102      	bne.n	8010036 <_isatty_r+0x1a>
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	b103      	cbz	r3, 8010036 <_isatty_r+0x1a>
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	20001738 	.word	0x20001738

0801003c <_sbrk_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d06      	ldr	r5, [pc, #24]	; (8010058 <_sbrk_r+0x1c>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	f7f2 fcce 	bl	80029e8 <_sbrk>
 801004c:	1c43      	adds	r3, r0, #1
 801004e:	d102      	bne.n	8010056 <_sbrk_r+0x1a>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	b103      	cbz	r3, 8010056 <_sbrk_r+0x1a>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	bd38      	pop	{r3, r4, r5, pc}
 8010058:	20001738 	.word	0x20001738

0801005c <__assert_func>:
 801005c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801005e:	4614      	mov	r4, r2
 8010060:	461a      	mov	r2, r3
 8010062:	4b09      	ldr	r3, [pc, #36]	; (8010088 <__assert_func+0x2c>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4605      	mov	r5, r0
 8010068:	68d8      	ldr	r0, [r3, #12]
 801006a:	b14c      	cbz	r4, 8010080 <__assert_func+0x24>
 801006c:	4b07      	ldr	r3, [pc, #28]	; (801008c <__assert_func+0x30>)
 801006e:	9100      	str	r1, [sp, #0]
 8010070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010074:	4906      	ldr	r1, [pc, #24]	; (8010090 <__assert_func+0x34>)
 8010076:	462b      	mov	r3, r5
 8010078:	f000 f872 	bl	8010160 <fiprintf>
 801007c:	f000 f882 	bl	8010184 <abort>
 8010080:	4b04      	ldr	r3, [pc, #16]	; (8010094 <__assert_func+0x38>)
 8010082:	461c      	mov	r4, r3
 8010084:	e7f3      	b.n	801006e <__assert_func+0x12>
 8010086:	bf00      	nop
 8010088:	20000164 	.word	0x20000164
 801008c:	0801089f 	.word	0x0801089f
 8010090:	080108ac 	.word	0x080108ac
 8010094:	080108da 	.word	0x080108da

08010098 <_calloc_r>:
 8010098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801009a:	fba1 2402 	umull	r2, r4, r1, r2
 801009e:	b94c      	cbnz	r4, 80100b4 <_calloc_r+0x1c>
 80100a0:	4611      	mov	r1, r2
 80100a2:	9201      	str	r2, [sp, #4]
 80100a4:	f7fe ffda 	bl	800f05c <_malloc_r>
 80100a8:	9a01      	ldr	r2, [sp, #4]
 80100aa:	4605      	mov	r5, r0
 80100ac:	b930      	cbnz	r0, 80100bc <_calloc_r+0x24>
 80100ae:	4628      	mov	r0, r5
 80100b0:	b003      	add	sp, #12
 80100b2:	bd30      	pop	{r4, r5, pc}
 80100b4:	220c      	movs	r2, #12
 80100b6:	6002      	str	r2, [r0, #0]
 80100b8:	2500      	movs	r5, #0
 80100ba:	e7f8      	b.n	80100ae <_calloc_r+0x16>
 80100bc:	4621      	mov	r1, r4
 80100be:	f7fe f853 	bl	800e168 <memset>
 80100c2:	e7f4      	b.n	80100ae <_calloc_r+0x16>

080100c4 <__ascii_mbtowc>:
 80100c4:	b082      	sub	sp, #8
 80100c6:	b901      	cbnz	r1, 80100ca <__ascii_mbtowc+0x6>
 80100c8:	a901      	add	r1, sp, #4
 80100ca:	b142      	cbz	r2, 80100de <__ascii_mbtowc+0x1a>
 80100cc:	b14b      	cbz	r3, 80100e2 <__ascii_mbtowc+0x1e>
 80100ce:	7813      	ldrb	r3, [r2, #0]
 80100d0:	600b      	str	r3, [r1, #0]
 80100d2:	7812      	ldrb	r2, [r2, #0]
 80100d4:	1e10      	subs	r0, r2, #0
 80100d6:	bf18      	it	ne
 80100d8:	2001      	movne	r0, #1
 80100da:	b002      	add	sp, #8
 80100dc:	4770      	bx	lr
 80100de:	4610      	mov	r0, r2
 80100e0:	e7fb      	b.n	80100da <__ascii_mbtowc+0x16>
 80100e2:	f06f 0001 	mvn.w	r0, #1
 80100e6:	e7f8      	b.n	80100da <__ascii_mbtowc+0x16>

080100e8 <_realloc_r>:
 80100e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ec:	4680      	mov	r8, r0
 80100ee:	4614      	mov	r4, r2
 80100f0:	460e      	mov	r6, r1
 80100f2:	b921      	cbnz	r1, 80100fe <_realloc_r+0x16>
 80100f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100f8:	4611      	mov	r1, r2
 80100fa:	f7fe bfaf 	b.w	800f05c <_malloc_r>
 80100fe:	b92a      	cbnz	r2, 801010c <_realloc_r+0x24>
 8010100:	f7fe ff38 	bl	800ef74 <_free_r>
 8010104:	4625      	mov	r5, r4
 8010106:	4628      	mov	r0, r5
 8010108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801010c:	f000 f841 	bl	8010192 <_malloc_usable_size_r>
 8010110:	4284      	cmp	r4, r0
 8010112:	4607      	mov	r7, r0
 8010114:	d802      	bhi.n	801011c <_realloc_r+0x34>
 8010116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801011a:	d812      	bhi.n	8010142 <_realloc_r+0x5a>
 801011c:	4621      	mov	r1, r4
 801011e:	4640      	mov	r0, r8
 8010120:	f7fe ff9c 	bl	800f05c <_malloc_r>
 8010124:	4605      	mov	r5, r0
 8010126:	2800      	cmp	r0, #0
 8010128:	d0ed      	beq.n	8010106 <_realloc_r+0x1e>
 801012a:	42bc      	cmp	r4, r7
 801012c:	4622      	mov	r2, r4
 801012e:	4631      	mov	r1, r6
 8010130:	bf28      	it	cs
 8010132:	463a      	movcs	r2, r7
 8010134:	f7fe f896 	bl	800e264 <memcpy>
 8010138:	4631      	mov	r1, r6
 801013a:	4640      	mov	r0, r8
 801013c:	f7fe ff1a 	bl	800ef74 <_free_r>
 8010140:	e7e1      	b.n	8010106 <_realloc_r+0x1e>
 8010142:	4635      	mov	r5, r6
 8010144:	e7df      	b.n	8010106 <_realloc_r+0x1e>

08010146 <__ascii_wctomb>:
 8010146:	b149      	cbz	r1, 801015c <__ascii_wctomb+0x16>
 8010148:	2aff      	cmp	r2, #255	; 0xff
 801014a:	bf85      	ittet	hi
 801014c:	238a      	movhi	r3, #138	; 0x8a
 801014e:	6003      	strhi	r3, [r0, #0]
 8010150:	700a      	strbls	r2, [r1, #0]
 8010152:	f04f 30ff 	movhi.w	r0, #4294967295
 8010156:	bf98      	it	ls
 8010158:	2001      	movls	r0, #1
 801015a:	4770      	bx	lr
 801015c:	4608      	mov	r0, r1
 801015e:	4770      	bx	lr

08010160 <fiprintf>:
 8010160:	b40e      	push	{r1, r2, r3}
 8010162:	b503      	push	{r0, r1, lr}
 8010164:	4601      	mov	r1, r0
 8010166:	ab03      	add	r3, sp, #12
 8010168:	4805      	ldr	r0, [pc, #20]	; (8010180 <fiprintf+0x20>)
 801016a:	f853 2b04 	ldr.w	r2, [r3], #4
 801016e:	6800      	ldr	r0, [r0, #0]
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	f7ff fcfd 	bl	800fb70 <_vfiprintf_r>
 8010176:	b002      	add	sp, #8
 8010178:	f85d eb04 	ldr.w	lr, [sp], #4
 801017c:	b003      	add	sp, #12
 801017e:	4770      	bx	lr
 8010180:	20000164 	.word	0x20000164

08010184 <abort>:
 8010184:	b508      	push	{r3, lr}
 8010186:	2006      	movs	r0, #6
 8010188:	f000 f834 	bl	80101f4 <raise>
 801018c:	2001      	movs	r0, #1
 801018e:	f7f2 fbcf 	bl	8002930 <_exit>

08010192 <_malloc_usable_size_r>:
 8010192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010196:	1f18      	subs	r0, r3, #4
 8010198:	2b00      	cmp	r3, #0
 801019a:	bfbc      	itt	lt
 801019c:	580b      	ldrlt	r3, [r1, r0]
 801019e:	18c0      	addlt	r0, r0, r3
 80101a0:	4770      	bx	lr

080101a2 <_raise_r>:
 80101a2:	291f      	cmp	r1, #31
 80101a4:	b538      	push	{r3, r4, r5, lr}
 80101a6:	4604      	mov	r4, r0
 80101a8:	460d      	mov	r5, r1
 80101aa:	d904      	bls.n	80101b6 <_raise_r+0x14>
 80101ac:	2316      	movs	r3, #22
 80101ae:	6003      	str	r3, [r0, #0]
 80101b0:	f04f 30ff 	mov.w	r0, #4294967295
 80101b4:	bd38      	pop	{r3, r4, r5, pc}
 80101b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101b8:	b112      	cbz	r2, 80101c0 <_raise_r+0x1e>
 80101ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101be:	b94b      	cbnz	r3, 80101d4 <_raise_r+0x32>
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 f831 	bl	8010228 <_getpid_r>
 80101c6:	462a      	mov	r2, r5
 80101c8:	4601      	mov	r1, r0
 80101ca:	4620      	mov	r0, r4
 80101cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101d0:	f000 b818 	b.w	8010204 <_kill_r>
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d00a      	beq.n	80101ee <_raise_r+0x4c>
 80101d8:	1c59      	adds	r1, r3, #1
 80101da:	d103      	bne.n	80101e4 <_raise_r+0x42>
 80101dc:	2316      	movs	r3, #22
 80101de:	6003      	str	r3, [r0, #0]
 80101e0:	2001      	movs	r0, #1
 80101e2:	e7e7      	b.n	80101b4 <_raise_r+0x12>
 80101e4:	2400      	movs	r4, #0
 80101e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101ea:	4628      	mov	r0, r5
 80101ec:	4798      	blx	r3
 80101ee:	2000      	movs	r0, #0
 80101f0:	e7e0      	b.n	80101b4 <_raise_r+0x12>
	...

080101f4 <raise>:
 80101f4:	4b02      	ldr	r3, [pc, #8]	; (8010200 <raise+0xc>)
 80101f6:	4601      	mov	r1, r0
 80101f8:	6818      	ldr	r0, [r3, #0]
 80101fa:	f7ff bfd2 	b.w	80101a2 <_raise_r>
 80101fe:	bf00      	nop
 8010200:	20000164 	.word	0x20000164

08010204 <_kill_r>:
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	4d07      	ldr	r5, [pc, #28]	; (8010224 <_kill_r+0x20>)
 8010208:	2300      	movs	r3, #0
 801020a:	4604      	mov	r4, r0
 801020c:	4608      	mov	r0, r1
 801020e:	4611      	mov	r1, r2
 8010210:	602b      	str	r3, [r5, #0]
 8010212:	f7f2 fb7d 	bl	8002910 <_kill>
 8010216:	1c43      	adds	r3, r0, #1
 8010218:	d102      	bne.n	8010220 <_kill_r+0x1c>
 801021a:	682b      	ldr	r3, [r5, #0]
 801021c:	b103      	cbz	r3, 8010220 <_kill_r+0x1c>
 801021e:	6023      	str	r3, [r4, #0]
 8010220:	bd38      	pop	{r3, r4, r5, pc}
 8010222:	bf00      	nop
 8010224:	20001738 	.word	0x20001738

08010228 <_getpid_r>:
 8010228:	f7f2 bb6a 	b.w	8002900 <_getpid>

0801022c <_init>:
 801022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022e:	bf00      	nop
 8010230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010232:	bc08      	pop	{r3}
 8010234:	469e      	mov	lr, r3
 8010236:	4770      	bx	lr

08010238 <_fini>:
 8010238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801023a:	bf00      	nop
 801023c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801023e:	bc08      	pop	{r3}
 8010240:	469e      	mov	lr, r3
 8010242:	4770      	bx	lr
